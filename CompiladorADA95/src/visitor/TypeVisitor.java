package visitor;

import abstractSyntaxTree.Add;
import abstractSyntaxTree.And;
import abstractSyntaxTree.AssignVariableSimple;
import abstractSyntaxTree.AssignVariableWithDeclaration;
import abstractSyntaxTree.CaseNotOthers;
import abstractSyntaxTree.CaseOthers;
import abstractSyntaxTree.DeclarationPart;
import abstractSyntaxTree.Division;
import abstractSyntaxTree.ElsIf;
import abstractSyntaxTree.ElsIfList;
import abstractSyntaxTree.Equal;
import abstractSyntaxTree.Exit;
import abstractSyntaxTree.False;
import abstractSyntaxTree.FloatNumber;
import abstractSyntaxTree.For;
import abstractSyntaxTree.FunctionCall;
import abstractSyntaxTree.FunctionDeclaration;
import abstractSyntaxTree.FunctionParameters;
import abstractSyntaxTree.GetValue;
import abstractSyntaxTree.Greater;
import abstractSyntaxTree.GreaterOrEqual;
import abstractSyntaxTree.Identifier;
import abstractSyntaxTree.IfSimple;
import abstractSyntaxTree.IfWithElsIF;
import abstractSyntaxTree.IfWithElsIfAndElse;
import abstractSyntaxTree.IfWithElse;
import abstractSyntaxTree.IntegerNumber;
import abstractSyntaxTree.Less;
import abstractSyntaxTree.LessOrEqual;
import abstractSyntaxTree.Loop;
import abstractSyntaxTree.Minus;
import abstractSyntaxTree.ModeIn;
import abstractSyntaxTree.ModeInOut;
import abstractSyntaxTree.ModeOut;
import abstractSyntaxTree.Module;
import abstractSyntaxTree.Multiplication;
import abstractSyntaxTree.Negative;
import abstractSyntaxTree.Not;
import abstractSyntaxTree.NotEqual;
import abstractSyntaxTree.Or;
import abstractSyntaxTree.Parameter;
import abstractSyntaxTree.ParameterDeclarations;
import abstractSyntaxTree.Pow;
import abstractSyntaxTree.ProcedureDeclaration;
import abstractSyntaxTree.Program;
import abstractSyntaxTree.PutValue;
import abstractSyntaxTree.Range;
import abstractSyntaxTree.Return;
import abstractSyntaxTree.Statements;
import abstractSyntaxTree.StringLiteral;
import abstractSyntaxTree.True;
import abstractSyntaxTree.TypeBoolean;
import abstractSyntaxTree.TypeError;
import abstractSyntaxTree.TypeFloat;
import abstractSyntaxTree.TypeInteger;
import abstractSyntaxTree.TypeNull;
import abstractSyntaxTree.TypeString;
import abstractSyntaxTree.VariableDeclaration;
import abstractSyntaxTree.VariableIDs;
import abstractSyntaxTree.VariableType;
import abstractSyntaxTree.WhenElement;
import abstractSyntaxTree.WhenList;
import abstractSyntaxTree.WhenOption;
import abstractSyntaxTree.WhenOptions;
import abstractSyntaxTree.While;


public interface TypeVisitor {
    public VariableType path(IntegerNumber h);
    public VariableType path(FloatNumber h);
    public VariableType path(True h);
    public VariableType path(False h);
    public VariableType path(StringLiteral h);
    public VariableType path(Identifier h);
    public VariableType path(Add h);
    public VariableType path(Minus h);
    public VariableType path(Division h);
    public VariableType path(Multiplication h);
    public VariableType path(Pow h);
    public VariableType path(Negative h);
    public VariableType path(Module h);
    public VariableType path(Equal h);
    public VariableType path(NotEqual h);
    public VariableType path(Greater h);
    public VariableType path(Less h);
    public VariableType path(GreaterOrEqual h);
    public VariableType path(LessOrEqual h);
    public VariableType path(And h);
    public VariableType path(Or h);
    public VariableType path(Not h);
    public VariableType path(FunctionCall h);
    public VariableType path(FunctionParameters h);
    public VariableType path(VariableIDs h);
    public VariableType path(TypeInteger h); 
    public VariableType path(TypeBoolean h);
    public VariableType path(TypeFloat h);
    public VariableType path(TypeString h);
    public VariableType path(GetValue h);
    public VariableType path(PutValue h);
    public VariableType path(While h);
    public VariableType path(Statements h);
    public VariableType path(Range h);
    public VariableType path(For h);
    public VariableType path(Exit h);
    public VariableType path(Loop h);
    public VariableType path(Return h);
    public VariableType path(WhenOption h);
    public VariableType path(WhenOptions h);
    public VariableType path(CaseOthers h);
    public VariableType path(CaseNotOthers h);
    public VariableType path(VariableDeclaration h);
    public VariableType path(Parameter h);
    public VariableType path(ModeIn h);
    public VariableType path(ModeInOut h);
    public VariableType path(ModeOut h);
    public VariableType path(ParameterDeclarations h);
    public VariableType path(ProcedureDeclaration h);
    public VariableType path(FunctionDeclaration h);
    public VariableType path(DeclarationPart h);
    public VariableType path(Program h);
    public VariableType path(AssignVariableSimple h);
    public VariableType path(AssignVariableWithDeclaration h);
    public VariableType path(IfSimple h);
    public VariableType path(IfWithElse h);
    public VariableType path(ElsIf h);
    public VariableType path(ElsIfList h);
    public VariableType path(IfWithElsIF h);
    public VariableType path(IfWithElsIfAndElse h);
    public VariableType path(WhenElement aThis);
    public VariableType path(WhenList aThis);

    public VariableType path(TypeError aThis);

    public VariableType path(TypeNull aThis);

}
