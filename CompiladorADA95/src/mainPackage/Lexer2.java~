/* The following code was generated by JFlex 1.6.1 */

package mainPackage;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>./src/mainPackage/lexer.flex</tt>
 */
class Lexer2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\5\1\3\1\2\1\11\1\12\1\1\16\5\4\0\1\42\1\0"+
    "\1\62\1\0\1\4\1\0\1\61\1\14\1\54\1\55\1\53\1\52"+
    "\1\60\1\20\1\57\1\51\1\6\11\7\1\45\1\56\1\47\1\46"+
    "\1\50\2\0\1\25\1\44\1\23\1\21\1\22\1\31\1\43\1\40"+
    "\1\30\2\16\1\24\1\16\1\32\1\35\1\37\1\16\1\26\1\27"+
    "\1\34\1\36\1\16\1\41\1\33\2\16\1\0\1\63\2\0\1\10"+
    "\1\0\1\25\1\44\1\23\1\21\1\22\1\31\1\43\1\40\1\30"+
    "\2\16\1\24\1\16\1\32\1\35\1\37\1\16\1\26\1\27\1\34"+
    "\1\36\1\16\1\41\1\33\2\16\4\0\6\5\1\13\32\5\2\0"+
    "\4\4\4\0\1\16\2\0\1\5\7\0\1\16\4\0\1\16\5\0"+
    "\27\16\1\0\37\16\1\0\70\16\2\30\115\16\1\27\u0142\16\4\0"+
    "\14\16\16\0\5\16\7\0\1\16\1\0\1\16\21\0\160\17\5\16"+
    "\1\0\2\16\2\0\4\16\1\0\1\15\6\0\1\16\1\0\3\16"+
    "\1\0\1\16\1\0\24\16\1\0\123\16\1\0\213\16\1\0\5\17"+
    "\2\15\236\16\10\15\1\0\46\16\2\0\1\16\7\0\47\16\7\0"+
    "\1\4\1\0\55\17\1\0\1\17\1\0\2\17\1\0\2\17\1\0"+
    "\1\17\10\0\33\16\5\0\3\16\15\0\5\5\6\0\1\4\4\0"+
    "\13\17\5\0\53\16\37\17\4\0\2\16\1\17\143\16\1\0\1\16"+
    "\7\17\1\5\1\0\6\17\2\16\2\17\1\0\4\17\2\16\12\17"+
    "\3\16\2\0\1\16\17\0\1\5\1\16\1\17\36\16\33\17\2\0"+
    "\131\16\13\17\1\16\16\0\12\17\41\16\11\17\2\16\4\0\1\16"+
    "\5\0\26\16\4\17\1\16\11\17\1\16\3\17\1\16\5\17\22\0"+
    "\31\16\3\17\104\0\1\16\1\15\13\16\6\15\61\0\33\17\1\15"+
    "\4\17\66\16\3\17\1\16\22\17\1\16\7\17\12\16\2\17\2\0"+
    "\12\17\1\0\7\16\1\15\7\16\1\15\3\17\1\0\10\16\2\0"+
    "\2\16\2\0\26\16\1\0\7\16\1\0\1\16\3\0\4\16\2\0"+
    "\1\17\1\16\7\17\2\0\2\17\2\0\3\17\1\16\10\0\1\17"+
    "\4\0\2\16\1\0\3\16\2\17\2\0\12\17\2\16\2\4\7\0"+
    "\1\4\5\0\3\17\1\0\6\16\4\0\2\16\2\0\26\16\1\0"+
    "\7\16\1\0\2\16\1\0\2\16\1\0\2\16\2\0\1\17\1\0"+
    "\5\17\4\0\2\17\2\0\3\17\3\0\1\17\7\0\4\16\1\0"+
    "\1\16\7\0\14\17\3\16\1\17\13\0\3\17\1\0\11\16\1\0"+
    "\3\16\1\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16\2\0"+
    "\1\17\1\16\10\17\1\0\3\17\1\0\3\17\2\0\1\16\17\0"+
    "\2\16\2\17\2\0\12\17\1\0\1\4\17\0\3\17\1\0\10\16"+
    "\2\0\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16"+
    "\2\0\1\17\1\16\7\17\2\0\2\17\2\0\3\17\10\0\2\17"+
    "\4\0\2\16\1\0\3\16\2\17\2\0\12\17\1\0\1\16\20\0"+
    "\1\17\1\16\1\0\6\16\3\0\3\16\1\0\4\16\3\0\2\16"+
    "\1\0\1\16\1\0\2\16\3\0\2\16\3\0\3\16\3\0\14\16"+
    "\4\0\5\17\3\0\3\17\1\0\4\17\2\0\1\16\6\0\1\17"+
    "\16\0\12\17\11\0\1\4\6\0\1\15\3\17\1\0\10\16\1\0"+
    "\3\16\1\0\27\16\1\0\12\16\1\15\5\16\3\0\1\16\7\17"+
    "\1\0\3\17\1\0\4\17\7\0\2\17\1\0\2\16\6\0\2\16"+
    "\2\17\2\0\12\17\21\0\1\15\2\17\1\0\10\16\1\0\3\16"+
    "\1\0\27\16\1\0\12\16\1\0\5\16\2\0\1\17\1\16\7\17"+
    "\1\0\3\17\1\0\4\17\7\0\2\17\7\0\1\16\1\0\2\16"+
    "\2\17\2\0\12\17\1\0\2\16\16\0\1\15\2\17\1\0\10\16"+
    "\1\0\3\16\1\0\51\16\2\0\1\16\7\17\1\0\3\17\1\0"+
    "\4\17\1\16\10\0\1\17\10\0\2\16\2\17\2\0\12\17\12\0"+
    "\6\16\2\0\2\17\1\0\22\16\3\0\30\16\1\0\11\16\1\0"+
    "\1\16\2\0\7\16\3\0\1\17\4\0\6\17\1\0\1\17\1\0"+
    "\10\17\6\0\12\15\2\0\2\17\15\0\60\16\1\17\2\16\7\17"+
    "\4\0\1\4\7\16\10\17\1\0\12\17\47\0\2\16\1\0\1\16"+
    "\2\0\2\16\1\0\1\16\2\0\1\16\6\0\4\16\1\0\7\16"+
    "\1\0\3\16\1\0\1\16\1\0\1\16\2\0\2\16\1\0\4\16"+
    "\1\17\2\16\6\17\1\0\2\17\1\16\2\0\5\16\1\0\1\16"+
    "\1\0\6\17\2\0\12\17\2\0\4\16\40\0\1\16\27\0\2\17"+
    "\6\0\12\17\13\0\1\17\1\0\1\17\1\0\1\17\4\0\2\17"+
    "\10\16\1\0\44\16\4\0\24\17\1\0\2\17\5\16\13\17\1\0"+
    "\44\17\11\0\1\17\71\0\53\16\24\17\1\16\12\17\6\0\6\16"+
    "\4\17\4\16\3\17\1\16\3\17\2\16\7\17\3\16\4\17\15\16"+
    "\14\17\1\16\17\17\2\0\46\16\1\0\1\16\5\0\1\16\2\0"+
    "\53\16\1\0\u014d\16\1\0\4\16\2\0\7\16\1\0\1\16\1\0"+
    "\4\16\2\0\51\16\1\0\4\16\2\0\41\16\1\0\4\16\2\0"+
    "\7\16\1\0\1\16\1\0\4\16\2\0\17\16\1\0\71\16\1\0"+
    "\4\16\2\0\103\16\2\0\3\17\40\0\20\16\20\0\125\16\14\0"+
    "\u026c\16\2\0\21\16\1\0\32\16\5\0\113\16\3\0\3\16\10\15"+
    "\7\0\15\16\1\0\4\16\3\17\13\0\22\16\3\17\13\0\22\16"+
    "\2\17\14\0\15\16\1\0\3\16\1\0\2\17\14\0\64\16\40\17"+
    "\3\0\1\16\3\0\1\4\1\16\1\17\2\0\12\17\41\0\3\17"+
    "\2\0\12\17\6\0\130\16\10\0\51\16\1\17\1\16\5\0\106\16"+
    "\12\0\35\16\2\15\1\0\14\17\4\0\14\17\12\0\12\17\36\16"+
    "\2\0\5\16\13\0\54\16\4\0\21\17\7\16\2\17\6\0\12\17"+
    "\46\0\27\16\5\17\4\0\65\16\12\17\1\0\35\17\2\0\13\17"+
    "\6\0\12\17\15\0\1\16\10\0\17\15\101\0\5\17\57\16\21\17"+
    "\7\16\4\0\12\17\21\0\11\17\14\0\3\17\36\16\15\17\2\16"+
    "\12\17\54\16\16\17\14\0\44\16\24\17\10\0\12\17\3\0\3\16"+
    "\12\17\44\16\122\0\3\17\1\0\25\17\4\16\1\17\4\16\3\17"+
    "\2\16\1\0\2\15\6\0\300\16\47\17\17\15\6\0\4\17\u0116\16"+
    "\2\0\6\16\2\0\46\16\2\0\6\16\2\0\10\16\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\37\16\2\0\65\16\1\0\7\16"+
    "\1\0\1\16\3\0\3\16\1\0\7\16\3\0\4\16\2\0\6\16"+
    "\4\0\15\16\5\0\3\16\1\0\7\16\16\0\5\5\30\0\1\11"+
    "\1\11\5\5\20\0\2\16\23\0\1\16\13\0\5\5\5\0\6\5"+
    "\1\0\1\16\15\0\1\16\20\0\15\16\3\0\33\4\25\0\15\17"+
    "\4\15\1\17\3\15\14\17\21\0\1\16\4\0\1\16\2\0\12\16"+
    "\1\0\1\16\3\0\5\16\6\0\1\16\1\0\1\16\1\0\1\16"+
    "\1\0\4\16\1\0\13\16\2\0\4\16\5\0\5\16\4\0\1\16"+
    "\21\0\51\16\u032d\0\64\15\u0716\0\57\16\1\0\57\16\1\0\205\16"+
    "\6\0\4\16\3\17\2\16\14\0\46\16\1\0\1\16\5\0\1\16"+
    "\2\0\70\16\7\0\1\16\17\0\1\17\27\16\11\0\7\16\1\0"+
    "\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16\1\0"+
    "\7\16\1\0\7\16\1\0\40\17\57\0\1\16\u01d5\0\3\16\31\0"+
    "\11\16\6\17\1\0\5\16\2\0\5\16\4\0\126\16\2\0\2\17"+
    "\2\0\3\16\1\0\132\16\1\0\4\16\5\0\51\16\3\0\136\16"+
    "\21\0\33\16\65\0\20\16\u0200\0\u19b6\16\112\0\u51cd\16\63\0\u048d\16"+
    "\103\0\56\16\2\0\u010d\16\3\0\20\16\12\17\2\16\24\0\57\16"+
    "\1\17\3\15\1\0\12\17\1\0\31\16\6\15\1\0\1\17\120\16"+
    "\2\17\45\0\11\16\2\0\147\16\2\0\4\16\1\0\4\16\14\15"+
    "\13\16\3\15\2\0\2\15\105\0\1\15\12\16\1\17\3\16\1\17"+
    "\4\16\1\17\27\16\5\17\20\0\1\4\7\0\64\16\14\0\2\17"+
    "\62\16\21\17\13\0\12\17\6\0\22\17\6\16\3\0\1\16\4\0"+
    "\12\17\34\16\10\17\2\0\27\16\15\17\14\0\35\16\3\0\4\17"+
    "\57\16\16\17\16\0\1\16\12\17\6\0\37\15\1\0\51\16\16\17"+
    "\11\0\3\16\1\17\10\16\2\17\2\0\12\17\6\0\27\16\3\0"+
    "\1\16\1\17\4\15\60\16\1\17\1\16\3\17\2\16\2\17\5\16"+
    "\2\17\1\16\1\17\1\16\30\0\3\16\2\0\13\16\5\17\2\0"+
    "\3\16\2\17\12\0\6\16\2\0\6\16\2\0\6\16\11\0\7\16"+
    "\1\0\7\16\1\0\53\15\1\0\4\15\4\0\2\15\132\0\43\16"+
    "\10\17\1\0\2\17\2\0\12\17\6\0\u2ba4\16\14\0\27\16\4\0"+
    "\61\16\u2104\0\u016e\16\2\0\152\16\46\0\7\16\14\0\5\16\5\0"+
    "\1\16\1\17\12\16\1\0\15\16\1\0\5\16\1\0\1\16\1\0"+
    "\2\16\1\0\2\16\1\0\154\16\41\0\u016b\16\22\0\100\16\2\0"+
    "\66\16\50\0\14\16\1\4\3\0\20\17\20\0\7\17\7\15\5\0"+
    "\2\16\30\0\3\16\31\0\1\4\6\0\5\16\1\0\207\16\2\0"+
    "\1\5\4\0\1\4\13\0\12\17\7\0\32\16\4\0\1\16\1\0"+
    "\32\16\13\0\131\16\3\0\6\16\2\0\6\16\2\0\6\16\2\0"+
    "\3\16\3\0\2\4\3\0\2\4\22\0\3\5\4\0\14\16\1\0"+
    "\32\16\1\0\23\16\1\0\2\16\1\0\17\16\2\0\16\16\42\0"+
    "\173\16\105\0\65\16\210\0\1\17\202\0\35\16\3\0\61\16\17\0"+
    "\1\15\37\0\37\16\1\15\20\0\33\16\5\0\53\15\5\0\36\16"+
    "\2\0\44\16\4\0\10\16\1\0\5\16\52\0\236\16\2\0\12\17"+
    "\126\0\50\15\10\0\64\15\234\0\u0137\15\11\0\26\15\12\0\10\15"+
    "\230\0\6\16\2\0\1\16\1\0\54\16\1\0\2\16\3\0\1\16"+
    "\2\0\27\16\12\0\27\15\11\0\37\15\141\0\26\16\12\0\32\16"+
    "\106\0\70\16\6\0\2\16\100\0\1\16\3\17\1\0\2\17\5\0"+
    "\4\17\4\16\1\0\3\16\1\0\33\16\4\0\3\17\4\0\1\17"+
    "\40\0\35\16\3\0\35\15\43\0\10\15\1\0\36\15\31\0\66\16"+
    "\12\0\26\16\12\0\23\16\15\0\22\15\156\0\111\16\u03b7\0\3\17"+
    "\65\16\17\17\37\0\12\17\17\0\1\15\3\17\55\16\13\17\2\0"+
    "\1\5\22\0\31\16\7\0\12\17\6\0\3\17\44\16\16\17\1\0"+
    "\12\17\20\0\44\15\2\0\1\15\11\0\3\17\60\16\16\17\4\16"+
    "\13\0\12\17\1\15\45\0\22\15\1\0\45\15\170\0\73\15\5\0"+
    "\12\15\7\0\3\15\1\0\10\15\2\0\2\15\2\0\26\15\1\0"+
    "\7\15\1\0\2\15\1\0\5\15\2\0\11\15\2\0\2\15\2\0"+
    "\3\15\11\0\1\15\5\0\7\15\2\0\7\15\3\0\5\15\u010b\0"+
    "\106\15\1\0\1\15\10\0\12\15\246\0\66\15\2\0\11\15\77\0"+
    "\101\15\3\0\1\15\13\0\12\15\46\0\53\16\15\17\10\0\12\17"+
    "\u01d6\0\112\15\25\0\1\15\u01c0\0\71\15\u0507\0\u036f\16\52\15\147\0"+
    "\143\16\14\15\u0b91\0\u042f\16\u33d1\0\u0239\16\7\0\37\15\1\0\12\15"+
    "\146\0\36\15\2\0\5\15\13\0\67\15\11\0\4\15\14\0\12\15"+
    "\11\0\25\15\5\0\23\15\u0370\0\105\16\13\0\1\16\56\17\20\0"+
    "\4\17\15\16\u4060\0\2\16\u0bfe\0\153\15\5\0\15\15\3\0\11\15"+
    "\7\0\12\15\3\0\2\15\u14c6\0\5\17\3\0\6\17\10\5\10\17"+
    "\2\0\7\17\36\0\4\17\224\0\3\17\u01bb\0\125\16\1\0\107\16"+
    "\1\0\2\16\2\0\1\16\2\0\2\16\2\0\4\16\1\0\14\16"+
    "\1\0\1\16\1\0\7\16\1\0\101\16\1\0\4\16\2\0\10\16"+
    "\1\0\7\16\1\0\34\16\1\0\4\16\1\0\5\16\1\0\1\16"+
    "\3\0\7\16\1\0\u0154\16\2\0\31\16\1\0\31\16\1\0\37\16"+
    "\1\0\31\16\1\0\37\16\1\0\31\16\1\0\37\16\1\0\31\16"+
    "\1\0\37\16\1\0\31\16\1\0\10\16\2\0\62\17\u1000\0\305\15"+
    "\13\0\7\15\u0529\0\4\16\1\0\33\16\1\0\2\16\1\0\1\16"+
    "\2\0\1\16\1\0\12\16\1\0\4\16\1\0\1\16\1\0\1\16"+
    "\6\0\1\16\4\0\1\16\1\0\1\16\1\0\1\16\1\0\3\16"+
    "\1\0\2\16\1\0\1\16\2\0\1\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\2\16\1\0\1\16\2\0\4\16"+
    "\1\0\7\16\1\0\4\16\1\0\4\16\1\0\1\16\1\0\12\16"+
    "\1\0\21\16\5\0\3\16\1\0\5\16\1\0\21\16\u0274\0\32\15"+
    "\6\0\32\15\6\0\32\15\u0e76\0\ua6d7\16\51\0\u1035\16\13\0\336\16"+
    "\u3fe2\0\u021e\16\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\5\36\0\140\5\200\0\360\17\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\2\4\1\1\1\5\20\3"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\1\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\4\0\1\2\11\3\1\26\1\27\1\30\10\3"+
    "\1\31\7\3\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\44\1\4\1\45\2\3"+
    "\1\46\3\3\1\47\3\3\1\0\2\3\1\50\1\3"+
    "\1\51\3\3\1\52\1\3\1\53\2\3\1\54\3\3"+
    "\1\55\1\3\1\56\1\3\1\57\3\3\1\0\3\3"+
    "\1\60\1\61\1\62\1\3\1\63\4\3\1\64\4\3"+
    "\1\0\1\65\1\66\2\3\1\67\1\70\3\3\1\71"+
    "\1\72\1\3\1\73\3\3\1\74\1\3\1\75\2\3"+
    "\1\76\1\3\1\77\1\3\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\150\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\150\0\u0548\0\u057c\0\u05b0\0\150"+
    "\0\u05e4\0\150\0\150\0\150\0\u0618\0\150\0\150\0\150"+
    "\0\u064c\0\150\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\320\0\320\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c"+
    "\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\320\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\150\0\150\0\150\0\150"+
    "\0\150\0\150\0\150\0\150\0\150\0\150\0\u0ccc\0\u06e8"+
    "\0\u0d00\0\150\0\u0d34\0\u0d68\0\320\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\320\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\320"+
    "\0\u0f70\0\320\0\u0fa4\0\u0fd8\0\u100c\0\320\0\u1040\0\320"+
    "\0\u1074\0\u10a8\0\320\0\u10dc\0\u1110\0\u1144\0\320\0\u1178"+
    "\0\320\0\u11ac\0\320\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0"+
    "\0\u12e4\0\u1318\0\320\0\320\0\320\0\u134c\0\320\0\u1380"+
    "\0\u13b4\0\u13e8\0\u141c\0\320\0\u1450\0\u1484\0\u14b8\0\u14ec"+
    "\0\u1520\0\320\0\320\0\u1554\0\u1588\0\320\0\320\0\u15bc"+
    "\0\u15f0\0\u1624\0\320\0\320\0\u1658\0\150\0\u168c\0\u16c0"+
    "\0\u16f4\0\320\0\u1728\0\320\0\u175c\0\u1790\0\320\0\u17c4"+
    "\0\320\0\u17f8\0\320\0\320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\10\1\6"+
    "\1\3\1\5\1\3\1\11\1\3\1\6\1\3\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\6\1\25\1\26\1\6\1\27\1\6"+
    "\1\30\1\5\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\3\1\51\2\3\57\51\1\52\1\53"+
    "\66\0\1\5\65\0\5\6\2\0\1\6\2\0\2\6"+
    "\1\0\21\6\1\0\2\6\17\0\1\54\2\0\3\54"+
    "\2\55\1\54\3\0\51\54\2\0\3\54\2\10\1\56"+
    "\3\0\50\54\6\0\3\57\4\0\3\57\1\0\21\57"+
    "\1\0\2\57\37\0\1\60\47\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\1\6\1\61\17\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\3\6"+
    "\1\62\5\6\1\63\1\64\6\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\17\6\1\65"+
    "\1\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\14\6\1\66\4\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\11\6\1\67"+
    "\7\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\1\6\1\70\17\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\13\6\1\71"+
    "\5\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\6\6\1\72\1\6\1\73\1\74\7\6"+
    "\1\0\2\6\23\0\5\6\2\0\1\6\2\0\2\6"+
    "\1\0\3\6\1\75\1\76\7\6\1\77\1\100\3\6"+
    "\1\0\2\6\23\0\5\6\2\0\1\6\2\0\2\6"+
    "\1\0\14\6\1\101\1\102\3\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\5\6\1\103"+
    "\11\6\1\104\1\6\1\0\2\6\23\0\5\6\2\0"+
    "\1\6\2\0\2\6\1\0\5\6\1\105\7\6\1\106"+
    "\3\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\5\6\1\107\7\6\1\110\3\6\1\0"+
    "\2\6\23\0\5\6\2\0\1\6\2\0\2\6\1\0"+
    "\17\6\1\111\1\6\1\0\2\6\23\0\5\6\2\0"+
    "\1\6\2\0\2\6\1\0\1\6\1\112\17\6\1\0"+
    "\2\6\23\0\5\6\2\0\1\6\2\0\2\6\1\0"+
    "\1\6\1\113\12\6\1\114\4\6\1\0\2\6\65\0"+
    "\1\115\63\0\1\116\63\0\1\117\63\0\1\120\70\0"+
    "\1\121\67\0\1\122\4\0\1\51\2\0\57\51\30\0"+
    "\1\123\3\0\1\124\1\0\1\125\25\0\1\126\7\0"+
    "\2\127\54\0\1\54\2\0\3\54\2\130\1\54\3\0"+
    "\50\54\6\0\2\131\70\0\1\132\47\0\1\60\1\4"+
    "\1\5\61\60\4\0\5\6\2\0\1\6\2\0\2\6"+
    "\1\0\2\6\1\133\16\6\1\0\2\6\23\0\5\6"+
    "\2\0\1\6\2\0\2\6\1\0\6\6\1\134\12\6"+
    "\1\0\2\6\23\0\5\6\2\0\1\6\2\0\2\6"+
    "\1\0\1\135\20\6\1\0\2\6\23\0\5\6\2\0"+
    "\1\6\2\0\2\6\1\0\7\6\1\136\11\6\1\0"+
    "\2\6\23\0\5\6\2\0\1\6\2\0\2\6\1\0"+
    "\4\6\1\137\14\6\1\0\2\6\23\0\5\6\2\0"+
    "\1\6\2\0\2\6\1\0\14\6\1\140\4\6\1\0"+
    "\2\6\23\0\5\6\2\0\1\6\2\0\2\6\1\0"+
    "\1\141\20\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\13\6\1\142\5\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\5\6"+
    "\1\143\13\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\13\6\1\144\5\6\1\145\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\14\6"+
    "\1\146\4\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\3\6\1\147\15\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\5\6"+
    "\1\150\13\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\11\6\1\151\7\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\13\6"+
    "\1\152\5\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\3\6\1\153\15\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\15\6"+
    "\1\154\3\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\1\6\1\155\17\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\13\6"+
    "\1\156\5\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\14\6\1\157\4\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\13\6"+
    "\1\160\5\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\1\6\1\161\5\6\1\162\11\6"+
    "\1\0\2\6\23\0\5\6\2\0\1\6\2\0\2\6"+
    "\1\0\13\6\1\163\5\6\1\0\2\6\23\0\5\6"+
    "\2\0\1\6\2\0\2\6\1\0\21\6\1\0\1\164"+
    "\1\6\23\0\5\6\2\0\1\6\2\0\2\6\1\0"+
    "\14\6\1\165\4\6\1\0\2\6\25\0\2\127\1\54"+
    "\61\0\2\131\1\56\57\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\3\6\1\166\15\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\1\6\1\167"+
    "\5\6\1\170\11\6\1\0\2\6\23\0\5\6\2\0"+
    "\1\6\2\0\2\6\1\0\13\6\1\171\5\6\1\0"+
    "\2\6\23\0\5\6\2\0\1\6\2\0\2\6\1\0"+
    "\5\6\1\172\13\6\1\0\2\6\23\0\5\6\2\0"+
    "\1\6\2\0\2\6\1\0\16\6\1\173\2\6\1\0"+
    "\2\6\23\0\5\6\2\0\1\6\2\0\2\6\1\0"+
    "\15\6\1\174\3\6\1\0\2\6\23\0\5\6\2\0"+
    "\1\6\2\0\2\6\1\0\7\6\1\175\11\6\1\0"+
    "\2\6\23\0\5\6\2\0\1\6\2\0\2\6\1\0"+
    "\1\6\1\176\17\6\1\0\2\6\54\0\1\177\32\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\4\6\1\200"+
    "\14\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\6\6\1\201\12\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\2\6\1\202"+
    "\16\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\3\6\1\203\15\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\1\6\1\204"+
    "\17\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\11\6\1\205\7\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\2\6\1\206"+
    "\16\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\11\6\1\207\7\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\3\6\1\210"+
    "\15\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\7\6\1\211\11\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\3\6\1\212"+
    "\15\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\213\14\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\10\6\1\214"+
    "\10\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\215\14\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\5\6\1\216"+
    "\13\6\1\0\2\6\23\0\5\6\2\0\1\6\2\0"+
    "\2\6\1\0\11\6\1\217\7\6\1\0\2\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\21\6\1\0"+
    "\1\220\1\6\55\0\1\221\31\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\13\6\1\222\5\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\1\6"+
    "\1\223\17\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\13\6\1\224\5\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\1\6"+
    "\1\225\17\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\1\6\1\226\17\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\11\6"+
    "\1\227\7\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\1\6\1\230\17\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\5\6"+
    "\1\231\13\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\2\6\1\232\16\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\11\6"+
    "\1\233\7\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\21\6\1\0\1\234\1\6\23\0"+
    "\5\6\2\0\1\6\2\0\2\6\1\0\1\6\1\235"+
    "\17\6\1\0\2\6\53\0\1\236\33\0\5\6\2\0"+
    "\1\6\2\0\2\6\1\0\7\6\1\237\11\6\1\0"+
    "\2\6\23\0\5\6\2\0\1\6\2\0\2\6\1\0"+
    "\1\240\20\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\241\14\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\1\6"+
    "\1\242\17\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\13\6\1\243\5\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\5\6"+
    "\1\244\13\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\14\6\1\245\4\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\15\6"+
    "\1\246\3\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\11\6\1\247\7\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\1\6"+
    "\1\250\17\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\11\6\1\251\7\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\5\6"+
    "\1\252\13\6\1\0\2\6\23\0\5\6\2\0\1\6"+
    "\2\0\2\6\1\0\5\6\1\253\13\6\1\0\2\6"+
    "\23\0\5\6\2\0\1\6\2\0\2\6\1\0\1\6"+
    "\1\254\17\6\1\0\2\6\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6188];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\26\1\1\11\3\1\1\11"+
    "\1\1\3\11\1\1\3\11\1\1\1\11\1\1\4\0"+
    "\35\1\12\11\3\1\1\11\12\1\1\0\31\1\1\0"+
    "\21\1\1\0\14\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <" + yytext() + ">");
            }
          case 66: break;
          case 2: 
            { /* ignore */
            }
          case 67: break;
          case 3: 
            { System.out.println("<ID, \"" + yytext() + "\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.ID, yytext());
            }
          case 68: break;
          case 4: 
            { System.out.println("<INT, \"" + yytext() + "\" " + (yyline + 1) + ":" + yycolumn + ">"); return symbol(sym.NUMEROENTERO, new Integer(Integer.parseInt(yytext())));
            }
          case 69: break;
          case 5: 
            { System.out.println("<OPRESTA, \"-\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERRESTA);
            }
          case 70: break;
          case 6: 
            { System.out.println("<DOS PUNTOS "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.DOSPUNTOS);
            }
          case 71: break;
          case 7: 
            { System.out.println("<OPREL, \"=\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERIGUAL);
            }
          case 72: break;
          case 8: 
            { System.out.println("<OPREL, \"<\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERMENOR);
            }
          case 73: break;
          case 9: 
            { System.out.println("<OPREL, \">\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERMAYOR);
            }
          case 74: break;
          case 10: 
            { System.out.println("<OPDIV, \"/\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERDIVISION);
            }
          case 75: break;
          case 11: 
            { System.out.println("<OPSUMA, \"+\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERSUMA);
            }
          case 76: break;
          case 12: 
            { System.out.println("<OPMULT, \"*\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERMULTIPLICACION);
            }
          case 77: break;
          case 13: 
            { System.out.println("<ABRIRPARENTESIS "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.PARIZQ);
            }
          case 78: break;
          case 14: 
            { System.out.println("<CERRARPARENTESIS "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.PARDER);
            }
          case 79: break;
          case 15: 
            { System.out.println("<PUNTOCOMA "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.PUNTOCOMA);
            }
          case 80: break;
          case 16: 
            { System.out.println("<COMA "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.COMA);
            }
          case 81: break;
          case 17: 
            { System.out.println("<AMPERSAND "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.AMPERSAND);
            }
          case 82: break;
          case 18: 
            { string.setLength(0); yybegin(STRING);
            }
          case 83: break;
          case 19: 
            { string.append( yytext() );
            }
          case 84: break;
          case 20: 
            { yybegin(YYINITIAL); System.out.println("<STRING, \"" + string.toString() + "\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.CADENA, string.toString());
            }
          case 85: break;
          case 21: 
            { string.append('\\');
            }
          case 86: break;
          case 22: 
            { System.out.println("<IS "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.IS);
            }
          case 87: break;
          case 23: 
            { System.out.println("<IF "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.IF);
            }
          case 88: break;
          case 24: 
            { System.out.println("<IN "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.IN);
            }
          case 89: break;
          case 25: 
            { System.out.println("<OPBOOL, \"or\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.NOT);
            }
          case 90: break;
          case 26: 
            { System.out.println("<ASIG, \":=\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERASIG);
            }
          case 91: break;
          case 27: 
            { System.out.println("<OPREL, \"<=\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERMENORIGUAL);
            }
          case 92: break;
          case 28: 
            { System.out.println("<OPREL, \">=\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERMAYORIGUAL);
            }
          case 93: break;
          case 29: 
            { System.out.println("<OPREL, \"/=\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERDISTINTO);
            }
          case 94: break;
          case 30: 
            { System.out.println("<OPEXP, \"**\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OPERPOTENCIA);
            }
          case 95: break;
          case 31: 
            { System.out.println("<RANGO "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.DOBLEPUNTO);
            }
          case 96: break;
          case 32: 
            { string.append('\r');
            }
          case 97: break;
          case 33: 
            { string.append('\n');
            }
          case 98: break;
          case 34: 
            { string.append('\t');
            }
          case 99: break;
          case 35: 
            { string.append('\"');
            }
          case 100: break;
          case 36: 
            { System.out.println("<FLOAT, \"" + yytext() + "\" " + (yyline + 1) + ":" + yycolumn + ">"); return symbol(sym.NUMEROFLOAT, new Double(Double.parseDouble(yytext())));
            }
          case 101: break;
          case 37: 
            { System.out.println("<CARACTER," + yytext() + (yyline + 1) + ":" + yycolumn + ">");return symbol(sym.CARACTER, yytext());
            }
          case 102: break;
          case 38: 
            { System.out.println("<END " + (yyline + 1) + ":" + yycolumn + ">"); return symbol(sym.END);
            }
          case 103: break;
          case 39: 
            { System.out.println("<OPBOOL, \"and\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.AND);
            }
          case 104: break;
          case 40: 
            { System.out.println("<FOR " + (yyline + 1) + ":" + yycolumn + ">"); return symbol(sym.FOR);
            }
          case 105: break;
          case 41: 
            { System.out.println("<OPBOOL, \"not\" "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OR);
            }
          case 106: break;
          case 42: 
            { System.out.println("<OUT "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.OUT);
            }
          case 107: break;
          case 43: 
            { System.out.println("<PUT "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.PUT);
            }
          case 108: break;
          case 44: 
            { System.out.println("<GET "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.GET);
            }
          case 109: break;
          case 45: 
            { System.out.println("<ELSE " + (yyline + 1) + ":" + yycolumn + ">"); return symbol(sym.ELSE);
            }
          case 110: break;
          case 46: 
            { System.out.println("<EXIT " + (yyline+1)+":"+yycolumn+">"); return symbol(sym.EXIT);
            }
          case 111: break;
          case 47: 
            { System.out.println("<LOOP "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.LOOP);
            }
          case 112: break;
          case 48: 
            { System.out.println("<NULL "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.NULL);
            }
          case 113: break;
          case 49: 
            { System.out.println("<TRUE "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.TRUE);
            }
          case 114: break;
          case 50: 
            { System.out.println("<THEN "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.THEN);
            }
          case 115: break;
          case 51: 
            { System.out.println("<WHEN "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.WHEN);
            }
          case 116: break;
          case 52: 
            { System.out.println("<ELSE " + (yyline + 1) + ":" + yycolumn + ">"); return symbol(sym.ELSIF);
            }
          case 117: break;
          case 53: 
            { System.out.println("<FLOAT "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.FLOAT);
            }
          case 118: break;
          case 54: 
            { System.out.println("<FALSE "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.FALSE);
            }
          case 119: break;
          case 55: 
            { System.out.println("<WHILE "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.WHILE);
            }
          case 120: break;
          case 56: 
            { System.out.println("<BEGIN "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.BEGIN);
            }
          case 121: break;
          case 57: 
            { System.out.println("<RETURN "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.RETURN);
            }
          case 122: break;
          case 58: 
            { System.out.println("<STRING "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.STRING);
            }
          case 123: break;
          case 59: 
            { System.out.println("<IN_OUT "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.INOUT);
            }
          case 124: break;
          case 60: 
            { System.out.println("<DECLARE " + (yyline+1) + ":" + yycolumn + ">"); return symbol(sym.DECLARE);
            }
          case 125: break;
          case 61: 
            { System.out.println("<INTEGER "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.INTEGER);
            }
          case 126: break;
          case 62: 
            { System.out.println("<BOOLEAN "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.BOOLEAN);
            }
          case 127: break;
          case 63: 
            { System.out.println("<FUNCTION "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.FUNCTION);
            }
          case 128: break;
          case 64: 
            { System.out.println("<CHARACTER "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.CHARACTER);
            }
          case 129: break;
          case 65: 
            { System.out.println("<PROCEDURE "+(yyline+1)+":"+yycolumn+">"); return symbol(sym.PROCEDURE);
            }
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
