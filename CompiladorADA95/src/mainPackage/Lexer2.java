/* The following code was generated by JFlex 1.6.0 */

package mainPackage;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>D:/Uni/Compiladores I/CompiladorADA95/CompiladorADA95/src/mainPackage/lexer.flex</tt>
 */
class Lexer2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\10\1\11\1\1\22\0\1\40\1\0\1\60"+
    "\3\0\1\57\1\12\1\52\1\53\1\51\1\50\1\56\1\14\1\55"+
    "\1\47\1\6\11\5\1\43\1\54\1\45\1\44\1\46\2\0\1\21"+
    "\1\42\1\17\1\15\1\16\1\27\1\41\1\36\1\25\2\4\1\20"+
    "\1\4\1\30\1\33\1\35\1\4\1\22\1\23\1\32\1\34\1\4"+
    "\1\37\1\31\2\4\1\0\1\61\2\0\1\7\1\0\1\21\1\42"+
    "\1\17\1\15\1\16\1\27\1\41\1\36\1\25\2\4\1\20\1\4"+
    "\1\30\1\33\1\35\1\4\1\22\1\23\1\32\1\34\1\4\1\37"+
    "\1\31\2\4\12\0\1\10\44\0\1\13\12\0\1\13\4\0\1\13"+
    "\5\0\27\13\1\0\37\13\1\0\70\13\2\26\115\13\1\24\u0142\13"+
    "\4\0\14\13\16\0\5\13\7\0\1\13\1\0\1\13\21\0\165\13"+
    "\1\0\2\13\2\0\4\13\1\0\1\13\6\0\1\13\1\0\3\13"+
    "\1\0\1\13\1\0\24\13\1\0\123\13\1\0\213\13\1\0\255\13"+
    "\1\0\46\13\2\0\1\13\7\0\47\13\11\0\55\13\1\0\1\13"+
    "\1\0\2\13\1\0\2\13\1\0\1\13\10\0\33\13\5\0\3\13"+
    "\35\0\13\13\5\0\112\13\4\0\146\13\1\0\10\13\2\0\12\13"+
    "\1\0\23\13\2\0\1\13\20\0\73\13\2\0\145\13\16\0\66\13"+
    "\4\0\1\13\5\0\56\13\22\0\34\13\104\0\23\13\61\0\200\13"+
    "\2\0\12\13\1\0\23\13\1\0\10\13\2\0\2\13\2\0\26\13"+
    "\1\0\7\13\1\0\1\13\3\0\4\13\2\0\11\13\2\0\2\13"+
    "\2\0\4\13\10\0\1\13\4\0\2\13\1\0\5\13\2\0\14\13"+
    "\17\0\3\13\1\0\6\13\4\0\2\13\2\0\26\13\1\0\7\13"+
    "\1\0\2\13\1\0\2\13\1\0\2\13\2\0\1\13\1\0\5\13"+
    "\4\0\2\13\2\0\3\13\3\0\1\13\7\0\4\13\1\0\1\13"+
    "\7\0\20\13\13\0\3\13\1\0\11\13\1\0\3\13\1\0\26\13"+
    "\1\0\7\13\1\0\2\13\1\0\5\13\2\0\12\13\1\0\3\13"+
    "\1\0\3\13\2\0\1\13\17\0\4\13\2\0\12\13\21\0\3\13"+
    "\1\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\5\13\2\0\11\13\2\0\2\13\2\0\3\13\10\0\2\13"+
    "\4\0\2\13\1\0\5\13\2\0\12\13\1\0\1\13\20\0\2\13"+
    "\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0\1\13"+
    "\1\0\2\13\3\0\2\13\3\0\3\13\3\0\14\13\4\0\5\13"+
    "\3\0\3\13\1\0\4\13\2\0\1\13\6\0\1\13\16\0\12\13"+
    "\20\0\4\13\1\0\10\13\1\0\3\13\1\0\27\13\1\0\20\13"+
    "\3\0\10\13\1\0\3\13\1\0\4\13\7\0\2\13\1\0\2\13"+
    "\6\0\4\13\2\0\12\13\21\0\3\13\1\0\10\13\1\0\3\13"+
    "\1\0\27\13\1\0\12\13\1\0\5\13\2\0\11\13\1\0\3\13"+
    "\1\0\4\13\7\0\2\13\7\0\1\13\1\0\4\13\2\0\12\13"+
    "\1\0\2\13\16\0\3\13\1\0\10\13\1\0\3\13\1\0\51\13"+
    "\2\0\10\13\1\0\3\13\1\0\5\13\10\0\1\13\10\0\4\13"+
    "\2\0\12\13\12\0\6\13\2\0\2\13\1\0\22\13\3\0\30\13"+
    "\1\0\11\13\1\0\1\13\2\0\7\13\3\0\1\13\4\0\6\13"+
    "\1\0\1\13\1\0\10\13\6\0\12\13\2\0\2\13\15\0\72\13"+
    "\5\0\17\13\1\0\12\13\47\0\2\13\1\0\1\13\2\0\2\13"+
    "\1\0\1\13\2\0\1\13\6\0\4\13\1\0\7\13\1\0\3\13"+
    "\1\0\1\13\1\0\1\13\2\0\2\13\1\0\15\13\1\0\3\13"+
    "\2\0\5\13\1\0\1\13\1\0\6\13\2\0\12\13\2\0\4\13"+
    "\40\0\1\13\27\0\2\13\6\0\12\13\13\0\1\13\1\0\1\13"+
    "\1\0\1\13\4\0\12\13\1\0\44\13\4\0\24\13\1\0\22\13"+
    "\1\0\44\13\11\0\1\13\71\0\112\13\6\0\116\13\2\0\46\13"+
    "\1\0\1\13\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13"+
    "\2\0\7\13\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13"+
    "\2\0\41\13\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13"+
    "\2\0\17\13\1\0\71\13\1\0\4\13\2\0\103\13\2\0\3\13"+
    "\40\0\20\13\20\0\125\13\14\0\u026c\13\2\0\21\13\1\0\32\13"+
    "\5\0\113\13\3\0\13\13\7\0\15\13\1\0\7\13\13\0\25\13"+
    "\13\0\24\13\14\0\15\13\1\0\3\13\1\0\2\13\14\0\124\13"+
    "\3\0\1\13\4\0\2\13\2\0\12\13\41\0\3\13\2\0\12\13"+
    "\6\0\130\13\10\0\53\13\5\0\106\13\12\0\37\13\1\0\14\13"+
    "\4\0\14\13\12\0\50\13\2\0\5\13\13\0\54\13\4\0\32\13"+
    "\6\0\12\13\46\0\34\13\4\0\77\13\1\0\35\13\2\0\13\13"+
    "\6\0\12\13\15\0\1\13\10\0\17\13\101\0\114\13\4\0\12\13"+
    "\21\0\11\13\14\0\164\13\14\0\70\13\10\0\12\13\3\0\61\13"+
    "\122\0\3\13\1\0\43\13\1\0\2\13\6\0\366\13\6\0\u011a\13"+
    "\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13\1\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13\1\0\7\13"+
    "\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0\6\13"+
    "\4\0\15\13\5\0\3\13\1\0\7\13\53\0\1\10\1\10\25\0"+
    "\2\13\23\0\1\13\34\0\1\13\15\0\1\13\20\0\15\13\63\0"+
    "\41\13\21\0\1\13\4\0\1\13\2\0\12\13\1\0\1\13\3\0"+
    "\5\13\6\0\1\13\1\0\1\13\1\0\1\13\1\0\4\13\1\0"+
    "\13\13\2\0\4\13\5\0\5\13\4\0\1\13\21\0\51\13\u032d\0"+
    "\64\13\u0716\0\57\13\1\0\57\13\1\0\205\13\6\0\11\13\14\0"+
    "\46\13\1\0\1\13\5\0\1\13\2\0\70\13\7\0\1\13\17\0"+
    "\30\13\11\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\40\13\57\0"+
    "\1\13\u01d5\0\3\13\31\0\17\13\1\0\5\13\2\0\5\13\4\0"+
    "\126\13\2\0\2\13\2\0\3\13\1\0\132\13\1\0\4\13\5\0"+
    "\51\13\3\0\136\13\21\0\33\13\65\0\20\13\u0200\0\u19b6\13\112\0"+
    "\u51cd\13\63\0\u048d\13\103\0\56\13\2\0\u010d\13\3\0\34\13\24\0"+
    "\63\13\1\0\12\13\1\0\37\13\1\0\123\13\45\0\11\13\2\0"+
    "\147\13\2\0\4\13\1\0\36\13\2\0\2\13\105\0\61\13\30\0"+
    "\64\13\14\0\105\13\13\0\12\13\6\0\30\13\3\0\1\13\4\0"+
    "\56\13\2\0\44\13\14\0\35\13\3\0\101\13\16\0\13\13\6\0"+
    "\37\13\1\0\67\13\11\0\16\13\2\0\12\13\6\0\27\13\3\0"+
    "\111\13\30\0\3\13\2\0\20\13\2\0\5\13\12\0\6\13\2\0"+
    "\6\13\2\0\6\13\11\0\7\13\1\0\7\13\1\0\53\13\1\0"+
    "\4\13\4\0\2\13\132\0\53\13\1\0\2\13\2\0\12\13\6\0"+
    "\u2ba4\13\14\0\27\13\4\0\61\13\u2104\0\u016e\13\2\0\152\13\46\0"+
    "\7\13\14\0\5\13\5\0\14\13\1\0\15\13\1\0\5\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0"+
    "\100\13\2\0\66\13\50\0\14\13\4\0\20\13\20\0\16\13\5\0"+
    "\2\13\30\0\3\13\40\0\5\13\1\0\207\13\23\0\12\13\7\0"+
    "\32\13\4\0\1\13\1\0\32\13\13\0\131\13\3\0\6\13\2\0"+
    "\6\13\2\0\6\13\2\0\3\13\43\0\14\13\1\0\32\13\1\0"+
    "\23\13\1\0\2\13\1\0\17\13\2\0\16\13\42\0\173\13\105\0"+
    "\65\13\210\0\1\13\202\0\35\13\3\0\61\13\17\0\1\13\37\0"+
    "\40\13\20\0\33\13\5\0\53\13\5\0\36\13\2\0\44\13\4\0"+
    "\10\13\1\0\5\13\52\0\236\13\2\0\12\13\126\0\50\13\10\0"+
    "\64\13\234\0\u0137\13\11\0\26\13\12\0\10\13\230\0\6\13\2\0"+
    "\1\13\1\0\54\13\1\0\2\13\3\0\1\13\2\0\27\13\12\0"+
    "\27\13\11\0\37\13\141\0\26\13\12\0\32\13\106\0\70\13\6\0"+
    "\2\13\100\0\4\13\1\0\2\13\5\0\10\13\1\0\3\13\1\0"+
    "\33\13\4\0\3\13\4\0\1\13\40\0\35\13\3\0\35\13\43\0"+
    "\10\13\1\0\36\13\31\0\66\13\12\0\26\13\12\0\23\13\15\0"+
    "\22\13\156\0\111\13\u03b7\0\107\13\37\0\12\13\17\0\74\13\25\0"+
    "\31\13\7\0\12\13\6\0\65\13\1\0\12\13\20\0\44\13\2\0"+
    "\1\13\11\0\105\13\13\0\13\13\45\0\22\13\1\0\45\13\170\0"+
    "\73\13\5\0\12\13\7\0\3\13\1\0\10\13\2\0\2\13\2\0"+
    "\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0\11\13\2\0"+
    "\2\13\2\0\3\13\11\0\1\13\5\0\7\13\2\0\7\13\3\0"+
    "\5\13\u010b\0\106\13\1\0\1\13\10\0\12\13\246\0\66\13\2\0"+
    "\11\13\77\0\101\13\3\0\1\13\13\0\12\13\46\0\70\13\10\0"+
    "\12\13\u01d6\0\112\13\25\0\1\13\u01c0\0\71\13\u0507\0\u0399\13\147\0"+
    "\157\13\u0b91\0\u042f\13\u33d1\0\u0239\13\7\0\37\13\1\0\12\13\146\0"+
    "\36\13\2\0\5\13\13\0\67\13\11\0\4\13\14\0\12\13\11\0"+
    "\25\13\5\0\23\13\u0370\0\105\13\13\0\57\13\20\0\21\13\u4060\0"+
    "\2\13\u0bfe\0\153\13\5\0\15\13\3\0\11\13\7\0\12\13\3\0"+
    "\2\13\u14c6\0\5\13\3\0\6\13\10\0\10\13\2\0\7\13\36\0"+
    "\4\13\224\0\3\13\u01bb\0\125\13\1\0\107\13\1\0\2\13\2\0"+
    "\1\13\2\0\2\13\2\0\4\13\1\0\14\13\1\0\1\13\1\0"+
    "\7\13\1\0\101\13\1\0\4\13\2\0\10\13\1\0\7\13\1\0"+
    "\34\13\1\0\4\13\1\0\5\13\1\0\1\13\3\0\7\13\1\0"+
    "\u0154\13\2\0\31\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0"+
    "\37\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13\1\0"+
    "\31\13\1\0\10\13\2\0\62\13\u1000\0\305\13\13\0\7\13\u0529\0"+
    "\4\13\1\0\33\13\1\0\2\13\1\0\1\13\2\0\1\13\1\0"+
    "\12\13\1\0\4\13\1\0\1\13\1\0\1\13\6\0\1\13\4\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\3\13\1\0\2\13\1\0"+
    "\1\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\2\13\1\0\1\13\2\0\4\13\1\0\7\13\1\0"+
    "\4\13\1\0\4\13\1\0\1\13\1\0\12\13\1\0\21\13\5\0"+
    "\3\13\1\0\5\13\1\0\21\13\u0274\0\32\13\6\0\32\13\6\0"+
    "\32\13\u0e76\0\ua6d7\13\51\0\u1035\13\13\0\336\13\u3fe2\0\u021e\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\13\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\2\4\1\1\1\5\7\3"+
    "\1\1\1\3\1\1\10\3\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\1\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\3\4\0\1\2"+
    "\12\3\1\0\2\26\1\27\1\30\1\27\1\30\10\3"+
    "\1\31\10\3\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\3\1\45\1\4"+
    "\1\45\1\46\2\3\1\0\1\47\1\3\1\0\1\3"+
    "\1\0\2\3\1\50\2\3\1\0\1\3\2\0\2\3"+
    "\1\51\1\3\1\52\4\3\1\53\1\3\1\54\2\3"+
    "\1\0\1\55\3\3\1\56\1\3\1\0\1\56\2\57"+
    "\2\60\1\3\1\61\2\3\1\0\1\3\2\0\2\3"+
    "\1\0\1\3\1\62\1\63\1\64\2\3\1\65\1\3"+
    "\1\0\1\3\1\0\2\3\2\66\3\3\1\0\1\3"+
    "\2\0\1\67\2\70\3\3\2\71\2\72\3\3\1\73"+
    "\2\74\1\3\1\75\1\0\1\3\1\0\2\76\2\3"+
    "\1\77\1\3\2\100\1\3\1\0\1\3\1\101\1\3"+
    "\2\102\1\3\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\144\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\144\0\u0640\0\144\0\144\0\144\0\u0672\0\144"+
    "\0\144\0\144\0\u06a4\0\144\0\u06d6\0\u0708\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\310\0\144"+
    "\0\310\0\u0a5a\0\144\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\310\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\144\0\144\0\144"+
    "\0\144\0\144\0\144\0\144\0\144\0\144\0\144\0\144"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u079e\0\144\0\u0e74\0\u0ea6\0\u0ed8"+
    "\0\310\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\310"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\310\0\u11c6\0\310\0\u11f8\0\u122a\0\u125c\0\u128e\0\310"+
    "\0\u12c0\0\310\0\u12f2\0\u1324\0\u1356\0\310\0\u1388\0\u13ba"+
    "\0\u13ec\0\310\0\u141e\0\u1450\0\144\0\310\0\144\0\310"+
    "\0\144\0\u1482\0\310\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\310\0\310\0\310"+
    "\0\u16a8\0\u16da\0\310\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\310\0\144\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\310\0\310\0\144\0\u1996\0\u19c8\0\u19fa"+
    "\0\310\0\144\0\310\0\144\0\u1a2c\0\u1a5e\0\u1a90\0\310"+
    "\0\310\0\144\0\u1ac2\0\144\0\u1af4\0\u1b26\0\u1b58\0\310"+
    "\0\144\0\u1b8a\0\u1bbc\0\310\0\u1bee\0\310\0\144\0\u1c20"+
    "\0\u1c52\0\u1c84\0\310\0\u1cb6\0\310\0\144\0\u1ce8\0\310"+
    "\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\6\1\3"+
    "\1\5\1\11\1\3\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\6\1\27\1\30\1\6\1\31\1\6\1\32\1\5"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\3\1\53\2\3\55\53\1\54\1\55\64\0\1\5"+
    "\63\0\1\6\2\56\1\6\5\0\7\6\1\0\1\6"+
    "\1\0\11\6\1\0\2\6\17\0\1\57\2\0\2\57"+
    "\2\7\1\60\2\0\51\57\2\0\2\57\2\61\1\57"+
    "\2\0\50\57\4\0\4\62\3\0\1\62\1\0\23\62"+
    "\1\0\2\62\33\0\1\63\51\0\1\6\2\56\1\6"+
    "\5\0\1\6\1\64\5\6\1\0\1\6\1\0\11\6"+
    "\1\0\2\6\23\0\1\6\2\56\1\6\5\0\3\6"+
    "\1\65\3\6\1\0\1\6\1\0\1\6\1\66\1\67"+
    "\6\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\4\6\1\70\2\6\1\0\1\6\1\0\7\6\1\71"+
    "\1\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\7\6\1\0\1\6\1\0\4\6\1\72\4\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\7\6\1\0"+
    "\1\6\1\0\1\6\1\73\7\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\1\6\1\74\5\6\1\0"+
    "\1\6\1\0\11\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\7\6\1\0\1\6\1\0\3\6\1\75"+
    "\5\6\1\0\2\6\51\0\1\76\33\0\1\6\2\56"+
    "\1\6\5\0\6\6\1\77\1\100\1\6\1\0\1\101"+
    "\1\102\7\6\1\0\2\6\42\0\2\100\2\0\1\103"+
    "\1\104\35\0\1\6\2\56\1\6\5\0\3\6\1\105"+
    "\1\106\2\6\1\0\1\6\1\0\4\6\1\107\1\110"+
    "\3\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\7\6\1\0\1\6\1\0\4\6\1\111\1\112\3\6"+
    "\1\0\2\6\23\0\1\6\2\56\1\6\5\0\5\6"+
    "\1\113\1\6\1\0\1\6\1\0\7\6\1\114\1\6"+
    "\1\0\2\6\23\0\1\6\2\56\1\6\5\0\5\6"+
    "\1\115\1\6\1\0\1\6\1\0\3\6\1\116\1\6"+
    "\1\117\3\6\1\0\2\6\23\0\1\6\2\56\1\6"+
    "\5\0\5\6\1\120\1\6\1\0\1\6\1\0\5\6"+
    "\1\121\3\6\1\0\2\6\23\0\1\6\2\56\1\6"+
    "\5\0\7\6\1\0\1\6\1\0\7\6\1\122\1\6"+
    "\1\0\2\6\23\0\1\6\2\56\1\6\5\0\1\6"+
    "\1\123\5\6\1\0\1\6\1\0\11\6\1\0\2\6"+
    "\23\0\1\6\2\56\1\6\5\0\1\6\1\124\5\6"+
    "\1\0\1\6\1\0\4\6\1\125\4\6\1\0\2\6"+
    "\63\0\1\126\63\0\1\127\57\0\1\130\61\0\1\131"+
    "\61\0\1\132\66\0\1\133\65\0\1\134\4\0\1\53"+
    "\2\0\55\53\24\0\1\135\5\0\1\136\1\0\1\137"+
    "\25\0\1\140\5\0\1\141\2\56\1\141\5\0\7\141"+
    "\1\0\1\141\1\0\11\141\1\0\2\141\24\0\2\142"+
    "\60\0\2\143\53\0\1\57\2\0\2\57\2\144\1\57"+
    "\2\0\50\57\12\0\1\145\47\0\1\63\1\4\1\5"+
    "\57\63\4\0\1\6\2\56\1\6\5\0\2\6\1\146"+
    "\4\6\1\0\1\6\1\0\11\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\6\6\1\147\1\150\1\6"+
    "\1\0\11\6\1\0\2\6\23\0\1\6\2\56\1\6"+
    "\5\0\1\151\6\6\1\0\1\6\1\0\11\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\7\6\1\0"+
    "\1\152\1\153\11\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\6\6\1\154\1\155\1\6\1\0\11\6"+
    "\1\0\2\6\23\0\1\6\2\56\1\6\5\0\4\6"+
    "\1\156\2\6\1\0\1\6\1\0\11\6\1\0\2\6"+
    "\23\0\1\6\2\56\1\6\5\0\7\6\1\0\1\6"+
    "\1\0\4\6\1\157\4\6\1\0\2\6\23\0\1\6"+
    "\2\56\1\6\5\0\1\160\6\6\1\0\1\6\1\0"+
    "\11\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\7\6\1\0\1\6\1\0\3\6\1\161\5\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\5\6\1\162"+
    "\1\6\1\0\1\6\1\0\11\6\1\0\2\6\41\0"+
    "\1\163\43\0\1\6\2\56\1\6\5\0\7\6\1\0"+
    "\1\6\1\0\3\6\1\164\5\6\1\165\2\6\51\0"+
    "\1\166\5\0\1\165\25\0\1\6\2\56\1\6\5\0"+
    "\7\6\1\0\1\6\1\0\4\6\1\167\4\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\3\6\1\170"+
    "\3\6\1\0\1\6\1\0\11\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\5\6\1\171\1\6\1\0"+
    "\1\6\1\0\11\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\7\6\1\0\1\6\1\0\1\6\1\172"+
    "\7\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\7\6\1\0\1\6\1\0\3\6\1\173\5\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\3\6\1\174"+
    "\3\6\1\0\1\6\1\0\11\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\7\6\1\0\1\6\1\0"+
    "\5\6\1\175\3\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\1\6\1\176\5\6\1\0\1\6\1\0"+
    "\11\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\7\6\1\0\1\6\1\0\7\6\1\177\1\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\7\6\1\0"+
    "\1\6\1\0\3\6\1\200\5\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\7\6\1\0\1\6\1\0"+
    "\4\6\1\201\4\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\7\6\1\0\1\6\1\0\3\6\1\202"+
    "\5\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\1\6\1\203\5\6\1\0\1\204\1\205\11\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\7\6\1\0"+
    "\1\6\1\0\3\6\1\206\5\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\7\6\1\0\1\6\1\0"+
    "\11\6\1\0\1\207\1\6\23\0\1\6\2\56\1\6"+
    "\5\0\7\6\1\0\1\6\1\0\4\6\1\210\4\6"+
    "\1\0\2\6\23\0\1\141\2\0\1\141\5\0\7\141"+
    "\1\0\1\141\1\0\11\141\1\0\2\141\24\0\2\142"+
    "\1\57\57\0\2\143\1\60\56\0\1\6\2\56\1\6"+
    "\5\0\3\6\1\211\3\6\1\0\1\6\1\0\11\6"+
    "\1\0\2\6\23\0\1\6\2\56\1\6\5\0\1\6"+
    "\1\212\5\6\1\0\1\213\1\214\11\6\1\0\2\6"+
    "\35\0\1\215\6\0\2\214\37\0\1\6\2\56\1\6"+
    "\5\0\7\6\1\0\1\6\1\0\3\6\1\216\5\6"+
    "\1\0\2\6\51\0\1\217\33\0\1\6\2\56\1\6"+
    "\5\0\1\6\1\220\5\6\1\0\1\6\1\0\11\6"+
    "\1\0\2\6\35\0\1\221\47\0\1\6\2\56\1\6"+
    "\5\0\5\6\1\222\1\6\1\0\1\6\1\0\11\6"+
    "\1\0\2\6\23\0\1\6\2\56\1\6\5\0\7\6"+
    "\1\0\1\6\1\0\6\6\1\223\2\6\1\0\2\6"+
    "\23\0\1\6\2\56\1\6\5\0\7\6\1\0\1\6"+
    "\1\0\5\6\1\224\3\6\1\0\2\6\23\0\1\6"+
    "\2\56\1\6\5\0\7\6\1\0\1\225\1\226\11\6"+
    "\1\0\2\6\44\0\2\226\37\0\1\6\2\56\1\6"+
    "\5\0\1\6\1\227\5\6\1\0\1\6\1\0\11\6"+
    "\1\0\2\6\52\0\1\230\44\0\1\231\47\0\1\6"+
    "\2\56\1\6\5\0\4\6\1\232\2\6\1\0\1\6"+
    "\1\0\11\6\1\0\2\6\23\0\1\6\2\56\1\6"+
    "\5\0\6\6\1\233\1\234\1\6\1\0\11\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\2\6\1\235"+
    "\4\6\1\0\1\6\1\0\11\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\3\6\1\236\3\6\1\0"+
    "\1\6\1\0\11\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\1\6\1\237\5\6\1\0\1\6\1\0"+
    "\11\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\7\6\1\0\1\6\1\0\1\6\1\240\7\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\1\6\1\241"+
    "\5\6\1\0\1\6\1\0\11\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\2\6\1\242\4\6\1\0"+
    "\1\6\1\0\11\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\7\6\1\0\1\6\1\0\1\6\1\243"+
    "\7\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\3\6\1\244\3\6\1\0\1\6\1\0\11\6\1\0"+
    "\2\6\37\0\1\245\45\0\1\6\2\56\1\6\5\0"+
    "\7\6\1\0\1\246\1\247\11\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\3\6\1\250\3\6\1\0"+
    "\1\6\1\0\11\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\4\6\1\251\2\6\1\0\1\6\1\0"+
    "\11\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\7\6\1\0\1\6\1\0\1\252\10\6\1\0\2\6"+
    "\46\0\1\253\36\0\1\6\2\56\1\6\5\0\4\6"+
    "\1\254\2\6\1\0\1\6\1\0\11\6\1\0\2\6"+
    "\23\0\1\6\2\56\1\6\5\0\5\6\1\255\1\6"+
    "\1\0\1\6\1\0\11\6\1\0\2\6\23\0\1\6"+
    "\2\56\1\6\5\0\7\6\1\0\1\6\1\0\1\6"+
    "\1\256\7\6\1\0\2\6\47\0\1\257\35\0\1\6"+
    "\2\56\1\6\5\0\7\6\1\0\1\6\1\0\11\6"+
    "\1\0\1\260\1\6\53\0\1\261\66\0\1\262\24\0"+
    "\1\6\2\56\1\6\5\0\7\6\1\0\1\6\1\0"+
    "\3\6\1\263\5\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\1\6\1\264\5\6\1\0\1\6\1\0"+
    "\11\6\1\0\2\6\35\0\1\265\47\0\1\6\2\56"+
    "\1\6\5\0\7\6\1\0\1\6\1\0\3\6\1\266"+
    "\5\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\5\6\1\267\1\6\1\0\1\6\1\0\11\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\1\6\1\270"+
    "\5\6\1\0\1\6\1\0\11\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\1\6\1\271\5\6\1\0"+
    "\1\6\1\0\11\6\1\0\2\6\35\0\1\272\47\0"+
    "\1\6\2\56\1\6\5\0\7\6\1\0\1\6\1\0"+
    "\1\6\1\273\7\6\1\0\2\6\47\0\1\274\35\0"+
    "\1\6\2\56\1\6\5\0\1\6\1\275\5\6\1\0"+
    "\1\6\1\0\11\6\1\0\2\6\23\0\1\6\2\56"+
    "\1\6\5\0\5\6\1\276\1\6\1\0\1\6\1\0"+
    "\11\6\1\0\2\6\23\0\1\6\2\56\1\6\5\0"+
    "\2\6\1\277\4\6\1\0\1\6\1\0\11\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\7\6\1\0"+
    "\1\6\1\0\1\6\1\300\7\6\1\0\2\6\23\0"+
    "\1\6\2\56\1\6\5\0\7\6\1\0\1\6\1\0"+
    "\11\6\1\0\1\301\1\6\60\0\1\302\24\0\1\6"+
    "\2\56\1\6\5\0\1\6\1\303\5\6\1\0\1\6"+
    "\1\0\11\6\1\0\2\6\51\0\1\304\45\0\1\305"+
    "\47\0\1\6\2\56\1\6\5\0\7\6\1\0\1\306"+
    "\1\307\11\6\1\0\2\6\23\0\1\6\2\56\1\6"+
    "\5\0\6\6\1\310\1\311\1\6\1\0\11\6\1\0"+
    "\2\6\23\0\1\6\2\56\1\6\5\0\1\312\6\6"+
    "\1\0\1\6\1\0\11\6\1\0\2\6\23\0\1\6"+
    "\2\56\1\6\5\0\4\6\1\313\2\6\1\0\1\6"+
    "\1\0\11\6\1\0\2\6\23\0\1\6\2\56\1\6"+
    "\5\0\1\6\1\314\5\6\1\0\1\6\1\0\11\6"+
    "\1\0\2\6\23\0\1\6\2\56\1\6\5\0\7\6"+
    "\1\0\1\6\1\0\3\6\1\315\5\6\1\0\2\6"+
    "\23\0\1\6\2\56\1\6\5\0\5\6\1\316\1\6"+
    "\1\0\1\6\1\0\11\6\1\0\2\6\41\0\1\317"+
    "\43\0\1\6\2\56\1\6\5\0\7\6\1\0\1\6"+
    "\1\0\4\6\1\320\4\6\1\0\2\6\52\0\1\321"+
    "\32\0\1\6\2\56\1\6\5\0\7\6\1\0\1\6"+
    "\1\0\5\6\1\322\3\6\1\0\2\6\23\0\1\6"+
    "\2\56\1\6\5\0\7\6\1\0\1\6\1\0\1\6"+
    "\1\323\7\6\1\0\2\6\23\0\1\6\2\56\1\6"+
    "\5\0\1\6\1\324\5\6\1\0\1\6\1\0\11\6"+
    "\1\0\2\6\23\0\1\6\2\56\1\6\5\0\7\6"+
    "\1\0\1\6\1\0\1\6\1\325\7\6\1\0\2\6"+
    "\47\0\1\326\35\0\1\6\2\56\1\6\5\0\5\6"+
    "\1\327\1\6\1\0\1\6\1\0\11\6\1\0\2\6"+
    "\23\0\1\6\2\56\1\6\5\0\5\6\1\330\1\6"+
    "\1\0\1\6\1\0\11\6\1\0\2\6\23\0\1\6"+
    "\2\56\1\6\5\0\1\6\1\331\5\6\1\0\1\6"+
    "\1\0\11\6\1\0\2\6\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\34\1\1\11\1\1\3\11"+
    "\1\1\3\11\1\1\1\11\2\1\4\0\13\1\1\0"+
    "\1\1\1\11\2\1\1\11\22\1\13\11\4\1\1\11"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\5\1\1\0"+
    "\1\1\2\0\16\1\1\0\6\1\1\0\1\11\1\1"+
    "\1\11\1\1\1\11\4\1\1\0\1\1\2\0\2\1"+
    "\1\0\10\1\1\0\1\1\1\0\3\1\1\11\3\1"+
    "\1\0\1\1\2\0\2\1\1\11\4\1\1\11\1\1"+
    "\1\11\5\1\1\11\1\1\1\11\1\0\1\1\1\0"+
    "\1\1\1\11\5\1\1\11\1\1\1\0\4\1\1\11"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer2(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2710) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println((yyline+1)+":"+yycolumn+"\tNo se encuentra token: " + yytext());
          }
        case 69: break;
        case 2: 
          { /* ignore */
          }
        case 70: break;
        case 3: 
          { return symbol(sym.ID, yytext());
          }
        case 71: break;
        case 4: 
          { return symbol(sym.NUMEROENTERO, new Integer(Integer.parseInt(yytext())));
          }
        case 72: break;
        case 5: 
          { return symbol(sym.OPERRESTA);
          }
        case 73: break;
        case 6: 
          { return symbol(sym.DOSPUNTOS);
          }
        case 74: break;
        case 7: 
          { return symbol(sym.OPERIGUAL);
          }
        case 75: break;
        case 8: 
          { return symbol(sym.OPERMENOR);
          }
        case 76: break;
        case 9: 
          { return symbol(sym.OPERMAYOR);
          }
        case 77: break;
        case 10: 
          { return symbol(sym.OPERDIVISION);
          }
        case 78: break;
        case 11: 
          { return symbol(sym.OPERSUMA);
          }
        case 79: break;
        case 12: 
          { return symbol(sym.OPERMULTIPLICACION);
          }
        case 80: break;
        case 13: 
          { return symbol(sym.PARIZQ);
          }
        case 81: break;
        case 14: 
          { return symbol(sym.PARDER);
          }
        case 82: break;
        case 15: 
          { return symbol(sym.PUNTOCOMA);
          }
        case 83: break;
        case 16: 
          { return symbol(sym.COMA);
          }
        case 84: break;
        case 17: 
          { return symbol(sym.AMPERSAND);
          }
        case 85: break;
        case 18: 
          { string.setLength(0); yybegin(STRING);
          }
        case 86: break;
        case 19: 
          { string.append( yytext() );
          }
        case 87: break;
        case 20: 
          { yybegin(YYINITIAL); return symbol(sym.CADENA, string.toString());
          }
        case 88: break;
        case 21: 
          { string.append('\\');
          }
        case 89: break;
        case 22: 
          { return symbol(sym.IS);
          }
        case 90: break;
        case 23: 
          { return symbol(sym.IF);
          }
        case 91: break;
        case 24: 
          { return symbol(sym.IN);
          }
        case 92: break;
        case 25: 
          { return symbol(sym.OR);
          }
        case 93: break;
        case 26: 
          { return symbol(sym.OPERASIG);
          }
        case 94: break;
        case 27: 
          { return symbol(sym.OPERPUNTERO);
          }
        case 95: break;
        case 28: 
          { return symbol(sym.OPERMENORIGUAL);
          }
        case 96: break;
        case 29: 
          { return symbol(sym.OPERMAYORIGUAL);
          }
        case 97: break;
        case 30: 
          { return symbol(sym.OPERDISTINTO);
          }
        case 98: break;
        case 31: 
          { return symbol(sym.OPERPOTENCIA);
          }
        case 99: break;
        case 32: 
          { return symbol(sym.DOBLEPUNTO);
          }
        case 100: break;
        case 33: 
          { string.append('\r');
          }
        case 101: break;
        case 34: 
          { string.append('\n');
          }
        case 102: break;
        case 35: 
          { string.append('\t');
          }
        case 103: break;
        case 36: 
          { string.append('\"');
          }
        case 104: break;
        case 37: 
          { return symbol(sym.NUMEROFLOAT, new Double(Double.parseDouble(yytext())));
          }
        case 105: break;
        case 38: 
          { return symbol(sym.CARACTER, yytext());
          }
        case 106: break;
        case 39: 
          { return symbol(sym.END);
          }
        case 107: break;
        case 40: 
          { return symbol(sym.AND);
          }
        case 108: break;
        case 41: 
          { return symbol(sym.FOR);
          }
        case 109: break;
        case 42: 
          { return symbol(sym.NOT);
          }
        case 110: break;
        case 43: 
          { return symbol(sym.OUT);
          }
        case 111: break;
        case 44: 
          { return symbol(sym.PUT);
          }
        case 112: break;
        case 45: 
          { return symbol(sym.GET);
          }
        case 113: break;
        case 46: 
          { return symbol(sym.ELSE);
          }
        case 114: break;
        case 47: 
          { return symbol(sym.EXIT);
          }
        case 115: break;
        case 48: 
          { return symbol(sym.CASE);
          }
        case 116: break;
        case 49: 
          { return symbol(sym.LOOP);
          }
        case 117: break;
        case 50: 
          { return symbol(sym.NULL);
          }
        case 118: break;
        case 51: 
          { return symbol(sym.TRUE);
          }
        case 119: break;
        case 52: 
          { return symbol(sym.THEN);
          }
        case 120: break;
        case 53: 
          { return symbol(sym.WHEN);
          }
        case 121: break;
        case 54: 
          { return symbol(sym.ELSIF);
          }
        case 122: break;
        case 55: 
          { return symbol(sym.FLOAT);
          }
        case 123: break;
        case 56: 
          { return symbol(sym.FALSE);
          }
        case 124: break;
        case 57: 
          { return symbol(sym.WHILE);
          }
        case 125: break;
        case 58: 
          { return symbol(sym.BEGIN);
          }
        case 126: break;
        case 59: 
          { return symbol(sym.RETURN);
          }
        case 127: break;
        case 60: 
          { return symbol(sym.STRING);
          }
        case 128: break;
        case 61: 
          { return symbol(sym.INOUT);
          }
        case 129: break;
        case 62: 
          { return symbol(sym.OTHERS);
          }
        case 130: break;
        case 63: 
          { return symbol(sym.DECLARE);
          }
        case 131: break;
        case 64: 
          { return symbol(sym.INTEGER);
          }
        case 132: break;
        case 65: 
          { return symbol(sym.BOOLEAN);
          }
        case 133: break;
        case 66: 
          { return symbol(sym.FUNCTION);
          }
        case 134: break;
        case 67: 
          { return symbol(sym.CHARACTER);
          }
        case 135: break;
        case 68: 
          { return symbol(sym.PROCEDURE);
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
