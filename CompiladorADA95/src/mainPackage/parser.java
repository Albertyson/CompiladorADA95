
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package mainPackage;

import java_cup.runtime.*;
import abstractSyntaxTree.*;
import java.io.File;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0156\000\002\002\013\000\002\002\004\000\002\046" +
    "\002\000\002\002\014\000\002\047\002\000\002\002\014" +
    "\000\002\050\002\000\002\002\014\000\002\051\002\000" +
    "\002\002\014\000\002\052\002\000\002\002\014\000\002" +
    "\053\002\000\002\002\014\000\002\054\002\000\002\002" +
    "\014\000\002\002\013\000\002\002\014\000\002\002\012" +
    "\000\002\055\002\000\002\002\013\000\002\056\002\000" +
    "\002\002\013\000\002\002\012\000\002\002\013\000\002" +
    "\002\012\000\002\057\002\000\002\002\013\000\002\060" +
    "\002\000\002\002\013\000\002\061\002\000\002\002\013" +
    "\000\002\002\012\000\002\002\011\000\002\062\002\000" +
    "\002\002\012\000\002\063\002\000\002\002\012\000\002" +
    "\064\002\000\002\002\012\000\002\002\011\000\002\002" +
    "\003\000\002\037\005\000\002\037\004\000\002\037\004" +
    "\000\002\037\003\000\002\037\003\000\002\037\004\000" +
    "\002\037\004\000\002\040\020\000\002\065\002\000\002" +
    "\040\021\000\002\066\002\000\002\040\021\000\002\067" +
    "\002\000\002\040\021\000\002\070\002\000\002\040\021" +
    "\000\002\071\002\000\002\040\021\000\002\072\002\000" +
    "\002\040\021\000\002\073\002\000\002\040\021\000\002" +
    "\074\002\000\002\040\021\000\002\075\002\000\002\040" +
    "\021\000\002\040\020\000\002\040\017\000\002\076\002" +
    "\000\002\040\020\000\002\077\002\000\002\040\020\000" +
    "\002\040\017\000\002\040\017\000\002\100\002\000\002" +
    "\040\020\000\002\101\002\000\002\040\020\000\002\102" +
    "\002\000\002\040\020\000\002\103\002\000\002\040\020" +
    "\000\002\104\002\000\002\040\020\000\002\105\002\000" +
    "\002\040\020\000\002\040\017\000\002\040\016\000\002" +
    "\106\002\000\002\040\017\000\002\107\002\000\002\040" +
    "\017\000\002\110\002\000\002\040\017\000\002\040\016" +
    "\000\002\041\016\000\002\111\002\000\002\041\017\000" +
    "\002\112\002\000\002\041\017\000\002\113\002\000\002" +
    "\041\017\000\002\114\002\000\002\041\017\000\002\115" +
    "\002\000\002\041\017\000\002\116\002\000\002\041\017" +
    "\000\002\117\002\000\002\041\017\000\002\120\002\000" +
    "\002\041\017\000\002\041\016\000\002\041\015\000\002" +
    "\121\002\000\002\041\016\000\002\122\002\000\002\041" +
    "\016\000\002\123\002\000\002\041\016\000\002\041\015" +
    "\000\002\041\015\000\002\124\002\000\002\041\016\000" +
    "\002\125\002\000\002\041\016\000\002\126\002\000\002" +
    "\041\016\000\002\127\002\000\002\041\016\000\002\130" +
    "\002\000\002\041\016\000\002\041\015\000\002\041\014" +
    "\000\002\131\002\000\002\041\015\000\002\132\002\000" +
    "\002\041\015\000\002\133\002\000\002\041\015\000\002" +
    "\041\014\000\002\042\003\000\002\042\005\000\002\042" +
    "\002\000\002\043\010\000\002\134\002\000\002\043\011" +
    "\000\002\135\002\000\002\043\011\000\002\043\010\000" +
    "\002\043\006\000\002\043\006\000\002\043\003\000\002" +
    "\043\005\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\005\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\004\000\002\010\003" +
    "\000\002\010\005\000\002\011\006\000\002\011\005\000" +
    "\002\012\004\000\002\012\003\000\002\013\003\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\005\000\002" +
    "\015\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\006\000\002\136\002" +
    "\000\002\017\007\000\002\017\006\000\002\020\005\000" +
    "\002\020\005\000\002\021\007\000\002\021\007\000\002" +
    "\137\002\000\002\021\010\000\002\140\002\000\002\021" +
    "\010\000\002\021\007\000\002\022\007\000\002\022\007" +
    "\000\002\141\002\000\002\022\010\000\002\142\002\000" +
    "\002\022\010\000\002\022\007\000\002\023\004\000\002" +
    "\023\003\000\002\024\006\000\002\143\002\000\002\024" +
    "\007\000\002\024\006\000\002\024\006\000\002\025\011" +
    "\000\002\025\011\000\002\144\002\000\002\025\012\000" +
    "\002\145\002\000\002\025\012\000\002\146\002\000\002" +
    "\025\012\000\002\025\011\000\002\025\013\000\002\147" +
    "\002\000\002\025\014\000\002\150\002\000\002\025\014" +
    "\000\002\151\002\000\002\025\014\000\002\025\013\000" +
    "\002\025\012\000\002\152\002\000\002\025\013\000\002" +
    "\153\002\000\002\025\013\000\002\025\012\000\002\025" +
    "\014\000\002\154\002\000\002\025\015\000\002\155\002" +
    "\000\002\025\015\000\002\156\002\000\002\025\015\000" +
    "\002\025\014\000\002\026\011\000\002\026\011\000\002" +
    "\026\011\000\002\157\002\000\002\026\012\000\002\160" +
    "\002\000\002\026\012\000\002\026\011\000\002\026\010" +
    "\000\002\026\010\000\002\161\002\000\002\026\011\000" +
    "\002\162\002\000\002\026\011\000\002\026\010\000\002" +
    "\027\013\000\002\027\013\000\002\027\013\000\002\027" +
    "\013\000\002\163\002\000\002\027\014\000\002\164\002" +
    "\000\002\027\014\000\002\027\013\000\002\027\012\000" +
    "\002\027\012\000\002\027\012\000\002\165\002\000\002" +
    "\027\013\000\002\166\002\000\002\027\013\000\002\027" +
    "\012\000\002\030\006\000\002\030\006\000\002\030\006" +
    "\000\002\031\007\000\002\167\002\000\002\031\010\000" +
    "\002\170\002\000\002\031\010\000\002\171\002\000\002" +
    "\031\014\000\002\172\002\000\002\031\007\000\002\173" +
    "\002\000\002\031\007\000\002\031\006\000\002\032\011" +
    "\000\002\032\011\000\002\174\002\000\002\032\012\000" +
    "\002\175\002\000\002\032\012\000\002\032\011\000\002" +
    "\034\003\000\002\034\004\000\002\033\006\000\002\033" +
    "\006\000\002\033\005\000\002\033\005\000\002\033\006" +
    "\000\002\033\006\000\002\033\006\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\035\003\000\002" +
    "\035\005\000\002\036\003\000\002\036\003\000\002\045" +
    "\005\000\002\045\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0318\000\006\003\006\023\005\001\002\000\004\002" +
    "\u031a\001\002\000\006\003\010\077\007\001\002\000\004" +
    "\002\uffd8\001\002\000\006\003\u02c4\035\u02c5\001\002\000" +
    "\004\035\uffff\001\002\000\004\035\012\001\002\000\010" +
    "\020\022\023\014\077\013\001\002\000\006\062\u02c1\063" +
    "\uff34\001\002\000\006\003\u0242\077\u0241\001\002\000\004" +
    "\063\u023f\001\002\000\014\003\uffd3\020\022\023\014\036" +
    "\uffd3\077\013\001\002\000\004\036\u0239\001\002\000\014" +
    "\003\uffd4\020\022\023\014\036\uffd4\077\013\001\002\000" +
    "\006\003\u0235\060\u0236\001\002\000\006\003\024\077\023" +
    "\001\002\000\006\003\u01ad\056\u01ae\001\002\000\004\056" +
    "\uffcf\001\002\000\004\056\026\001\002\000\010\057\uff70" +
    "\060\uff70\077\013\001\002\000\004\063\u019a\001\002\000" +
    "\006\057\122\060\123\001\002\000\012\003\uff67\037\033" +
    "\057\uff67\060\uff67\001\002\000\010\003\uff72\057\uff72\060" +
    "\uff72\001\002\000\024\047\037\055\047\056\043\077\045" +
    "\100\034\102\051\103\035\104\036\105\044\001\002\000" +
    "\062\003\uff57\025\uff57\031\uff57\035\uff57\040\uff57\041\uff57" +
    "\042\uff57\043\uff57\044\uff57\045\uff57\046\uff57\047\uff57\050" +
    "\uff57\051\uff57\052\uff57\053\uff57\054\uff57\057\uff57\060\uff57" +
    "\061\uff57\062\uff57\065\uff57\072\uff57\073\uff57\001\002\000" +
    "\062\003\uff5a\025\uff5a\031\uff5a\035\uff5a\040\uff5a\041\uff5a" +
    "\042\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050" +
    "\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\057\uff5a\060\uff5a" +
    "\061\uff5a\062\uff5a\065\uff5a\072\uff5a\073\uff5a\001\002\000" +
    "\062\003\uff59\025\uff59\031\uff59\035\uff59\040\uff59\041\uff59" +
    "\042\uff59\043\uff59\044\uff59\045\uff59\046\uff59\047\uff59\050" +
    "\uff59\051\uff59\052\uff59\053\uff59\054\uff59\057\uff59\060\uff59" +
    "\061\uff59\062\uff59\065\uff59\072\uff59\073\uff59\001\002\000" +
    "\024\047\037\055\047\056\043\077\045\100\034\102\051" +
    "\103\035\104\036\105\044\001\002\000\062\003\uff5d\025" +
    "\uff5d\031\uff5d\035\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d" +
    "\044\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052" +
    "\uff5d\053\uff5d\054\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d" +
    "\065\uff5d\072\uff5d\073\uff5d\001\002\000\062\003\uff5c\025" +
    "\uff5c\031\uff5c\035\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c" +
    "\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052" +
    "\uff5c\053\uff5c\054\uff5c\057\uff5c\060\uff5c\061\uff5c\062\uff5c" +
    "\065\uff5c\072\uff5c\073\uff5c\001\002\000\062\003\uff60\025" +
    "\uff60\031\uff60\035\uff60\040\uff60\041\uff60\042\uff60\043\uff60" +
    "\044\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051\uff60\052" +
    "\uff60\053\uff60\054\uff60\057\uff60\060\uff60\061\uff60\062\uff60" +
    "\065\uff60\072\uff60\073\uff60\001\002\000\024\047\037\055" +
    "\047\056\043\077\045\100\034\102\051\103\035\104\036" +
    "\105\044\001\002\000\062\003\uff58\025\uff58\031\uff58\035" +
    "\uff58\040\uff58\041\uff58\042\uff58\043\uff58\044\uff58\045\uff58" +
    "\046\uff58\047\uff58\050\uff58\051\uff58\052\uff58\053\uff58\054" +
    "\uff58\057\uff58\060\uff58\061\uff58\062\uff58\065\uff58\072\uff58" +
    "\073\uff58\001\002\000\064\003\uff61\025\uff61\031\uff61\035" +
    "\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61" +
    "\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61\053\uff61\054" +
    "\uff61\056\110\057\uff61\060\uff61\061\uff61\062\uff61\065\uff61" +
    "\072\uff61\073\uff61\001\002\000\044\003\uff66\040\067\041" +
    "\056\042\060\043\064\044\065\045\055\046\066\047\063" +
    "\050\061\051\070\052\057\053\054\054\071\057\uff66\060" +
    "\uff66\073\062\001\002\000\024\047\037\055\047\056\043" +
    "\077\045\100\034\102\051\103\035\104\036\105\044\001" +
    "\002\000\062\003\uff5e\025\uff5e\031\uff5e\035\uff5e\040\uff5e" +
    "\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047" +
    "\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\057\uff5e" +
    "\060\uff5e\061\uff5e\062\uff5e\065\uff5e\072\uff5e\073\uff5e\001" +
    "\002\000\062\003\uff5b\025\uff5b\031\uff5b\035\uff5b\040\uff5b" +
    "\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b\046\uff5b\047" +
    "\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054\uff5b\057\uff5b" +
    "\060\uff5b\061\uff5b\062\uff5b\065\uff5b\072\uff5b\073\uff5b\001" +
    "\002\000\062\003\uff62\025\uff62\031\uff62\035\uff62\040\uff62" +
    "\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047" +
    "\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\057\uff62" +
    "\060\uff62\061\uff62\062\uff62\065\uff62\072\uff62\073\uff62\001" +
    "\002\000\062\003\uff47\025\uff47\031\uff47\035\uff47\040\uff47" +
    "\041\uff47\042\uff47\043\uff47\044\uff47\045\uff47\046\uff47\047" +
    "\uff47\050\uff47\051\uff47\052\057\053\uff47\054\uff47\057\uff47" +
    "\060\uff47\061\uff47\062\uff47\065\uff47\072\uff47\073\uff47\001" +
    "\002\000\024\047\037\055\047\056\043\077\045\100\034" +
    "\102\051\103\035\104\036\105\044\001\002\000\024\047" +
    "\037\055\047\056\043\077\045\100\034\102\051\103\035" +
    "\104\036\105\044\001\002\000\024\047\037\055\047\056" +
    "\043\077\045\100\034\102\051\103\035\104\036\105\044" +
    "\001\002\000\024\047\037\055\047\056\043\077\045\100" +
    "\034\102\051\103\035\104\036\105\044\001\002\000\024" +
    "\047\037\055\047\056\043\077\045\100\034\102\051\103" +
    "\035\104\036\105\044\001\002\000\024\047\037\055\047" +
    "\056\043\077\045\100\034\102\051\103\035\104\036\105" +
    "\044\001\002\000\024\047\037\055\047\056\043\077\045" +
    "\100\034\102\051\103\035\104\036\105\044\001\002\000" +
    "\024\047\037\055\047\056\043\077\045\100\034\102\051" +
    "\103\035\104\036\105\044\001\002\000\024\047\037\055" +
    "\047\056\043\077\045\100\034\102\051\103\035\104\036" +
    "\105\044\001\002\000\024\047\037\055\047\056\043\077" +
    "\045\100\034\102\051\103\035\104\036\105\044\001\002" +
    "\000\024\047\037\055\047\056\043\077\045\100\034\102" +
    "\051\103\035\104\036\105\044\001\002\000\024\047\037" +
    "\055\047\056\043\077\045\100\034\102\051\103\035\104" +
    "\036\105\044\001\002\000\024\047\037\055\047\056\043" +
    "\077\045\100\034\102\051\103\035\104\036\105\044\001" +
    "\002\000\024\047\037\055\047\056\043\077\045\100\034" +
    "\102\051\103\035\104\036\105\044\001\002\000\062\003" +
    "\uff48\025\uff48\031\uff48\035\uff48\040\067\041\056\042\060" +
    "\043\064\044\065\045\055\046\066\047\063\050\061\051" +
    "\070\052\057\053\054\054\uff48\057\uff48\060\uff48\061\uff48" +
    "\062\uff48\065\uff48\072\uff48\073\062\001\002\000\062\003" +
    "\uff54\025\uff54\031\uff54\035\uff54\040\uff54\041\uff54\042\uff54" +
    "\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54\050\uff54\051" +
    "\uff54\052\057\053\uff54\054\uff54\057\uff54\060\uff54\061\uff54" +
    "\062\uff54\065\uff54\072\uff54\073\062\001\002\000\062\003" +
    "\uff4c\025\uff4c\031\uff4c\035\uff4c\040\uff4c\041\uff4c\042\uff4c" +
    "\043\uff4c\044\uff4c\045\uff4c\046\066\047\063\050\061\051" +
    "\070\052\057\053\uff4c\054\uff4c\057\uff4c\060\uff4c\061\uff4c" +
    "\062\uff4c\065\uff4c\072\uff4c\073\062\001\002\000\062\003" +
    "\uff56\025\uff56\031\uff56\035\uff56\040\uff56\041\uff56\042\uff56" +
    "\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050\061\051" +
    "\070\052\057\053\uff56\054\uff56\057\uff56\060\uff56\061\uff56" +
    "\062\uff56\065\uff56\072\uff56\073\062\001\002\000\062\003" +
    "\uff4b\025\uff4b\031\uff4b\035\uff4b\040\uff4b\041\uff4b\042\uff4b" +
    "\043\uff4b\044\uff4b\045\uff4b\046\066\047\063\050\061\051" +
    "\070\052\057\053\uff4b\054\uff4b\057\uff4b\060\uff4b\061\uff4b" +
    "\062\uff4b\065\uff4b\072\uff4b\073\062\001\002\000\062\003" +
    "\uff4e\025\uff4e\031\uff4e\035\uff4e\040\uff4e\041\uff4e\042\uff4e" +
    "\043\uff4e\044\uff4e\045\uff4e\046\066\047\063\050\061\051" +
    "\070\052\057\053\uff4e\054\uff4e\057\uff4e\060\uff4e\061\uff4e" +
    "\062\uff4e\065\uff4e\072\uff4e\073\062\001\002\000\062\003" +
    "\uff55\025\uff55\031\uff55\035\uff55\040\uff55\041\uff55\042\uff55" +
    "\043\uff55\044\uff55\045\uff55\046\uff55\047\uff55\050\061\051" +
    "\070\052\057\053\uff55\054\uff55\057\uff55\060\uff55\061\uff55" +
    "\062\uff55\065\uff55\072\uff55\073\062\001\002\000\062\003" +
    "\uff50\025\uff50\031\uff50\035\uff50\040\uff50\041\uff50\042\uff50" +
    "\043\uff50\044\uff50\045\uff50\046\uff50\047\uff50\050\uff50\051" +
    "\uff50\052\057\053\uff50\054\uff50\057\uff50\060\uff50\061\uff50" +
    "\062\uff50\065\uff50\072\uff50\073\uff50\001\002\000\062\003" +
    "\uff53\025\uff53\031\uff53\035\uff53\040\uff53\041\uff53\042\uff53" +
    "\043\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53\051" +
    "\uff53\052\057\053\uff53\054\uff53\057\uff53\060\uff53\061\uff53" +
    "\062\uff53\065\uff53\072\uff53\073\062\001\002\000\062\003" +
    "\uff4f\025\uff4f\031\uff4f\035\uff4f\040\uff4f\041\uff4f\042\uff4f" +
    "\043\uff4f\044\uff4f\045\uff4f\046\066\047\063\050\061\051" +
    "\070\052\057\053\uff4f\054\uff4f\057\uff4f\060\uff4f\061\uff4f" +
    "\062\uff4f\065\uff4f\072\uff4f\073\062\001\002\000\062\003" +
    "\uff52\025\uff52\031\uff52\035\uff52\040\uff52\041\uff52\042\uff52" +
    "\043\uff52\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52\051" +
    "\uff52\052\057\053\uff52\054\uff52\057\uff52\060\uff52\061\uff52" +
    "\062\uff52\065\uff52\072\uff52\073\uff52\001\002\000\062\003" +
    "\uff4d\025\uff4d\031\uff4d\035\uff4d\040\uff4d\041\uff4d\042\uff4d" +
    "\043\uff4d\044\uff4d\045\uff4d\046\066\047\063\050\061\051" +
    "\070\052\057\053\uff4d\054\uff4d\057\uff4d\060\uff4d\061\uff4d" +
    "\062\uff4d\065\uff4d\072\uff4d\073\062\001\002\000\062\003" +
    "\uff4a\025\uff4a\031\uff4a\035\uff4a\040\uff4a\041\uff4a\042\uff4a" +
    "\043\uff4a\044\uff4a\045\uff4a\046\066\047\063\050\061\051" +
    "\070\052\057\053\uff4a\054\uff4a\057\uff4a\060\uff4a\061\uff4a" +
    "\062\uff4a\065\uff4a\072\uff4a\073\062\001\002\000\062\003" +
    "\uff49\025\uff49\031\uff49\035\uff49\040\067\041\056\042\060" +
    "\043\064\044\065\045\055\046\066\047\063\050\061\051" +
    "\070\052\057\053\uff49\054\uff49\057\uff49\060\uff49\061\uff49" +
    "\062\uff49\065\uff49\072\uff49\073\062\001\002\000\026\047" +
    "\037\055\047\056\043\057\112\077\045\100\034\102\051" +
    "\103\035\104\036\105\044\001\002\000\042\040\067\041" +
    "\056\042\060\043\064\044\065\045\055\046\066\047\063" +
    "\050\061\051\070\052\057\053\054\054\071\057\uff46\062" +
    "\115\073\062\001\002\000\062\003\uff43\025\uff43\031\uff43" +
    "\035\uff43\040\uff43\041\uff43\042\uff43\043\uff43\044\uff43\045" +
    "\uff43\046\uff43\047\uff43\050\uff43\051\uff43\052\uff43\053\uff43" +
    "\054\uff43\057\uff43\060\uff43\061\uff43\062\uff43\065\uff43\072" +
    "\uff43\073\uff43\001\002\000\004\057\114\001\002\000\062" +
    "\003\uff44\025\uff44\031\uff44\035\uff44\040\uff44\041\uff44\042" +
    "\uff44\043\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44" +
    "\051\uff44\052\uff44\053\uff44\054\uff44\057\uff44\060\uff44\061" +
    "\uff44\062\uff44\065\uff44\072\uff44\073\uff44\001\002\000\024" +
    "\047\037\055\047\056\043\077\045\100\034\102\051\103" +
    "\035\104\036\105\044\001\002\000\004\057\uff45\001\002" +
    "\000\040\040\067\041\056\042\060\043\064\044\065\045" +
    "\055\046\066\047\063\050\061\051\070\052\057\053\054" +
    "\054\071\057\120\073\062\001\002\000\062\003\uff5f\025" +
    "\uff5f\031\uff5f\035\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f" +
    "\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051\uff5f\052" +
    "\uff5f\053\uff5f\054\uff5f\057\uff5f\060\uff5f\061\uff5f\062\uff5f" +
    "\065\uff5f\072\uff5f\073\uff5f\001\002\000\062\003\uff51\025" +
    "\uff51\031\uff51\035\uff51\040\uff51\041\uff51\042\uff51\043\uff51" +
    "\044\uff51\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51\052" +
    "\057\053\uff51\054\uff51\057\uff51\060\uff51\061\uff51\062\uff51" +
    "\065\uff51\072\uff51\073\uff51\001\002\000\004\024\125\001" +
    "\002\000\004\077\013\001\002\000\010\003\uff71\057\uff71" +
    "\060\uff71\001\002\000\012\004\126\005\131\006\132\010" +
    "\127\001\002\000\014\003\uff31\035\uff31\037\uff31\057\uff31" +
    "\060\uff31\001\002\000\014\003\uff2e\035\uff2e\037\uff2e\057" +
    "\uff2e\060\uff2e\001\002\000\004\035\133\001\002\000\014" +
    "\003\uff30\035\uff30\037\uff30\057\uff30\060\uff30\001\002\000" +
    "\014\003\uff2f\035\uff2f\037\uff2f\057\uff2f\060\uff2f\001\002" +
    "\000\010\020\022\023\014\077\013\001\002\000\004\036" +
    "\135\001\002\000\046\011\152\014\143\017\151\024\160" +
    "\030\162\031\150\033\136\034\146\047\037\055\047\056" +
    "\043\076\141\077\153\100\034\102\051\103\035\104\036" +
    "\105\044\001\002\000\006\003\u018a\056\u018b\001\002\000" +
    "\004\016\u0187\001\002\000\060\003\uff3b\011\uff3b\012\uff3b" +
    "\013\uff3b\014\uff3b\016\uff3b\017\uff3b\024\uff3b\026\uff3b\030" +
    "\uff3b\031\uff3b\033\uff3b\034\uff3b\047\uff3b\055\uff3b\056\uff3b" +
    "\076\uff3b\077\uff3b\100\uff3b\102\uff3b\103\uff3b\104\uff3b\105" +
    "\uff3b\001\002\000\024\047\037\055\047\056\043\077\045" +
    "\100\034\102\051\103\035\104\036\105\044\001\002\000" +
    "\060\003\uff39\011\uff39\012\uff39\013\uff39\014\uff39\016\uff39" +
    "\017\uff39\024\uff39\026\uff39\030\uff39\031\uff39\033\uff39\034" +
    "\uff39\047\uff39\055\uff39\056\uff39\076\uff39\077\uff39\100\uff39" +
    "\102\uff39\103\uff39\104\uff39\105\uff39\001\002\000\004\077" +
    "\u012c\001\002\000\060\003\uff3a\011\uff3a\012\uff3a\013\uff3a" +
    "\014\uff3a\016\uff3a\017\uff3a\024\uff3a\026\uff3a\030\uff3a\031" +
    "\uff3a\033\uff3a\034\uff3a\047\uff3a\055\uff3a\056\uff3a\076\uff3a" +
    "\077\uff3a\100\uff3a\102\uff3a\103\uff3a\104\uff3a\105\uff3a\001" +
    "\002\000\060\003\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c" +
    "\016\uff3c\017\uff3c\024\uff3c\026\uff3c\030\uff3c\031\uff3c\033" +
    "\uff3c\034\uff3c\047\uff3c\055\uff3c\056\uff3c\076\uff3c\077\uff3c" +
    "\100\uff3c\102\uff3c\103\uff3c\104\uff3c\105\uff3c\001\002\000" +
    "\006\003\u011c\056\u011d\001\002\000\060\003\uff40\011\uff40" +
    "\012\uff40\013\uff40\014\uff40\016\uff40\017\uff40\024\uff40\026" +
    "\uff40\030\uff40\031\uff40\033\uff40\034\uff40\047\uff40\055\uff40" +
    "\056\uff40\076\uff40\077\uff40\100\uff40\102\uff40\103\uff40\104" +
    "\uff40\105\uff40\001\002\000\052\003\u0102\011\152\014\143" +
    "\016\u0103\017\151\024\160\030\162\031\150\033\136\034" +
    "\146\047\037\055\047\056\043\076\141\077\153\100\034" +
    "\102\051\103\035\104\036\105\044\001\002\000\006\003" +
    "\372\026\373\001\002\000\024\047\037\055\047\056\043" +
    "\077\045\100\034\102\051\103\035\104\036\105\044\001" +
    "\002\000\044\037\236\040\uff61\041\uff61\042\uff61\043\uff61" +
    "\044\uff61\045\uff61\046\uff61\047\uff61\050\uff61\051\uff61\052" +
    "\uff61\053\uff61\054\uff61\056\110\060\uff61\073\uff61\001\002" +
    "\000\040\040\067\041\056\042\060\043\064\044\065\045" +
    "\055\046\066\047\063\050\061\051\070\052\057\053\054" +
    "\054\071\060\235\073\062\001\002\000\060\003\uff37\011" +
    "\uff37\012\uff37\013\uff37\014\uff37\016\uff37\017\uff37\024\uff37" +
    "\026\uff37\030\uff37\031\uff37\033\uff37\034\uff37\047\uff37\055" +
    "\uff37\056\uff37\076\uff37\077\uff37\100\uff37\102\uff37\103\uff37" +
    "\104\uff37\105\uff37\001\002\000\060\003\uff38\011\uff38\012" +
    "\uff38\013\uff38\014\uff38\016\uff38\017\uff38\024\uff38\026\uff38" +
    "\030\uff38\031\uff38\033\uff38\034\uff38\047\uff38\055\uff38\056" +
    "\uff38\076\uff38\077\uff38\100\uff38\102\uff38\103\uff38\104\uff38" +
    "\105\uff38\001\002\000\060\003\uff41\011\152\012\uff41\013" +
    "\uff41\014\143\016\uff41\017\151\024\160\026\uff41\030\162" +
    "\031\150\033\136\034\146\047\037\055\047\056\043\076" +
    "\141\077\153\100\034\102\051\103\035\104\036\105\044" +
    "\001\002\000\026\003\232\047\037\055\047\056\043\077" +
    "\045\100\034\102\051\103\035\104\036\105\044\001\002" +
    "\000\060\003\uff36\011\uff36\012\uff36\013\uff36\014\uff36\016" +
    "\uff36\017\uff36\024\uff36\026\uff36\030\uff36\031\uff36\033\uff36" +
    "\034\uff36\047\uff36\055\uff36\056\uff36\076\uff36\077\uff36\100" +
    "\uff36\102\uff36\103\uff36\104\uff36\105\uff36\001\002\000\024" +
    "\047\037\055\047\056\043\077\045\100\034\102\051\103" +
    "\035\104\036\105\044\001\002\000\060\003\uff3e\011\uff3e" +
    "\012\uff3e\013\uff3e\014\uff3e\016\uff3e\017\uff3e\024\uff3e\026" +
    "\uff3e\030\uff3e\031\uff3e\033\uff3e\034\uff3e\047\uff3e\055\uff3e" +
    "\056\uff3e\076\uff3e\077\uff3e\100\uff3e\102\uff3e\103\uff3e\104" +
    "\uff3e\105\uff3e\001\002\000\060\003\uff3d\011\uff3d\012\uff3d" +
    "\013\uff3d\014\uff3d\016\uff3d\017\uff3d\024\uff3d\026\uff3d\030" +
    "\uff3d\031\uff3d\033\uff3d\034\uff3d\047\uff3d\055\uff3d\056\uff3d" +
    "\076\uff3d\077\uff3d\100\uff3d\102\uff3d\103\uff3d\104\uff3d\105" +
    "\uff3d\001\002\000\042\003\167\031\166\040\067\041\056" +
    "\042\060\043\064\044\065\045\055\046\066\047\063\050" +
    "\061\051\070\052\057\053\054\054\071\073\062\001\002" +
    "\000\052\003\200\011\152\014\143\016\201\017\151\024" +
    "\160\030\162\031\150\033\136\034\146\047\037\055\047" +
    "\056\043\076\141\077\153\100\034\102\051\103\035\104" +
    "\036\105\044\001\002\000\050\011\152\014\143\016\171" +
    "\017\151\024\160\030\162\031\150\033\136\034\146\047" +
    "\037\055\047\056\043\076\141\077\153\100\034\102\051" +
    "\103\035\104\036\105\044\001\002\000\004\016\174\001" +
    "\002\000\004\031\172\001\002\000\004\060\173\001\002" +
    "\000\060\003\ufeea\011\ufeea\012\ufeea\013\ufeea\014\ufeea\016" +
    "\ufeea\017\ufeea\024\ufeea\026\ufeea\030\ufeea\031\ufeea\033\ufeea" +
    "\034\ufeea\047\ufeea\055\ufeea\056\ufeea\076\ufeea\077\ufeea\100" +
    "\ufeea\102\ufeea\103\ufeea\104\ufeea\105\ufeea\001\002\000\004" +
    "\031\175\001\002\000\004\060\176\001\002\000\060\003" +
    "\ufef2\011\ufef2\012\ufef2\013\ufef2\014\ufef2\016\ufef2\017\ufef2" +
    "\024\ufef2\026\ufef2\030\ufef2\031\ufef2\033\ufef2\034\ufef2\047" +
    "\ufef2\055\ufef2\056\ufef2\076\ufef2\077\ufef2\100\ufef2\102\ufef2" +
    "\103\ufef2\104\ufef2\105\ufef2\001\002\000\006\003\216\016" +
    "\217\001\002\000\006\016\211\031\ufee9\001\002\000\006" +
    "\003\202\031\203\001\002\000\004\060\ufee7\001\002\000" +
    "\006\003\204\060\205\001\002\000\060\003\ufee5\011\ufee5" +
    "\012\ufee5\013\ufee5\014\ufee5\016\ufee5\017\ufee5\024\ufee5\026" +
    "\ufee5\030\ufee5\031\ufee5\033\ufee5\034\ufee5\047\ufee5\055\ufee5" +
    "\056\ufee5\076\ufee5\077\ufee5\100\ufee5\102\ufee5\103\ufee5\104" +
    "\ufee5\105\ufee5\001\002\000\060\003\ufeeb\011\ufeeb\012\ufeeb" +
    "\013\ufeeb\014\ufeeb\016\ufeeb\017\ufeeb\024\ufeeb\026\ufeeb\030" +
    "\ufeeb\031\ufeeb\033\ufeeb\034\ufeeb\047\ufeeb\055\ufeeb\056\ufeeb" +
    "\076\ufeeb\077\ufeeb\100\ufeeb\102\ufeeb\103\ufeeb\104\ufeeb\105" +
    "\ufeeb\001\002\000\004\060\207\001\002\000\060\003\ufee6" +
    "\011\ufee6\012\ufee6\013\ufee6\014\ufee6\016\ufee6\017\ufee6\024" +
    "\ufee6\026\ufee6\030\ufee6\031\ufee6\033\ufee6\034\ufee6\047\ufee6" +
    "\055\ufee6\056\ufee6\076\ufee6\077\ufee6\100\ufee6\102\ufee6\103" +
    "\ufee6\104\ufee6\105\ufee6\001\002\000\004\031\214\001\002" +
    "\000\004\031\212\001\002\000\004\060\213\001\002\000" +
    "\060\003\ufef1\011\ufef1\012\ufef1\013\ufef1\014\ufef1\016\ufef1" +
    "\017\ufef1\024\ufef1\026\ufef1\030\ufef1\031\ufef1\033\ufef1\034" +
    "\ufef1\047\ufef1\055\ufef1\056\ufef1\076\ufef1\077\ufef1\100\ufef1" +
    "\102\ufef1\103\ufef1\104\ufef1\105\ufef1\001\002\000\004\060" +
    "\215\001\002\000\060\003\ufee8\011\ufee8\012\ufee8\013\ufee8" +
    "\014\ufee8\016\ufee8\017\ufee8\024\ufee8\026\ufee8\030\ufee8\031" +
    "\ufee8\033\ufee8\034\ufee8\047\ufee8\055\ufee8\056\ufee8\076\ufee8" +
    "\077\ufee8\100\ufee8\102\ufee8\103\ufee8\104\ufee8\105\ufee8\001" +
    "\002\000\004\031\ufef0\001\002\000\006\003\220\031\221" +
    "\001\002\000\004\060\ufeee\001\002\000\006\003\222\060" +
    "\223\001\002\000\060\003\ufeec\011\ufeec\012\ufeec\013\ufeec" +
    "\014\ufeec\016\ufeec\017\ufeec\024\ufeec\026\ufeec\030\ufeec\031" +
    "\ufeec\033\ufeec\034\ufeec\047\ufeec\055\ufeec\056\ufeec\076\ufeec" +
    "\077\ufeec\100\ufeec\102\ufeec\103\ufeec\104\ufeec\105\ufeec\001" +
    "\002\000\060\003\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3" +
    "\016\ufef3\017\ufef3\024\ufef3\026\ufef3\030\ufef3\031\ufef3\033" +
    "\ufef3\034\ufef3\047\ufef3\055\ufef3\056\ufef3\076\ufef3\077\ufef3" +
    "\100\ufef3\102\ufef3\103\ufef3\104\ufef3\105\ufef3\001\002\000" +
    "\004\060\225\001\002\000\060\003\ufeed\011\ufeed\012\ufeed" +
    "\013\ufeed\014\ufeed\016\ufeed\017\ufeed\024\ufeed\026\ufeed\030" +
    "\ufeed\031\ufeed\033\ufeed\034\ufeed\047\ufeed\055\ufeed\056\ufeed" +
    "\076\ufeed\077\ufeed\100\ufeed\102\ufeed\103\ufeed\104\ufeed\105" +
    "\ufeed\001\002\000\004\031\227\001\002\000\004\060\230" +
    "\001\002\000\060\003\ufeef\011\ufeef\012\ufeef\013\ufeef\014" +
    "\ufeef\016\ufeef\017\ufeef\024\ufeef\026\ufeef\030\ufeef\031\ufeef" +
    "\033\ufeef\034\ufeef\047\ufeef\055\ufeef\056\ufeef\076\ufeef\077" +
    "\ufeef\100\ufeef\102\ufeef\103\ufeef\104\ufeef\105\ufeef\001\002" +
    "\000\040\040\067\041\056\042\060\043\064\044\065\045" +
    "\055\046\066\047\063\050\061\051\070\052\057\053\054" +
    "\054\071\060\233\073\062\001\002\000\060\003\ufeac\011" +
    "\ufeac\012\ufeac\013\ufeac\014\ufeac\016\ufeac\017\ufeac\024\ufeac" +
    "\026\ufeac\030\ufeac\031\ufeac\033\ufeac\034\ufeac\047\ufeac\055" +
    "\ufeac\056\ufeac\076\ufeac\077\ufeac\100\ufeac\102\ufeac\103\ufeac" +
    "\104\ufeac\105\ufeac\001\002\000\060\003\ufead\011\ufead\012" +
    "\ufead\013\ufead\014\ufead\016\ufead\017\ufead\024\ufead\026\ufead" +
    "\030\ufead\031\ufead\033\ufead\034\ufead\047\ufead\055\ufead\056" +
    "\ufead\076\ufead\077\ufead\100\ufead\102\ufead\103\ufead\104\ufead" +
    "\105\ufead\001\002\000\014\003\uff42\012\uff42\013\uff42\016" +
    "\uff42\026\uff42\001\002\000\060\003\uff3f\011\uff3f\012\uff3f" +
    "\013\uff3f\014\uff3f\016\uff3f\017\uff3f\024\uff3f\026\uff3f\030" +
    "\uff3f\031\uff3f\033\uff3f\034\uff3f\047\uff3f\055\uff3f\056\uff3f" +
    "\076\uff3f\077\uff3f\100\uff3f\102\uff3f\103\uff3f\104\uff3f\105" +
    "\uff3f\001\002\000\026\003\240\047\037\055\047\056\043" +
    "\077\045\100\034\102\051\103\035\104\036\105\044\001" +
    "\002\000\042\003\243\040\067\041\056\042\060\043\064" +
    "\044\065\045\055\046\066\047\063\050\061\051\070\052" +
    "\057\053\054\054\071\060\244\073\062\001\002\000\004" +
    "\060\uff2c\001\002\000\004\060\242\001\002\000\060\003" +
    "\uff2b\011\uff2b\012\uff2b\013\uff2b\014\uff2b\016\uff2b\017\uff2b" +
    "\024\uff2b\026\uff2b\030\uff2b\031\uff2b\033\uff2b\034\uff2b\047" +
    "\uff2b\055\uff2b\056\uff2b\076\uff2b\077\uff2b\100\uff2b\102\uff2b" +
    "\103\uff2b\104\uff2b\105\uff2b\001\002\000\060\003\uff2a\011" +
    "\uff2a\012\uff2a\013\uff2a\014\uff2a\016\uff2a\017\uff2a\024\uff2a" +
    "\026\uff2a\030\uff2a\031\uff2a\033\uff2a\034\uff2a\047\uff2a\055" +
    "\uff2a\056\uff2a\076\uff2a\077\uff2a\100\uff2a\102\uff2a\103\uff2a" +
    "\104\uff2a\105\uff2a\001\002\000\060\003\uff2d\011\uff2d\012" +
    "\uff2d\013\uff2d\014\uff2d\016\uff2d\017\uff2d\024\uff2d\026\uff2d" +
    "\030\uff2d\031\uff2d\033\uff2d\034\uff2d\047\uff2d\055\uff2d\056" +
    "\uff2d\076\uff2d\077\uff2d\100\uff2d\102\uff2d\103\uff2d\104\uff2d" +
    "\105\uff2d\001\002\000\042\003\247\025\246\040\067\041" +
    "\056\042\060\043\064\044\065\045\055\046\066\047\063" +
    "\050\061\051\070\052\057\053\054\054\071\073\062\001" +
    "\002\000\050\003\255\011\152\014\143\017\151\024\160" +
    "\030\162\031\150\033\136\034\146\047\037\055\047\056" +
    "\043\076\141\077\153\100\034\102\051\103\035\104\036" +
    "\105\044\001\002\000\046\011\152\014\143\017\151\024" +
    "\160\030\162\031\150\033\136\034\146\047\037\055\047" +
    "\056\043\076\141\077\153\100\034\102\051\103\035\104" +
    "\036\105\044\001\002\000\004\016\251\001\002\000\004" +
    "\011\252\001\002\000\004\060\253\001\002\000\060\003" +
    "\uff11\011\uff11\012\uff11\013\uff11\014\uff11\016\uff11\017\uff11" +
    "\024\uff11\026\uff11\030\uff11\031\uff11\033\uff11\034\uff11\047" +
    "\uff11\055\uff11\056\uff11\076\uff11\077\uff11\100\uff11\102\uff11" +
    "\103\uff11\104\uff11\105\uff11\001\002\000\012\003\262\012" +
    "\263\013\265\016\267\001\002\000\004\016\uff10\001\002" +
    "\000\004\016\257\001\002\000\004\011\260\001\002\000" +
    "\004\060\261\001\002\000\060\003\uff0f\011\uff0f\012\uff0f" +
    "\013\uff0f\014\uff0f\016\uff0f\017\uff0f\024\uff0f\026\uff0f\030" +
    "\uff0f\031\uff0f\033\uff0f\034\uff0f\047\uff0f\055\uff0f\056\uff0f" +
    "\076\uff0f\077\uff0f\100\uff0f\102\uff0f\103\uff0f\104\uff0f\105" +
    "\uff0f\001\002\000\004\011\uff0e\001\002\000\050\003\347" +
    "\011\152\014\143\017\151\024\160\030\162\031\150\033" +
    "\136\034\146\047\037\055\047\056\043\076\141\077\153" +
    "\100\034\102\051\103\035\104\036\105\044\001\002\000" +
    "\012\003\uff18\012\uff18\013\265\016\uff18\001\002\000\026" +
    "\003\334\047\037\055\047\056\043\077\045\100\034\102" +
    "\051\103\035\104\036\105\044\001\002\000\010\003\277" +
    "\012\276\016\300\001\002\000\006\003\270\011\271\001" +
    "\002\000\004\060\uff0c\001\002\000\006\003\272\060\273" +
    "\001\002\000\060\003\uff0a\011\uff0a\012\uff0a\013\uff0a\014" +
    "\uff0a\016\uff0a\017\uff0a\024\uff0a\026\uff0a\030\uff0a\031\uff0a" +
    "\033\uff0a\034\uff0a\047\uff0a\055\uff0a\056\uff0a\076\uff0a\077" +
    "\uff0a\100\uff0a\102\uff0a\103\uff0a\104\uff0a\105\uff0a\001\002" +
    "\000\060\003\uff12\011\uff12\012\uff12\013\uff12\014\uff12\016" +
    "\uff12\017\uff12\024\uff12\026\uff12\030\uff12\031\uff12\033\uff12" +
    "\034\uff12\047\uff12\055\uff12\056\uff12\076\uff12\077\uff12\100" +
    "\uff12\102\uff12\103\uff12\104\uff12\105\uff12\001\002\000\004" +
    "\060\275\001\002\000\060\003\uff0b\011\uff0b\012\uff0b\013" +
    "\uff0b\014\uff0b\016\uff0b\017\uff0b\024\uff0b\026\uff0b\030\uff0b" +
    "\031\uff0b\033\uff0b\034\uff0b\047\uff0b\055\uff0b\056\uff0b\076" +
    "\uff0b\077\uff0b\100\uff0b\102\uff0b\103\uff0b\104\uff0b\105\uff0b" +
    "\001\002\000\050\003\313\011\152\014\143\017\151\024" +
    "\160\030\162\031\150\033\136\034\146\047\037\055\047" +
    "\056\043\076\141\077\153\100\034\102\051\103\035\104" +
    "\036\105\044\001\002\000\004\011\uff00\001\002\000\006" +
    "\003\301\011\302\001\002\000\004\060\ufefe\001\002\000" +
    "\006\003\303\060\304\001\002\000\060\003\ufefc\011\ufefc" +
    "\012\ufefc\013\ufefc\014\ufefc\016\ufefc\017\ufefc\024\ufefc\026" +
    "\ufefc\030\ufefc\031\ufefc\033\ufefc\034\ufefc\047\ufefc\055\ufefc" +
    "\056\ufefc\076\ufefc\077\ufefc\100\ufefc\102\ufefc\103\ufefc\104" +
    "\ufefc\105\ufefc\001\002\000\060\003\uff01\011\uff01\012\uff01" +
    "\013\uff01\014\uff01\016\uff01\017\uff01\024\uff01\026\uff01\030" +
    "\uff01\031\uff01\033\uff01\034\uff01\047\uff01\055\uff01\056\uff01" +
    "\076\uff01\077\uff01\100\uff01\102\uff01\103\uff01\104\uff01\105" +
    "\uff01\001\002\000\004\060\306\001\002\000\060\003\ufefd" +
    "\011\ufefd\012\ufefd\013\ufefd\014\ufefd\016\ufefd\017\ufefd\024" +
    "\ufefd\026\ufefd\030\ufefd\031\ufefd\033\ufefd\034\ufefd\047\ufefd" +
    "\055\ufefd\056\ufefd\076\ufefd\077\ufefd\100\ufefd\102\ufefd\103" +
    "\ufefd\104\ufefd\105\ufefd\001\002\000\004\011\310\001\002" +
    "\000\004\060\311\001\002\000\060\003\ufeff\011\ufeff\012" +
    "\ufeff\013\ufeff\014\ufeff\016\ufeff\017\ufeff\024\ufeff\026\ufeff" +
    "\030\ufeff\031\ufeff\033\ufeff\034\ufeff\047\ufeff\055\ufeff\056" +
    "\ufeff\076\ufeff\077\ufeff\100\ufeff\102\ufeff\103\ufeff\104\ufeff" +
    "\105\ufeff\001\002\000\006\003\320\016\321\001\002\000" +
    "\004\016\ufefa\001\002\000\004\016\315\001\002\000\004" +
    "\011\316\001\002\000\004\060\317\001\002\000\060\003" +
    "\ufef9\011\ufef9\012\ufef9\013\ufef9\014\ufef9\016\ufef9\017\ufef9" +
    "\024\ufef9\026\ufef9\030\ufef9\031\ufef9\033\ufef9\034\ufef9\047" +
    "\ufef9\055\ufef9\056\ufef9\076\ufef9\077\ufef9\100\ufef9\102\ufef9" +
    "\103\ufef9\104\ufef9\105\ufef9\001\002\000\004\011\ufef8\001" +
    "\002\000\006\003\322\011\323\001\002\000\004\060\ufef6" +
    "\001\002\000\006\003\324\060\325\001\002\000\060\003" +
    "\ufef4\011\ufef4\012\ufef4\013\ufef4\014\ufef4\016\ufef4\017\ufef4" +
    "\024\ufef4\026\ufef4\030\ufef4\031\ufef4\033\ufef4\034\ufef4\047" +
    "\ufef4\055\ufef4\056\ufef4\076\ufef4\077\ufef4\100\ufef4\102\ufef4" +
    "\103\ufef4\104\ufef4\105\ufef4\001\002\000\060\003\ufefb\011" +
    "\ufefb\012\ufefb\013\ufefb\014\ufefb\016\ufefb\017\ufefb\024\ufefb" +
    "\026\ufefb\030\ufefb\031\ufefb\033\ufefb\034\ufefb\047\ufefb\055" +
    "\ufefb\056\ufefb\076\ufefb\077\ufefb\100\ufefb\102\ufefb\103\ufefb" +
    "\104\ufefb\105\ufefb\001\002\000\004\060\327\001\002\000" +
    "\060\003\ufef5\011\ufef5\012\ufef5\013\ufef5\014\ufef5\016\ufef5" +
    "\017\ufef5\024\ufef5\026\ufef5\030\ufef5\031\ufef5\033\ufef5\034" +
    "\ufef5\047\ufef5\055\ufef5\056\ufef5\076\ufef5\077\ufef5\100\ufef5" +
    "\102\ufef5\103\ufef5\104\ufef5\105\ufef5\001\002\000\004\011" +
    "\331\001\002\000\004\060\332\001\002\000\060\003\ufef7" +
    "\011\ufef7\012\ufef7\013\ufef7\014\ufef7\016\ufef7\017\ufef7\024" +
    "\ufef7\026\ufef7\030\ufef7\031\ufef7\033\ufef7\034\ufef7\047\ufef7" +
    "\055\ufef7\056\ufef7\076\ufef7\077\ufef7\100\ufef7\102\ufef7\103" +
    "\ufef7\104\ufef7\105\ufef7\001\002\000\042\003\341\025\340" +
    "\040\067\041\056\042\060\043\064\044\065\045\055\046" +
    "\066\047\063\050\061\051\070\052\057\053\054\054\071" +
    "\073\062\001\002\000\004\025\uff16\001\002\000\004\025" +
    "\336\001\002\000\046\011\152\014\143\017\151\024\160" +
    "\030\162\031\150\033\136\034\146\047\037\055\047\056" +
    "\043\076\141\077\153\100\034\102\051\103\035\104\036" +
    "\105\044\001\002\000\012\003\uff15\012\uff15\013\uff15\016" +
    "\uff15\001\002\000\050\003\344\011\152\014\143\017\151" +
    "\024\160\030\162\031\150\033\136\034\146\047\037\055" +
    "\047\056\043\076\141\077\153\100\034\102\051\103\035" +
    "\104\036\105\044\001\002\000\046\011\152\014\143\017" +
    "\151\024\160\030\162\031\150\033\136\034\146\047\037" +
    "\055\047\056\043\076\141\077\153\100\034\102\051\103" +
    "\035\104\036\105\044\001\002\000\012\003\uff14\012\uff14" +
    "\013\uff14\016\uff14\001\002\000\012\003\uff17\012\uff17\013" +
    "\uff17\016\uff17\001\002\000\012\003\uff13\012\uff13\013\uff13" +
    "\016\uff13\001\002\000\010\003\uff19\012\uff19\016\uff19\001" +
    "\002\000\006\003\354\016\355\001\002\000\004\016\uff08" +
    "\001\002\000\004\016\351\001\002\000\004\011\352\001" +
    "\002\000\004\060\353\001\002\000\060\003\uff07\011\uff07" +
    "\012\uff07\013\uff07\014\uff07\016\uff07\017\uff07\024\uff07\026" +
    "\uff07\030\uff07\031\uff07\033\uff07\034\uff07\047\uff07\055\uff07" +
    "\056\uff07\076\uff07\077\uff07\100\uff07\102\uff07\103\uff07\104" +
    "\uff07\105\uff07\001\002\000\004\011\uff06\001\002\000\006" +
    "\003\356\011\357\001\002\000\004\060\uff04\001\002\000" +
    "\006\003\360\060\361\001\002\000\060\003\uff02\011\uff02" +
    "\012\uff02\013\uff02\014\uff02\016\uff02\017\uff02\024\uff02\026" +
    "\uff02\030\uff02\031\uff02\033\uff02\034\uff02\047\uff02\055\uff02" +
    "\056\uff02\076\uff02\077\uff02\100\uff02\102\uff02\103\uff02\104" +
    "\uff02\105\uff02\001\002\000\060\003\uff09\011\uff09\012\uff09" +
    "\013\uff09\014\uff09\016\uff09\017\uff09\024\uff09\026\uff09\030" +
    "\uff09\031\uff09\033\uff09\034\uff09\047\uff09\055\uff09\056\uff09" +
    "\076\uff09\077\uff09\100\uff09\102\uff09\103\uff09\104\uff09\105" +
    "\uff09\001\002\000\004\060\363\001\002\000\060\003\uff03" +
    "\011\uff03\012\uff03\013\uff03\014\uff03\016\uff03\017\uff03\024" +
    "\uff03\026\uff03\030\uff03\031\uff03\033\uff03\034\uff03\047\uff03" +
    "\055\uff03\056\uff03\076\uff03\077\uff03\100\uff03\102\uff03\103" +
    "\uff03\104\uff03\105\uff03\001\002\000\004\011\365\001\002" +
    "\000\004\060\366\001\002\000\060\003\uff05\011\uff05\012" +
    "\uff05\013\uff05\014\uff05\016\uff05\017\uff05\024\uff05\026\uff05" +
    "\030\uff05\031\uff05\033\uff05\034\uff05\047\uff05\055\uff05\056" +
    "\uff05\076\uff05\077\uff05\100\uff05\102\uff05\103\uff05\104\uff05" +
    "\105\uff05\001\002\000\004\011\370\001\002\000\004\060" +
    "\371\001\002\000\060\003\uff0d\011\uff0d\012\uff0d\013\uff0d" +
    "\014\uff0d\016\uff0d\017\uff0d\024\uff0d\026\uff0d\030\uff0d\031" +
    "\uff0d\033\uff0d\034\uff0d\047\uff0d\055\uff0d\056\uff0d\076\uff0d" +
    "\077\uff0d\100\uff0d\102\uff0d\103\uff0d\104\uff0d\105\uff0d\001" +
    "\002\000\024\047\037\055\047\056\043\077\045\100\034" +
    "\102\051\103\035\104\036\105\044\001\002\000\024\047" +
    "\037\055\047\056\043\077\045\100\034\102\051\103\035" +
    "\104\036\105\044\001\002\000\042\003\375\040\067\041" +
    "\056\042\060\043\064\044\065\045\055\046\066\047\063" +
    "\050\061\051\070\052\057\053\054\054\071\060\376\073" +
    "\062\001\002\000\060\003\ufed1\011\ufed1\012\ufed1\013\ufed1" +
    "\014\ufed1\016\ufed1\017\ufed1\024\ufed1\026\ufed1\030\ufed1\031" +
    "\ufed1\033\ufed1\034\ufed1\047\ufed1\055\ufed1\056\ufed1\076\ufed1" +
    "\077\ufed1\100\ufed1\102\ufed1\103\ufed1\104\ufed1\105\ufed1\001" +
    "\002\000\060\003\ufed3\011\ufed3\012\ufed3\013\ufed3\014\ufed3" +
    "\016\ufed3\017\ufed3\024\ufed3\026\ufed3\030\ufed3\031\ufed3\033" +
    "\ufed3\034\ufed3\047\ufed3\055\ufed3\056\ufed3\076\ufed3\077\ufed3" +
    "\100\ufed3\102\ufed3\103\ufed3\104\ufed3\105\ufed3\001\002\000" +
    "\040\040\067\041\056\042\060\043\064\044\065\045\055" +
    "\046\066\047\063\050\061\051\070\052\057\053\054\054" +
    "\071\060\u0100\073\062\001\002\000\060\003\ufed2\011\ufed2" +
    "\012\ufed2\013\ufed2\014\ufed2\016\ufed2\017\ufed2\024\ufed2\026" +
    "\ufed2\030\ufed2\031\ufed2\033\ufed2\034\ufed2\047\ufed2\055\ufed2" +
    "\056\ufed2\076\ufed2\077\ufed2\100\ufed2\102\ufed2\103\ufed2\104" +
    "\ufed2\105\ufed2\001\002\000\006\003\u010c\016\u010d\001\002" +
    "\000\004\031\ufec9\001\002\000\006\003\u0104\031\u0105\001" +
    "\002\000\004\060\ufec7\001\002\000\004\003\u0106\001\002" +
    "\000\060\003\ufec5\011\ufec5\012\ufec5\013\ufec5\014\ufec5\016" +
    "\ufec5\017\ufec5\024\ufec5\026\ufec5\030\ufec5\031\ufec5\033\ufec5" +
    "\034\ufec5\047\ufec5\055\ufec5\056\ufec5\076\ufec5\077\ufec5\100" +
    "\ufec5\102\ufec5\103\ufec5\104\ufec5\105\ufec5\001\002\000\004" +
    "\060\u0108\001\002\000\060\003\ufec6\011\ufec6\012\ufec6\013" +
    "\ufec6\014\ufec6\016\ufec6\017\ufec6\024\ufec6\026\ufec6\030\ufec6" +
    "\031\ufec6\033\ufec6\034\ufec6\047\ufec6\055\ufec6\056\ufec6\076" +
    "\ufec6\077\ufec6\100\ufec6\102\ufec6\103\ufec6\104\ufec6\105\ufec6" +
    "\001\002\000\004\031\u010a\001\002\000\004\060\u010b\001" +
    "\002\000\060\003\ufec8\011\ufec8\012\ufec8\013\ufec8\014\ufec8" +
    "\016\ufec8\017\ufec8\024\ufec8\026\ufec8\030\ufec8\031\ufec8\033" +
    "\ufec8\034\ufec8\047\ufec8\055\ufec8\056\ufec8\076\ufec8\077\ufec8" +
    "\100\ufec8\102\ufec8\103\ufec8\104\ufec8\105\ufec8\001\002\000" +
    "\004\031\ufecf\001\002\000\006\003\u010e\031\u010f\001\002" +
    "\000\004\060\ufecd\001\002\000\006\003\u0110\060\u0111\001" +
    "\002\000\004\031\ufecb\001\002\000\060\003\ufed0\011\ufed0" +
    "\012\ufed0\013\ufed0\014\ufed0\016\ufed0\017\ufed0\024\ufed0\026" +
    "\ufed0\030\ufed0\031\ufed0\033\ufed0\034\ufed0\047\ufed0\055\ufed0" +
    "\056\ufed0\076\ufed0\077\ufed0\100\ufed0\102\ufed0\103\ufed0\104" +
    "\ufed0\105\ufed0\001\002\000\004\031\u0113\001\002\000\004" +
    "\016\u0114\001\002\000\004\031\u0115\001\002\000\004\060" +
    "\u0116\001\002\000\060\003\ufeca\011\ufeca\012\ufeca\013\ufeca" +
    "\014\ufeca\016\ufeca\017\ufeca\024\ufeca\026\ufeca\030\ufeca\031" +
    "\ufeca\033\ufeca\034\ufeca\047\ufeca\055\ufeca\056\ufeca\076\ufeca" +
    "\077\ufeca\100\ufeca\102\ufeca\103\ufeca\104\ufeca\105\ufeca\001" +
    "\002\000\004\060\u0118\001\002\000\060\003\ufecc\011\ufecc" +
    "\012\ufecc\013\ufecc\014\ufecc\016\ufecc\017\ufecc\024\ufecc\026" +
    "\ufecc\030\ufecc\031\ufecc\033\ufecc\034\ufecc\047\ufecc\055\ufecc" +
    "\056\ufecc\076\ufecc\077\ufecc\100\ufecc\102\ufecc\103\ufecc\104" +
    "\ufecc\105\ufecc\001\002\000\004\031\u011a\001\002\000\004" +
    "\060\u011b\001\002\000\060\003\ufece\011\ufece\012\ufece\013" +
    "\ufece\014\ufece\016\ufece\017\ufece\024\ufece\026\ufece\030\ufece" +
    "\031\ufece\033\ufece\034\ufece\047\ufece\055\ufece\056\ufece\076" +
    "\ufece\077\ufece\100\ufece\102\ufece\103\ufece\104\ufece\105\ufece" +
    "\001\002\000\004\077\u0129\001\002\000\006\003\u011f\077" +
    "\u011e\001\002\000\006\003\u0123\057\u0124\001\002\000\004" +
    "\057\uff25\001\002\000\004\057\u0121\001\002\000\004\060" +
    "\u0122\001\002\000\060\003\uff24\011\uff24\012\uff24\013\uff24" +
    "\014\uff24\016\uff24\017\uff24\024\uff24\026\uff24\030\uff24\031" +
    "\uff24\033\uff24\034\uff24\047\uff24\055\uff24\056\uff24\076\uff24" +
    "\077\uff24\100\uff24\102\uff24\103\uff24\104\uff24\105\uff24\001" +
    "\002\000\004\060\uff23\001\002\000\006\003\u0125\060\u0126" +
    "\001\002\000\060\003\uff21\011\uff21\012\uff21\013\uff21\014" +
    "\uff21\016\uff21\017\uff21\024\uff21\026\uff21\030\uff21\031\uff21" +
    "\033\uff21\034\uff21\047\uff21\055\uff21\056\uff21\076\uff21\077" +
    "\uff21\100\uff21\102\uff21\103\uff21\104\uff21\105\uff21\001\002" +
    "\000\060\003\uff27\011\uff27\012\uff27\013\uff27\014\uff27\016" +
    "\uff27\017\uff27\024\uff27\026\uff27\030\uff27\031\uff27\033\uff27" +
    "\034\uff27\047\uff27\055\uff27\056\uff27\076\uff27\077\uff27\100" +
    "\uff27\102\uff27\103\uff27\104\uff27\105\uff27\001\002\000\004" +
    "\060\u0128\001\002\000\060\003\uff22\011\uff22\012\uff22\013" +
    "\uff22\014\uff22\016\uff22\017\uff22\024\uff22\026\uff22\030\uff22" +
    "\031\uff22\033\uff22\034\uff22\047\uff22\055\uff22\056\uff22\076" +
    "\uff22\077\uff22\100\uff22\102\uff22\103\uff22\104\uff22\105\uff22" +
    "\001\002\000\004\057\u012a\001\002\000\004\060\u012b\001" +
    "\002\000\060\003\uff26\011\uff26\012\uff26\013\uff26\014\uff26" +
    "\016\uff26\017\uff26\024\uff26\026\uff26\030\uff26\031\uff26\033" +
    "\uff26\034\uff26\047\uff26\055\uff26\056\uff26\076\uff26\077\uff26" +
    "\100\uff26\102\uff26\103\uff26\104\uff26\105\uff26\001\002\000" +
    "\006\003\u012e\027\u012d\001\002\000\024\047\037\055\047" +
    "\056\043\077\045\100\034\102\051\103\035\104\036\105" +
    "\044\001\002\000\024\047\037\055\047\056\043\077\045" +
    "\100\034\102\051\103\035\104\036\105\044\001\002\000" +
    "\004\031\u0133\001\002\000\040\040\067\041\056\042\060" +
    "\043\064\044\065\045\055\046\066\047\063\050\061\051" +
    "\070\052\057\053\054\054\071\061\u0131\073\062\001\002" +
    "\000\024\047\037\055\047\056\043\077\045\100\034\102" +
    "\051\103\035\104\036\105\044\001\002\000\046\003\uff35" +
    "\031\uff35\040\067\041\056\042\060\043\064\044\065\045" +
    "\055\046\066\047\063\050\061\051\070\052\057\053\054" +
    "\054\071\065\uff35\072\uff35\073\062\001\002\000\050\011" +
    "\152\014\143\016\u0135\017\151\024\160\030\162\031\150" +
    "\033\136\034\146\047\037\055\047\056\043\076\141\077" +
    "\153\100\034\102\051\103\035\104\036\105\044\001\002" +
    "\000\004\016\u0138\001\002\000\004\031\u0136\001\002\000" +
    "\004\060\u0137\001\002\000\060\003\ufeda\011\ufeda\012\ufeda" +
    "\013\ufeda\014\ufeda\016\ufeda\017\ufeda\024\ufeda\026\ufeda\030" +
    "\ufeda\031\ufeda\033\ufeda\034\ufeda\047\ufeda\055\ufeda\056\ufeda" +
    "\076\ufeda\077\ufeda\100\ufeda\102\ufeda\103\ufeda\104\ufeda\105" +
    "\ufeda\001\002\000\004\031\u0139\001\002\000\004\060\u013a" +
    "\001\002\000\060\003\ufee3\011\ufee3\012\ufee3\013\ufee3\014" +
    "\ufee3\016\ufee3\017\ufee3\024\ufee3\026\ufee3\030\ufee3\031\ufee3" +
    "\033\ufee3\034\ufee3\047\ufee3\055\ufee3\056\ufee3\076\ufee3\077" +
    "\ufee3\100\ufee3\102\ufee3\103\ufee3\104\ufee3\105\ufee3\001\002" +
    "\000\006\003\u013c\031\u013d\001\002\000\050\011\152\014" +
    "\143\016\u0159\017\151\024\160\030\162\031\150\033\136" +
    "\034\146\047\037\055\047\056\043\076\141\077\153\100" +
    "\034\102\051\103\035\104\036\105\044\001\002\000\052" +
    "\003\u013f\011\152\014\143\016\u0140\017\151\024\160\030" +
    "\162\031\150\033\136\034\146\047\037\055\047\056\043" +
    "\076\141\077\153\100\034\102\051\103\035\104\036\105" +
    "\044\001\002\000\006\003\u014d\016\u014e\001\002\000\006" +
    "\016\u0148\031\ufed8\001\002\000\006\003\u0141\031\u0142\001" +
    "\002\000\004\060\ufed6\001\002\000\006\003\u0143\060\u0144" +
    "\001\002\000\060\003\ufed4\011\ufed4\012\ufed4\013\ufed4\014" +
    "\ufed4\016\ufed4\017\ufed4\024\ufed4\026\ufed4\030\ufed4\031\ufed4" +
    "\033\ufed4\034\ufed4\047\ufed4\055\ufed4\056\ufed4\076\ufed4\077" +
    "\ufed4\100\ufed4\102\ufed4\103\ufed4\104\ufed4\105\ufed4\001\002" +
    "\000\060\003\ufedb\011\ufedb\012\ufedb\013\ufedb\014\ufedb\016" +
    "\ufedb\017\ufedb\024\ufedb\026\ufedb\030\ufedb\031\ufedb\033\ufedb" +
    "\034\ufedb\047\ufedb\055\ufedb\056\ufedb\076\ufedb\077\ufedb\100" +
    "\ufedb\102\ufedb\103\ufedb\104\ufedb\105\ufedb\001\002\000\004" +
    "\060\u0146\001\002\000\060\003\ufed5\011\ufed5\012\ufed5\013" +
    "\ufed5\014\ufed5\016\ufed5\017\ufed5\024\ufed5\026\ufed5\030\ufed5" +
    "\031\ufed5\033\ufed5\034\ufed5\047\ufed5\055\ufed5\056\ufed5\076" +
    "\ufed5\077\ufed5\100\ufed5\102\ufed5\103\ufed5\104\ufed5\105\ufed5" +
    "\001\002\000\004\031\u014b\001\002\000\004\031\u0149\001" +
    "\002\000\004\060\u014a\001\002\000\060\003\ufee1\011\ufee1" +
    "\012\ufee1\013\ufee1\014\ufee1\016\ufee1\017\ufee1\024\ufee1\026" +
    "\ufee1\030\ufee1\031\ufee1\033\ufee1\034\ufee1\047\ufee1\055\ufee1" +
    "\056\ufee1\076\ufee1\077\ufee1\100\ufee1\102\ufee1\103\ufee1\104" +
    "\ufee1\105\ufee1\001\002\000\004\060\u014c\001\002\000\060" +
    "\003\ufed7\011\ufed7\012\ufed7\013\ufed7\014\ufed7\016\ufed7\017" +
    "\ufed7\024\ufed7\026\ufed7\030\ufed7\031\ufed7\033\ufed7\034\ufed7" +
    "\047\ufed7\055\ufed7\056\ufed7\076\ufed7\077\ufed7\100\ufed7\102" +
    "\ufed7\103\ufed7\104\ufed7\105\ufed7\001\002\000\004\031\ufee0" +
    "\001\002\000\006\003\u014f\031\u0150\001\002\000\004\060" +
    "\ufede\001\002\000\006\003\u0151\060\u0152\001\002\000\060" +
    "\003\ufedc\011\ufedc\012\ufedc\013\ufedc\014\ufedc\016\ufedc\017" +
    "\ufedc\024\ufedc\026\ufedc\030\ufedc\031\ufedc\033\ufedc\034\ufedc" +
    "\047\ufedc\055\ufedc\056\ufedc\076\ufedc\077\ufedc\100\ufedc\102" +
    "\ufedc\103\ufedc\104\ufedc\105\ufedc\001\002\000\060\003\ufee4" +
    "\011\ufee4\012\ufee4\013\ufee4\014\ufee4\016\ufee4\017\ufee4\024" +
    "\ufee4\026\ufee4\030\ufee4\031\ufee4\033\ufee4\034\ufee4\047\ufee4" +
    "\055\ufee4\056\ufee4\076\ufee4\077\ufee4\100\ufee4\102\ufee4\103" +
    "\ufee4\104\ufee4\105\ufee4\001\002\000\004\060\u0154\001\002" +
    "\000\060\003\ufedd\011\ufedd\012\ufedd\013\ufedd\014\ufedd\016" +
    "\ufedd\017\ufedd\024\ufedd\026\ufedd\030\ufedd\031\ufedd\033\ufedd" +
    "\034\ufedd\047\ufedd\055\ufedd\056\ufedd\076\ufedd\077\ufedd\100" +
    "\ufedd\102\ufedd\103\ufedd\104\ufedd\105\ufedd\001\002\000\004" +
    "\031\u0156\001\002\000\004\060\u0157\001\002\000\060\003" +
    "\ufedf\011\ufedf\012\ufedf\013\ufedf\014\ufedf\016\ufedf\017\ufedf" +
    "\024\ufedf\026\ufedf\030\ufedf\031\ufedf\033\ufedf\034\ufedf\047" +
    "\ufedf\055\ufedf\056\ufedf\076\ufedf\077\ufedf\100\ufedf\102\ufedf" +
    "\103\ufedf\104\ufedf\105\ufedf\001\002\000\004\016\u015c\001" +
    "\002\000\004\031\u015a\001\002\000\004\060\u015b\001\002" +
    "\000\060\003\ufed9\011\ufed9\012\ufed9\013\ufed9\014\ufed9\016" +
    "\ufed9\017\ufed9\024\ufed9\026\ufed9\030\ufed9\031\ufed9\033\ufed9" +
    "\034\ufed9\047\ufed9\055\ufed9\056\ufed9\076\ufed9\077\ufed9\100" +
    "\ufed9\102\ufed9\103\ufed9\104\ufed9\105\ufed9\001\002\000\004" +
    "\031\u015d\001\002\000\004\060\u015e\001\002\000\060\003" +
    "\ufee2\011\ufee2\012\ufee2\013\ufee2\014\ufee2\016\ufee2\017\ufee2" +
    "\024\ufee2\026\ufee2\030\ufee2\031\ufee2\033\ufee2\034\ufee2\047" +
    "\ufee2\055\ufee2\056\ufee2\076\ufee2\077\ufee2\100\ufee2\102\ufee2" +
    "\103\ufee2\104\ufee2\105\ufee2\001\002\000\042\003\u0160\035" +
    "\u0161\040\067\041\056\042\060\043\064\044\065\045\055" +
    "\046\066\047\063\050\061\051\070\052\057\053\054\054" +
    "\071\073\062\001\002\000\004\026\u0162\001\002\000\004" +
    "\026\u0162\001\002\000\030\003\u0175\047\037\055\047\056" +
    "\043\075\u0171\077\045\100\034\102\051\103\035\104\036" +
    "\105\044\001\002\000\006\003\u0166\016\u0167\001\002\000" +
    "\010\003\ufebd\016\ufebd\026\u0162\001\002\000\006\003\ufebc" +
    "\016\ufebc\001\002\000\004\076\ufec2\001\002\000\006\003" +
    "\u0168\076\u0169\001\002\000\004\060\ufec0\001\002\000\006" +
    "\003\u016a\060\u016b\001\002\000\060\003\ufebe\011\ufebe\012" +
    "\ufebe\013\ufebe\014\ufebe\016\ufebe\017\ufebe\024\ufebe\026\ufebe" +
    "\030\ufebe\031\ufebe\033\ufebe\034\ufebe\047\ufebe\055\ufebe\056" +
    "\ufebe\076\ufebe\077\ufebe\100\ufebe\102\ufebe\103\ufebe\104\ufebe" +
    "\105\ufebe\001\002\000\060\003\ufec4\011\ufec4\012\ufec4\013" +
    "\ufec4\014\ufec4\016\ufec4\017\ufec4\024\ufec4\026\ufec4\030\ufec4" +
    "\031\ufec4\033\ufec4\034\ufec4\047\ufec4\055\ufec4\056\ufec4\076" +
    "\ufec4\077\ufec4\100\ufec4\102\ufec4\103\ufec4\104\ufec4\105\ufec4" +
    "\001\002\000\004\060\u016d\001\002\000\060\003\ufebf\011" +
    "\ufebf\012\ufebf\013\ufebf\014\ufebf\016\ufebf\017\ufebf\024\ufebf" +
    "\026\ufebf\030\ufebf\031\ufebf\033\ufebf\034\ufebf\047\ufebf\055" +
    "\ufebf\056\ufebf\076\ufebf\077\ufebf\100\ufebf\102\ufebf\103\ufebf" +
    "\104\ufebf\105\ufebf\001\002\000\004\076\u016f\001\002\000" +
    "\004\060\u0170\001\002\000\060\003\ufec1\011\ufec1\012\ufec1" +
    "\013\ufec1\014\ufec1\016\ufec1\017\ufec1\024\ufec1\026\ufec1\030" +
    "\ufec1\031\ufec1\033\ufec1\034\ufec1\047\ufec1\055\ufec1\056\ufec1" +
    "\076\ufec1\077\ufec1\100\ufec1\102\ufec1\103\ufec1\104\ufec1\105" +
    "\ufec1\001\002\000\006\003\u017f\072\u0180\001\002\000\010" +
    "\003\ufeae\065\ufeae\072\ufeae\001\002\000\046\003\ufeaf\040" +
    "\067\041\056\042\060\043\064\044\065\045\055\046\066" +
    "\047\063\050\061\051\070\052\057\053\054\054\071\061" +
    "\u0131\065\ufeaf\072\ufeaf\073\062\001\002\000\010\003\ufeb1" +
    "\065\u017d\072\ufeb1\001\002\000\004\072\u017b\001\002\000" +
    "\006\003\u0177\072\u0178\001\002\000\054\003\ufeb8\011\152" +
    "\014\143\016\ufeb8\017\151\024\160\026\ufeb8\030\162\031" +
    "\150\033\136\034\146\047\037\055\047\056\043\076\141" +
    "\077\153\100\034\102\051\103\035\104\036\105\044\001" +
    "\002\000\054\003\ufeb9\011\152\014\143\016\ufeb9\017\151" +
    "\024\160\026\ufeb9\030\162\031\150\033\136\034\146\047" +
    "\037\055\047\056\043\076\141\077\153\100\034\102\051" +
    "\103\035\104\036\105\044\001\002\000\010\003\ufebb\016" +
    "\ufebb\026\ufebb\001\002\000\010\003\ufeba\016\ufeba\026\ufeba" +
    "\001\002\000\054\003\ufeb3\011\152\014\143\016\ufeb3\017" +
    "\151\024\160\026\ufeb3\030\162\031\150\033\136\034\146" +
    "\047\037\055\047\056\043\076\141\077\153\100\034\102" +
    "\051\103\035\104\036\105\044\001\002\000\010\003\ufeb6" +
    "\016\ufeb6\026\ufeb6\001\002\000\024\047\037\055\047\056" +
    "\043\077\045\100\034\102\051\103\035\104\036\105\044" +
    "\001\002\000\006\003\ufeb0\072\ufeb0\001\002\000\054\003" +
    "\ufeb2\011\152\014\143\016\ufeb2\017\151\024\160\026\ufeb2" +
    "\030\162\031\150\033\136\034\146\047\037\055\047\056" +
    "\043\076\141\077\153\100\034\102\051\103\035\104\036" +
    "\105\044\001\002\000\054\003\ufeb4\011\152\014\143\016" +
    "\ufeb4\017\151\024\160\026\ufeb4\030\162\031\150\033\136" +
    "\034\146\047\037\055\047\056\043\076\141\077\153\100" +
    "\034\102\051\103\035\104\036\105\044\001\002\000\010" +
    "\003\ufeb7\016\ufeb7\026\ufeb7\001\002\000\010\003\ufeb5\016" +
    "\ufeb5\026\ufeb5\001\002\000\004\016\u0184\001\002\000\004" +
    "\076\u0185\001\002\000\004\060\u0186\001\002\000\060\003" +
    "\ufec3\011\ufec3\012\ufec3\013\ufec3\014\ufec3\016\ufec3\017\ufec3" +
    "\024\ufec3\026\ufec3\030\ufec3\031\ufec3\033\ufec3\034\ufec3\047" +
    "\ufec3\055\ufec3\056\ufec3\076\ufec3\077\ufec3\100\ufec3\102\ufec3" +
    "\103\ufec3\104\ufec3\105\ufec3\001\002\000\004\077\u0188\001" +
    "\002\000\004\060\u0189\001\002\000\014\003\uffce\020\uffce" +
    "\023\uffce\036\uffce\077\uffce\001\002\000\024\047\037\055" +
    "\047\056\043\077\045\100\034\102\051\103\035\104\036" +
    "\105\044\001\002\000\026\003\u018d\047\037\055\047\056" +
    "\043\077\045\100\034\102\051\103\035\104\036\105\044" +
    "\001\002\000\042\003\u0191\040\067\041\056\042\060\043" +
    "\064\044\065\045\055\046\066\047\063\050\061\051\070" +
    "\052\057\053\054\054\071\057\u0192\073\062\001\002\000" +
    "\004\057\uff1e\001\002\000\004\057\u018f\001\002\000\004" +
    "\060\u0190\001\002\000\060\003\uff1d\011\uff1d\012\uff1d\013" +
    "\uff1d\014\uff1d\016\uff1d\017\uff1d\024\uff1d\026\uff1d\030\uff1d" +
    "\031\uff1d\033\uff1d\034\uff1d\047\uff1d\055\uff1d\056\uff1d\076" +
    "\uff1d\077\uff1d\100\uff1d\102\uff1d\103\uff1d\104\uff1d\105\uff1d" +
    "\001\002\000\004\060\uff1c\001\002\000\006\003\u0193\060" +
    "\u0194\001\002\000\060\003\uff1a\011\uff1a\012\uff1a\013\uff1a" +
    "\014\uff1a\016\uff1a\017\uff1a\024\uff1a\026\uff1a\030\uff1a\031" +
    "\uff1a\033\uff1a\034\uff1a\047\uff1a\055\uff1a\056\uff1a\076\uff1a" +
    "\077\uff1a\100\uff1a\102\uff1a\103\uff1a\104\uff1a\105\uff1a\001" +
    "\002\000\060\003\uff20\011\uff20\012\uff20\013\uff20\014\uff20" +
    "\016\uff20\017\uff20\024\uff20\026\uff20\030\uff20\031\uff20\033" +
    "\uff20\034\uff20\047\uff20\055\uff20\056\uff20\076\uff20\077\uff20" +
    "\100\uff20\102\uff20\103\uff20\104\uff20\105\uff20\001\002\000" +
    "\004\060\u0196\001\002\000\060\003\uff1b\011\uff1b\012\uff1b" +
    "\013\uff1b\014\uff1b\016\uff1b\017\uff1b\024\uff1b\026\uff1b\030" +
    "\uff1b\031\uff1b\033\uff1b\034\uff1b\047\uff1b\055\uff1b\056\uff1b" +
    "\076\uff1b\077\uff1b\100\uff1b\102\uff1b\103\uff1b\104\uff1b\105" +
    "\uff1b\001\002\000\040\040\067\041\056\042\060\043\064" +
    "\044\065\045\055\046\066\047\063\050\061\051\070\052" +
    "\057\053\054\054\071\057\u0198\073\062\001\002\000\004" +
    "\060\u0199\001\002\000\060\003\uff1f\011\uff1f\012\uff1f\013" +
    "\uff1f\014\uff1f\016\uff1f\017\uff1f\024\uff1f\026\uff1f\030\uff1f" +
    "\031\uff1f\033\uff1f\034\uff1f\047\uff1f\055\uff1f\056\uff1f\076" +
    "\uff1f\077\uff1f\100\uff1f\102\uff1f\103\uff1f\104\uff1f\105\uff1f" +
    "\001\002\000\022\003\u019e\004\126\005\131\006\132\010" +
    "\127\022\u01a0\027\u019b\032\u019c\001\002\000\014\003\uff65" +
    "\004\uff65\005\uff65\006\uff65\010\uff65\001\002\000\014\003" +
    "\uff64\004\uff64\005\uff64\006\uff64\010\uff64\001\002\000\014" +
    "\003\u01a5\004\126\005\131\006\132\010\127\001\002\000" +
    "\022\003\uff28\004\uff6e\005\uff6e\006\uff6e\010\uff6e\037\uff28" +
    "\057\uff28\060\uff28\001\002\000\012\003\uff29\037\uff29\057" +
    "\uff29\060\uff29\001\002\000\014\003\uff63\004\uff63\005\uff63" +
    "\006\uff63\010\uff63\001\002\000\012\004\126\005\131\006" +
    "\132\010\127\001\002\000\004\037\u01a3\001\002\000\024" +
    "\047\037\055\047\056\043\077\045\100\034\102\051\103" +
    "\035\104\036\105\044\001\002\000\044\003\uff6d\040\067" +
    "\041\056\042\060\043\064\044\065\045\055\046\066\047" +
    "\063\050\061\051\070\052\057\053\054\054\071\057\uff6d" +
    "\060\uff6d\073\062\001\002\000\012\003\uff68\037\uff6c\057" +
    "\uff68\060\uff68\001\002\000\012\003\uff69\037\u01a7\057\uff69" +
    "\060\uff69\001\002\000\026\003\u01a9\047\037\055\047\056" +
    "\043\077\045\100\034\102\051\103\035\104\036\105\044" +
    "\001\002\000\044\003\uff6f\040\067\041\056\042\060\043" +
    "\064\044\065\045\055\046\066\047\063\050\061\051\070" +
    "\052\057\053\054\054\071\057\uff6f\060\uff6f\073\062\001" +
    "\002\000\010\003\uff6a\057\uff6a\060\uff6a\001\002\000\004" +
    "\037\u01ab\001\002\000\024\047\037\055\047\056\043\077" +
    "\045\100\034\102\051\103\035\104\036\105\044\001\002" +
    "\000\044\003\uff6b\040\067\041\056\042\060\043\064\044" +
    "\065\045\055\046\066\047\063\050\061\051\070\052\057" +
    "\053\054\054\071\057\uff6b\060\uff6b\073\062\001\002\000" +
    "\010\057\uffcd\060\uffcd\077\uffcd\001\002\000\012\003\uff70" +
    "\057\uff70\060\uff70\077\013\001\002\000\010\003\u01b0\057" +
    "\u01b1\060\123\001\002\000\004\024\uffcb\001\002\000\006" +
    "\003\u01b2\024\u01b3\001\002\000\012\004\uffc9\005\uffc9\006" +
    "\uffc9\010\uffc9\001\002\000\014\003\u01b4\004\126\005\131" +
    "\006\132\010\127\001\002\000\004\035\uffb5\001\002\000" +
    "\006\003\u01b6\035\u01b7\001\002\000\012\020\uffc7\023\uffc7" +
    "\036\uffb3\077\uffc7\001\002\000\014\003\u01b9\020\022\023" +
    "\014\036\u01ba\077\013\001\002\000\006\003\u01df\036\u01e0" +
    "\001\002\000\050\011\uffb1\014\uffb1\016\uffa7\017\uffb1\024" +
    "\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\047\uffb1\055\uffb1" +
    "\056\uffb1\076\uffb1\077\uffb1\100\uffb1\102\uffb1\103\uffb1\104" +
    "\uffb1\105\uffb1\001\002\000\052\003\u01bc\011\152\014\143" +
    "\016\u01bd\017\151\024\160\030\162\031\150\033\136\034" +
    "\146\047\037\055\047\056\043\076\141\077\153\100\034" +
    "\102\051\103\035\104\036\105\044\001\002\000\006\003" +
    "\u01cb\016\u01cc\001\002\000\006\016\uffaf\077\uffa5\001\002" +
    "\000\006\003\u01bf\077\u01be\001\002\000\006\003\u01c2\060" +
    "\u01c3\001\002\000\004\060\uffa3\001\002\000\004\060\u01c1" +
    "\001\002\000\014\003\uffa2\020\uffa2\023\uffa2\036\uffa2\077" +
    "\uffa2\001\002\000\014\003\uffa1\020\uffa1\023\uffa1\036\uffa1" +
    "\077\uffa1\001\002\000\014\003\uffa8\020\uffa8\023\uffa8\036" +
    "\uffa8\077\uffa8\001\002\000\004\077\u01c9\001\002\000\004" +
    "\016\u01c6\001\002\000\004\077\u01c7\001\002\000\004\060" +
    "\u01c8\001\002\000\014\003\uffae\020\uffae\023\uffae\036\uffae" +
    "\077\uffae\001\002\000\004\060\u01ca\001\002\000\014\003" +
    "\uffa4\020\uffa4\023\uffa4\036\uffa4\077\uffa4\001\002\000\004" +
    "\077\uffad\001\002\000\006\003\u01ce\077\u01cd\001\002\000" +
    "\006\003\u01d1\060\u01d2\001\002\000\004\060\uffab\001\002" +
    "\000\004\060\u01d0\001\002\000\014\003\uffaa\020\uffaa\023" +
    "\uffaa\036\uffaa\077\uffaa\001\002\000\014\003\uffa9\020\uffa9" +
    "\023\uffa9\036\uffa9\077\uffa9\001\002\000\014\003\uffb6\020" +
    "\uffb6\023\uffb6\036\uffb6\077\uffb6\001\002\000\004\077\u01d4" +
    "\001\002\000\004\060\u01d5\001\002\000\014\003\uffac\020" +
    "\uffac\023\uffac\036\uffac\077\uffac\001\002\000\004\016\u01dc" +
    "\001\002\000\046\011\152\014\143\017\151\024\160\030" +
    "\162\031\150\033\136\034\146\047\037\055\047\056\043" +
    "\076\141\077\153\100\034\102\051\103\035\104\036\105" +
    "\044\001\002\000\004\016\u01d9\001\002\000\004\077\u01da" +
    "\001\002\000\004\060\u01db\001\002\000\014\003\uffb0\020" +
    "\uffb0\023\uffb0\036\uffb0\077\uffb0\001\002\000\004\077\u01dd" +
    "\001\002\000\004\060\u01de\001\002\000\014\003\uffa6\020" +
    "\uffa6\023\uffa6\036\uffa6\077\uffa6\001\002\000\050\011\uffc5" +
    "\014\uffc5\016\uffbb\017\uffc5\024\uffc5\030\uffc5\031\uffc5\033" +
    "\uffc5\034\uffc5\047\uffc5\055\uffc5\056\uffc5\076\uffc5\077\uffc5" +
    "\100\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\001\002\000" +
    "\052\003\u01e2\011\152\014\143\016\u01e3\017\151\024\160" +
    "\030\162\031\150\033\136\034\146\047\037\055\047\056" +
    "\043\076\141\077\153\100\034\102\051\103\035\104\036" +
    "\105\044\001\002\000\006\003\u01ee\016\u01ef\001\002\000" +
    "\004\016\uffc3\001\002\000\006\003\u01e5\077\u01e4\001\002" +
    "\000\006\003\u01e8\060\u01e9\001\002\000\004\060\uffb9\001" +
    "\002\000\004\060\u01e7\001\002\000\014\003\uffb8\020\uffb8" +
    "\023\uffb8\036\uffb8\077\uffb8\001\002\000\014\003\uffb7\020" +
    "\uffb7\023\uffb7\036\uffb7\077\uffb7\001\002\000\014\003\uffbc" +
    "\020\uffbc\023\uffbc\036\uffbc\077\uffbc\001\002\000\004\016" +
    "\u01eb\001\002\000\004\077\u01ec\001\002\000\004\060\u01ed" +
    "\001\002\000\014\003\uffc2\020\uffc2\023\uffc2\036\uffc2\077" +
    "\uffc2\001\002\000\004\077\uffc1\001\002\000\006\003\u01f1" +
    "\077\u01f0\001\002\000\006\003\u01f4\060\u01f5\001\002\000" +
    "\004\060\uffbf\001\002\000\004\060\u01f3\001\002\000\014" +
    "\003\uffbe\020\uffbe\023\uffbe\036\uffbe\077\uffbe\001\002\000" +
    "\014\003\uffbd\020\uffbd\023\uffbd\036\uffbd\077\uffbd\001\002" +
    "\000\014\003\uffd0\020\uffd0\023\uffd0\036\uffd0\077\uffd0\001" +
    "\002\000\004\077\u01f7\001\002\000\004\060\u01f8\001\002" +
    "\000\014\003\uffc0\020\uffc0\023\uffc0\036\uffc0\077\uffc0\001" +
    "\002\000\046\011\152\014\143\017\151\024\160\030\162" +
    "\031\150\033\136\034\146\047\037\055\047\056\043\076" +
    "\141\077\153\100\034\102\051\103\035\104\036\105\044" +
    "\001\002\000\004\016\u01fb\001\002\000\004\077\u01fc\001" +
    "\002\000\004\060\u01fd\001\002\000\014\003\uffba\020\uffba" +
    "\023\uffba\036\uffba\077\uffba\001\002\000\004\016\u01ff\001" +
    "\002\000\004\077\u0200\001\002\000\004\060\u0201\001\002" +
    "\000\014\003\uffc4\020\uffc4\023\uffc4\036\uffc4\077\uffc4\001" +
    "\002\000\010\020\022\023\014\077\013\001\002\000\004" +
    "\036\u0204\001\002\000\046\011\152\014\143\017\151\024" +
    "\160\030\162\031\150\033\136\034\146\047\037\055\047" +
    "\056\043\076\141\077\153\100\034\102\051\103\035\104" +
    "\036\105\044\001\002\000\004\016\u0206\001\002\000\004" +
    "\077\u0207\001\002\000\004\060\u0208\001\002\000\014\003" +
    "\uffb2\020\uffb2\023\uffb2\036\uffb2\077\uffb2\001\002\000\004" +
    "\036\u020a\001\002\000\046\011\152\014\143\017\151\024" +
    "\160\030\162\031\150\033\136\034\146\047\037\055\047" +
    "\056\043\076\141\077\153\100\034\102\051\103\035\104" +
    "\036\105\044\001\002\000\004\016\u020c\001\002\000\004" +
    "\077\u020d\001\002\000\004\060\u020e\001\002\000\014\003" +
    "\uffc6\020\uffc6\023\uffc6\036\uffc6\077\uffc6\001\002\000\004" +
    "\035\u0210\001\002\000\004\036\u0211\001\002\000\046\011" +
    "\152\014\143\017\151\024\160\030\162\031\150\033\136" +
    "\034\146\047\037\055\047\056\043\076\141\077\153\100" +
    "\034\102\051\103\035\104\036\105\044\001\002\000\004" +
    "\016\u0213\001\002\000\004\077\u0214\001\002\000\004\060" +
    "\u0215\001\002\000\014\003\uffb4\020\uffb4\023\uffb4\036\uffb4" +
    "\077\uffb4\001\002\000\012\004\126\005\131\006\132\010" +
    "\127\001\002\000\004\035\u0218\001\002\000\010\020\022" +
    "\023\014\077\013\001\002\000\004\036\u021a\001\002\000" +
    "\046\011\152\014\143\017\151\024\160\030\162\031\150" +
    "\033\136\034\146\047\037\055\047\056\043\076\141\077" +
    "\153\100\034\102\051\103\035\104\036\105\044\001\002" +
    "\000\004\016\u021c\001\002\000\004\077\u021d\001\002\000" +
    "\004\060\u021e\001\002\000\014\003\uffc8\020\uffc8\023\uffc8" +
    "\036\uffc8\077\uffc8\001\002\000\004\024\u0220\001\002\000" +
    "\012\004\126\005\131\006\132\010\127\001\002\000\004" +
    "\035\u0222\001\002\000\010\020\022\023\014\077\013\001" +
    "\002\000\004\036\u0224\001\002\000\046\011\152\014\143" +
    "\017\151\024\160\030\162\031\150\033\136\034\146\047" +
    "\037\055\047\056\043\076\141\077\153\100\034\102\051" +
    "\103\035\104\036\105\044\001\002\000\004\016\u0226\001" +
    "\002\000\004\077\u0227\001\002\000\004\060\u0228\001\002" +
    "\000\014\003\uffca\020\uffca\023\uffca\036\uffca\077\uffca\001" +
    "\002\000\010\057\uff70\060\uff70\077\013\001\002\000\006" +
    "\057\u022b\060\123\001\002\000\004\024\u022c\001\002\000" +
    "\012\004\126\005\131\006\132\010\127\001\002\000\004" +
    "\035\u022e\001\002\000\010\020\022\023\014\077\013\001" +
    "\002\000\004\036\u0230\001\002\000\046\011\152\014\143" +
    "\017\151\024\160\030\162\031\150\033\136\034\146\047" +
    "\037\055\047\056\043\076\141\077\153\100\034\102\051" +
    "\103\035\104\036\105\044\001\002\000\004\016\u0232\001" +
    "\002\000\004\077\u0233\001\002\000\004\060\u0234\001\002" +
    "\000\014\003\uffcc\020\uffcc\023\uffcc\036\uffcc\077\uffcc\001" +
    "\002\000\006\003\uffd1\036\uffd1\001\002\000\014\003\uffd2" +
    "\020\022\023\014\036\uffd2\077\013\001\002\000\006\003" +
    "\uffd7\036\uffd7\001\002\000\006\003\uffd6\036\uffd6\001\002" +
    "\000\046\011\152\014\143\017\151\024\160\030\162\031" +
    "\150\033\136\034\146\047\037\055\047\056\043\076\141" +
    "\077\153\100\034\102\051\103\035\104\036\105\044\001" +
    "\002\000\004\016\u023b\001\002\000\004\077\u023c\001\002" +
    "\000\004\060\u023d\001\002\000\004\002\ufffe\001\002\000" +
    "\006\003\uffd5\036\uffd5\001\002\000\014\003\u0240\004\126" +
    "\005\131\006\132\010\127\001\002\000\006\003\uff28\060" +
    "\uff28\001\002\000\006\003\u024e\056\u024f\001\002\000\004" +
    "\056\uff9f\001\002\000\004\056\u0244\001\002\000\010\057" +
    "\uff70\060\uff70\077\013\001\002\000\006\057\u0246\060\123" +
    "\001\002\000\004\035\u0247\001\002\000\010\020\022\023" +
    "\014\077\013\001\002\000\004\036\u0249\001\002\000\046" +
    "\011\152\014\143\017\151\024\160\030\162\031\150\033" +
    "\136\034\146\047\037\055\047\056\043\076\141\077\153" +
    "\100\034\102\051\103\035\104\036\105\044\001\002\000" +
    "\004\016\u024b\001\002\000\004\077\u024c\001\002\000\004" +
    "\060\u024d\001\002\000\014\003\uff9e\020\uff9e\023\uff9e\036" +
    "\uff9e\077\uff9e\001\002\000\010\057\uff9d\060\uff9d\077\uff9d" +
    "\001\002\000\012\003\uff70\057\uff70\060\uff70\077\013\001" +
    "\002\000\010\003\u0251\057\u0252\060\123\001\002\000\004" +
    "\035\uff9b\001\002\000\006\003\u0253\035\u0254\001\002\000" +
    "\012\020\uff99\023\uff99\036\uff85\077\uff99\001\002\000\014" +
    "\003\u0256\020\022\023\014\036\u0257\077\013\001\002\000" +
    "\006\003\u027c\036\u027d\001\002\000\050\011\uff83\014\uff83" +
    "\016\uff79\017\uff83\024\uff83\030\uff83\031\uff83\033\uff83\034" +
    "\uff83\047\uff83\055\uff83\056\uff83\076\uff83\077\uff83\100\uff83" +
    "\102\uff83\103\uff83\104\uff83\105\uff83\001\002\000\052\003" +
    "\u0259\011\152\014\143\016\u025a\017\151\024\160\030\162" +
    "\031\150\033\136\034\146\047\037\055\047\056\043\076" +
    "\141\077\153\100\034\102\051\103\035\104\036\105\044" +
    "\001\002\000\006\003\u0268\016\u0269\001\002\000\006\016" +
    "\uff81\077\uff77\001\002\000\006\003\u025c\077\u025b\001\002" +
    "\000\006\003\u025f\060\u0260\001\002\000\004\060\uff75\001" +
    "\002\000\004\060\u025e\001\002\000\014\003\uff74\020\uff74" +
    "\023\uff74\036\uff74\077\uff74\001\002\000\014\003\uff73\020" +
    "\uff73\023\uff73\036\uff73\077\uff73\001\002\000\014\003\uff7a" +
    "\020\uff7a\023\uff7a\036\uff7a\077\uff7a\001\002\000\004\077" +
    "\u0266\001\002\000\004\016\u0263\001\002\000\004\077\u0264" +
    "\001\002\000\004\060\u0265\001\002\000\014\003\uff80\020" +
    "\uff80\023\uff80\036\uff80\077\uff80\001\002\000\004\060\u0267" +
    "\001\002\000\014\003\uff76\020\uff76\023\uff76\036\uff76\077" +
    "\uff76\001\002\000\004\077\uff7f\001\002\000\006\003\u026b" +
    "\077\u026a\001\002\000\006\003\u026e\060\u026f\001\002\000" +
    "\004\060\uff7d\001\002\000\004\060\u026d\001\002\000\014" +
    "\003\uff7c\020\uff7c\023\uff7c\036\uff7c\077\uff7c\001\002\000" +
    "\014\003\uff7b\020\uff7b\023\uff7b\036\uff7b\077\uff7b\001\002" +
    "\000\014\003\uff86\020\uff86\023\uff86\036\uff86\077\uff86\001" +
    "\002\000\004\077\u0271\001\002\000\004\060\u0272\001\002" +
    "\000\014\003\uff7e\020\uff7e\023\uff7e\036\uff7e\077\uff7e\001" +
    "\002\000\004\016\u0279\001\002\000\046\011\152\014\143" +
    "\017\151\024\160\030\162\031\150\033\136\034\146\047" +
    "\037\055\047\056\043\076\141\077\153\100\034\102\051" +
    "\103\035\104\036\105\044\001\002\000\004\016\u0276\001" +
    "\002\000\004\077\u0277\001\002\000\004\060\u0278\001\002" +
    "\000\014\003\uff82\020\uff82\023\uff82\036\uff82\077\uff82\001" +
    "\002\000\004\077\u027a\001\002\000\004\060\u027b\001\002" +
    "\000\014\003\uff78\020\uff78\023\uff78\036\uff78\077\uff78\001" +
    "\002\000\050\011\uff97\014\uff97\016\uff8d\017\uff97\024\uff97" +
    "\030\uff97\031\uff97\033\uff97\034\uff97\047\uff97\055\uff97\056" +
    "\uff97\076\uff97\077\uff97\100\uff97\102\uff97\103\uff97\104\uff97" +
    "\105\uff97\001\002\000\052\003\u027f\011\152\014\143\016" +
    "\u0280\017\151\024\160\030\162\031\150\033\136\034\146" +
    "\047\037\055\047\056\043\076\141\077\153\100\034\102" +
    "\051\103\035\104\036\105\044\001\002\000\006\003\u028e" +
    "\016\u028f\001\002\000\006\016\uff95\077\uff8b\001\002\000" +
    "\006\003\u0282\077\u0281\001\002\000\006\003\u0285\060\u0286" +
    "\001\002\000\004\060\uff89\001\002\000\004\060\u0284\001" +
    "\002\000\014\003\uff88\020\uff88\023\uff88\036\uff88\077\uff88" +
    "\001\002\000\014\003\uff87\020\uff87\023\uff87\036\uff87\077" +
    "\uff87\001\002\000\014\003\uff8e\020\uff8e\023\uff8e\036\uff8e" +
    "\077\uff8e\001\002\000\004\077\u028c\001\002\000\004\016" +
    "\u0289\001\002\000\004\077\u028a\001\002\000\004\060\u028b" +
    "\001\002\000\014\003\uff94\020\uff94\023\uff94\036\uff94\077" +
    "\uff94\001\002\000\004\060\u028d\001\002\000\014\003\uff8a" +
    "\020\uff8a\023\uff8a\036\uff8a\077\uff8a\001\002\000\004\077" +
    "\uff93\001\002\000\006\003\u0291\077\u0290\001\002\000\006" +
    "\003\u0294\060\u0295\001\002\000\004\060\uff91\001\002\000" +
    "\004\060\u0293\001\002\000\014\003\uff90\020\uff90\023\uff90" +
    "\036\uff90\077\uff90\001\002\000\014\003\uff8f\020\uff8f\023" +
    "\uff8f\036\uff8f\077\uff8f\001\002\000\014\003\uffa0\020\uffa0" +
    "\023\uffa0\036\uffa0\077\uffa0\001\002\000\004\077\u0297\001" +
    "\002\000\004\060\u0298\001\002\000\014\003\uff92\020\uff92" +
    "\023\uff92\036\uff92\077\uff92\001\002\000\004\016\u029f\001" +
    "\002\000\046\011\152\014\143\017\151\024\160\030\162" +
    "\031\150\033\136\034\146\047\037\055\047\056\043\076" +
    "\141\077\153\100\034\102\051\103\035\104\036\105\044" +
    "\001\002\000\004\016\u029c\001\002\000\004\077\u029d\001" +
    "\002\000\004\060\u029e\001\002\000\014\003\uff96\020\uff96" +
    "\023\uff96\036\uff96\077\uff96\001\002\000\004\077\u02a0\001" +
    "\002\000\004\060\u02a1\001\002\000\014\003\uff8c\020\uff8c" +
    "\023\uff8c\036\uff8c\077\uff8c\001\002\000\004\036\u02aa\001" +
    "\002\000\010\020\022\023\014\077\013\001\002\000\004" +
    "\036\u02a5\001\002\000\046\011\152\014\143\017\151\024" +
    "\160\030\162\031\150\033\136\034\146\047\037\055\047" +
    "\056\043\076\141\077\153\100\034\102\051\103\035\104" +
    "\036\105\044\001\002\000\004\016\u02a7\001\002\000\004" +
    "\077\u02a8\001\002\000\004\060\u02a9\001\002\000\014\003" +
    "\uff98\020\uff98\023\uff98\036\uff98\077\uff98\001\002\000\046" +
    "\011\152\014\143\017\151\024\160\030\162\031\150\033" +
    "\136\034\146\047\037\055\047\056\043\076\141\077\153" +
    "\100\034\102\051\103\035\104\036\105\044\001\002\000" +
    "\004\016\u02ac\001\002\000\004\077\u02ad\001\002\000\004" +
    "\060\u02ae\001\002\000\014\003\uff84\020\uff84\023\uff84\036" +
    "\uff84\077\uff84\001\002\000\004\035\u02b0\001\002\000\010" +
    "\020\022\023\014\077\013\001\002\000\004\036\u02b2\001" +
    "\002\000\046\011\152\014\143\017\151\024\160\030\162" +
    "\031\150\033\136\034\146\047\037\055\047\056\043\076" +
    "\141\077\153\100\034\102\051\103\035\104\036\105\044" +
    "\001\002\000\004\016\u02b4\001\002\000\004\077\u02b5\001" +
    "\002\000\004\060\u02b6\001\002\000\014\003\uff9a\020\uff9a" +
    "\023\uff9a\036\uff9a\077\uff9a\001\002\000\010\057\uff70\060" +
    "\uff70\077\013\001\002\000\006\057\u02b9\060\123\001\002" +
    "\000\004\035\u02ba\001\002\000\010\020\022\023\014\077" +
    "\013\001\002\000\004\036\u02bc\001\002\000\046\011\152" +
    "\014\143\017\151\024\160\030\162\031\150\033\136\034" +
    "\146\047\037\055\047\056\043\076\141\077\153\100\034" +
    "\102\051\103\035\104\036\105\044\001\002\000\004\016" +
    "\u02be\001\002\000\004\077\u02bf\001\002\000\004\060\u02c0" +
    "\001\002\000\014\003\uff9c\020\uff9c\023\uff9c\036\uff9c\077" +
    "\uff9c\001\002\000\006\003\u02c3\077\013\001\002\000\004" +
    "\063\uff33\001\002\000\004\063\uff32\001\002\000\010\020" +
    "\ufffd\023\ufffd\077\ufffd\001\002\000\014\003\u02c7\020\022" +
    "\023\014\036\u02c8\077\013\001\002\000\006\003\u02ef\036" +
    "\u02f0\001\002\000\052\011\uffe7\014\uffe7\016\uffdf\017\uffe7" +
    "\024\uffe7\030\uffe7\031\uffe7\033\uffe7\034\uffe7\036\ufffb\047" +
    "\uffe7\055\uffe7\056\uffe7\076\uffe7\077\uffe7\100\uffe7\102\uffe7" +
    "\103\uffe7\104\uffe7\105\uffe7\001\002\000\052\003\u02ca\011" +
    "\152\014\143\016\u02cb\017\151\024\160\030\162\031\150" +
    "\033\136\034\146\047\037\055\047\056\043\076\141\077" +
    "\153\100\034\102\051\103\035\104\036\105\044\001\002" +
    "\000\006\003\u02d5\016\u02d6\001\002\000\004\077\uffdd\001" +
    "\002\000\006\003\u02cd\077\u02cc\001\002\000\006\003\u02d0" +
    "\060\u02d1\001\002\000\004\060\uffdb\001\002\000\004\060" +
    "\u02cf\001\002\000\004\002\uffda\001\002\000\004\002\uffd9" +
    "\001\002\000\004\002\uffe0\001\002\000\004\077\u02d3\001" +
    "\002\000\004\060\u02d4\001\002\000\004\002\uffdc\001\002" +
    "\000\004\077\uffe5\001\002\000\006\003\u02d8\077\u02d7\001" +
    "\002\000\006\003\u02db\060\u02dc\001\002\000\004\060\uffe3" +
    "\001\002\000\004\060\u02da\001\002\000\004\002\uffe2\001" +
    "\002\000\004\002\uffe1\001\002\000\004\002\uffe8\001\002" +
    "\000\004\077\u02de\001\002\000\004\060\u02df\001\002\000" +
    "\004\002\uffe4\001\002\000\004\036\u02ea\001\002\000\046" +
    "\011\152\014\143\017\151\024\160\030\162\031\150\033" +
    "\136\034\146\047\037\055\047\056\043\076\141\077\153" +
    "\100\034\102\051\103\035\104\036\105\044\001\002\000" +
    "\004\016\u02e3\001\002\000\004\077\u02e4\001\002\000\004" +
    "\060\u02e5\001\002\000\004\002\uffde\001\002\000\004\016" +
    "\u02e7\001\002\000\004\077\u02e8\001\002\000\004\060\u02e9" +
    "\001\002\000\004\002\uffe6\001\002\000\046\011\152\014" +
    "\143\017\151\024\160\030\162\031\150\033\136\034\146" +
    "\047\037\055\047\056\043\076\141\077\153\100\034\102" +
    "\051\103\035\104\036\105\044\001\002\000\004\016\u02ec" +
    "\001\002\000\004\077\u02ed\001\002\000\004\060\u02ee\001" +
    "\002\000\004\002\ufffa\001\002\000\046\011\ufff9\014\ufff9" +
    "\017\ufff9\024\ufff9\030\ufff9\031\ufff9\033\ufff9\034\ufff9\047" +
    "\ufff9\055\ufff9\056\ufff9\076\ufff9\077\ufff9\100\ufff9\102\ufff9" +
    "\103\ufff9\104\ufff9\105\ufff9\001\002\000\052\003\u02f2\011" +
    "\152\014\143\016\u02f3\017\151\024\160\030\162\031\150" +
    "\033\136\034\146\047\037\055\047\056\043\076\141\077" +
    "\153\100\034\102\051\103\035\104\036\105\044\001\002" +
    "\000\006\003\u0302\016\u0303\001\002\000\006\016\ufff7\077" +
    "\uffee\001\002\000\006\003\u02f5\077\u02f4\001\002\000\006" +
    "\003\u02f8\060\u02f9\001\002\000\004\060\uffec\001\002\000" +
    "\004\060\u02f7\001\002\000\004\002\uffeb\001\002\000\004" +
    "\002\uffea\001\002\000\006\002\uffef\003\u02fa\001\002\000" +
    "\004\002\uffe9\001\002\000\004\077\u0300\001\002\000\004" +
    "\016\u02fd\001\002\000\004\077\u02fe\001\002\000\004\060" +
    "\u02ff\001\002\000\004\002\ufff6\001\002\000\004\060\u0301" +
    "\001\002\000\004\002\uffed\001\002\000\004\077\ufff5\001" +
    "\002\000\006\003\u0305\077\u0304\001\002\000\006\003\u0308" +
    "\060\u0309\001\002\000\004\060\ufff3\001\002\000\004\060" +
    "\u0307\001\002\000\004\002\ufff2\001\002\000\004\002\ufff1" +
    "\001\002\000\006\002\001\003\u030a\001\002\000\004\002" +
    "\ufff0\001\002\000\004\077\u030c\001\002\000\004\060\u030d" +
    "\001\002\000\004\002\ufff4\001\002\000\046\011\152\014" +
    "\143\017\151\024\160\030\162\031\150\033\136\034\146" +
    "\047\037\055\047\056\043\076\141\077\153\100\034\102" +
    "\051\103\035\104\036\105\044\001\002\000\004\016\u0310" +
    "\001\002\000\004\077\u0311\001\002\000\004\060\u0312\001" +
    "\002\000\004\002\ufff8\001\002\000\010\020\022\023\014" +
    "\077\013\001\002\000\004\036\u0315\001\002\000\046\011" +
    "\152\014\143\017\151\024\160\030\162\031\150\033\136" +
    "\034\146\047\037\055\047\056\043\076\141\077\153\100" +
    "\034\102\051\103\035\104\036\105\044\001\002\000\004" +
    "\016\u0317\001\002\000\004\077\u0318\001\002\000\004\060" +
    "\u0319\001\002\000\004\002\ufffc\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0318\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\010\001\001\000\002\001\001\000\014\015\014\020" +
    "\020\037\016\040\017\041\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\014\020" +
    "\020\037\u023d\040\017\041\015\001\001\000\002\001\001" +
    "\000\014\015\014\020\020\037\u0237\040\017\041\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\024\001\001\000\002\001\001\000\012\015" +
    "\026\020\030\042\027\043\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\045\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\120\004\051\005\041\006\047\007\037" +
    "\011\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\116\004\051\005\041\006\047" +
    "\007\037\011\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\052\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\106\004\051\005\041\006\047\007\037\011\040\001" +
    "\001\000\016\003\105\004\051\005\041\006\047\007\037" +
    "\011\040\001\001\000\016\003\104\004\051\005\041\006" +
    "\047\007\037\011\040\001\001\000\016\003\103\004\051" +
    "\005\041\006\047\007\037\011\040\001\001\000\016\003" +
    "\102\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\016\003\101\004\051\005\041\006\047\007\037\011" +
    "\040\001\001\000\016\003\100\004\051\005\041\006\047" +
    "\007\037\011\040\001\001\000\016\003\077\004\051\005" +
    "\041\006\047\007\037\011\040\001\001\000\016\003\076" +
    "\004\051\005\041\006\047\007\037\011\040\001\001\000" +
    "\016\003\075\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\016\003\074\004\051\005\041\006\047\007" +
    "\037\011\040\001\001\000\016\003\073\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\016\003\072\004" +
    "\051\005\041\006\047\007\037\011\040\001\001\000\016" +
    "\003\071\004\051\005\041\006\047\007\037\011\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\110\004\051\005\041" +
    "\006\047\007\037\010\112\011\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\110\004\051\005\041\006\047\007\037\010" +
    "\115\011\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\026\020\030\043\123\001\001\000\002\001\001" +
    "\000\004\016\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\014\020\020\037\133\040\017\041\015\001" +
    "\001\000\002\001\001\000\046\003\153\004\051\005\041" +
    "\006\047\007\037\011\040\012\136\013\156\017\146\021" +
    "\162\022\163\025\144\026\137\027\143\030\141\031\155" +
    "\032\154\045\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\u015e\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\153\004\051\005" +
    "\041\006\047\007\037\011\040\012\u0100\013\156\017\146" +
    "\021\162\022\163\025\144\026\137\027\143\030\141\031" +
    "\155\032\154\045\160\001\001\000\002\001\001\000\016" +
    "\003\244\004\051\005\041\006\047\007\037\011\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\153\004\051\005\041\006" +
    "\047\007\037\011\040\012\233\013\156\017\146\021\162" +
    "\022\163\025\144\026\137\027\143\030\141\031\155\032" +
    "\154\045\160\001\001\000\016\003\230\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\002\001\001\000" +
    "\016\003\164\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\153\004\051\005\041\006\047\007\037" +
    "\011\040\012\176\013\156\017\146\021\162\022\163\025" +
    "\144\026\137\027\143\030\141\031\155\032\154\045\160" +
    "\001\001\000\046\003\153\004\051\005\041\006\047\007" +
    "\037\011\040\012\167\013\156\017\146\021\162\022\163" +
    "\025\144\026\137\027\143\030\141\031\155\032\154\045" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\161\207" +
    "\001\001\000\002\001\001\000\004\162\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\157\225\001\001\000\002\001" +
    "\001\000\004\160\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\236\004\051" +
    "\005\041\006\047\007\037\011\040\001\001\000\002\001" +
    "\001\000\004\136\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\153\004\051\005\041\006\047\007\037" +
    "\011\040\012\253\013\156\017\146\021\162\022\163\025" +
    "\144\026\137\027\143\030\141\031\155\032\154\045\160" +
    "\001\001\000\046\003\153\004\051\005\041\006\047\007" +
    "\037\011\040\012\247\013\156\017\146\021\162\022\163" +
    "\025\144\026\137\027\143\030\141\031\155\032\154\045" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\265\024\263\001" +
    "\001\000\004\144\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\145" +
    "\366\001\001\000\046\003\153\004\051\005\041\006\047" +
    "\007\037\011\040\012\345\013\156\017\146\021\162\022" +
    "\163\025\144\026\137\027\143\030\141\031\155\032\154" +
    "\045\160\001\001\000\006\023\344\024\263\001\001\000" +
    "\016\003\332\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\146" +
    "\273\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\153\004\051\005\041\006\047\007\037\011\040\012\311" +
    "\013\156\017\146\021\162\022\163\025\144\026\137\027" +
    "\143\030\141\031\155\032\154\045\160\001\001\000\004" +
    "\152\306\001\001\000\002\001\001\000\004\153\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\154\313\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\155\327\001\001" +
    "\000\002\001\001\000\004\156\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\143\334\001\001" +
    "\000\002\001\001\000\046\003\153\004\051\005\041\006" +
    "\047\007\037\011\040\012\336\013\156\017\146\021\162" +
    "\022\163\025\144\026\137\027\143\030\141\031\155\032" +
    "\154\045\160\001\001\000\002\001\001\000\046\003\153" +
    "\004\051\005\041\006\047\007\037\011\040\012\342\013" +
    "\156\017\146\021\162\022\163\025\144\026\137\027\143" +
    "\030\141\031\155\032\154\045\160\001\001\000\046\003" +
    "\153\004\051\005\041\006\047\007\037\011\040\012\341" +
    "\013\156\017\146\021\162\022\163\025\144\026\137\027" +
    "\143\030\141\031\155\032\154\045\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\147\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\150\363\001\001\000\002\001\001\000\004" +
    "\151\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\376" +
    "\004\051\005\041\006\047\007\037\011\040\001\001\000" +
    "\016\003\373\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\172\u0108\001\001\000\002\001\001\000\004\173" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\167\u0118\001\001\000\002" +
    "\001\001\000\004\170\u0116\001\001\000\002\001\001\000" +
    "\004\171\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\137\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\140\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\u012f\004\051\005\041\006" +
    "\047\007\037\011\040\014\u013a\001\001\000\020\003\u012f" +
    "\004\051\005\041\006\047\007\037\011\040\014\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\u0131" +
    "\004\051\005\041\006\047\007\037\011\040\001\001\000" +
    "\002\001\001\000\046\003\153\004\051\005\041\006\047" +
    "\007\037\011\040\012\u0133\013\156\017\146\021\162\022" +
    "\163\025\144\026\137\027\143\030\141\031\155\032\154" +
    "\045\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\153\004\051\005\041\006\047\007\037\011\040\012\u0157" +
    "\013\156\017\146\021\162\022\163\025\144\026\137\027" +
    "\143\030\141\031\155\032\154\045\160\001\001\000\046" +
    "\003\153\004\051\005\041\006\047\007\037\011\040\012" +
    "\u013d\013\156\017\146\021\162\022\163\025\144\026\137" +
    "\027\143\030\141\031\155\032\154\045\160\001\001\000" +
    "\002\001\001\000\004\165\u0146\001\001\000\002\001\001" +
    "\000\004\166\u0144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\163\u0154\001\001\000\002\001\001\000\004\164\u0152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\u0163\034\u0182\001\001\000\006\033\u0163\034" +
    "\u0162\001\001\000\024\003\u0172\004\051\005\041\006\047" +
    "\007\037\011\040\014\u0171\035\u0175\036\u0173\001\001\000" +
    "\002\001\001\000\006\033\u0163\034\u0164\001\001\000\002" +
    "\001\001\000\004\174\u016d\001\001\000\002\001\001\000" +
    "\004\175\u016b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\153" +
    "\004\051\005\041\006\047\007\037\011\040\012\u0179\013" +
    "\156\017\146\021\162\022\163\025\144\026\137\027\143" +
    "\030\141\031\155\032\154\045\160\001\001\000\046\003" +
    "\153\004\051\005\041\006\047\007\037\011\040\012\u0178" +
    "\013\156\017\146\021\162\022\163\025\144\026\137\027" +
    "\143\030\141\031\155\032\154\045\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\153\004\051\005" +
    "\041\006\047\007\037\011\040\012\u017b\013\156\017\146" +
    "\021\162\022\163\025\144\026\137\027\143\030\141\031" +
    "\155\032\154\045\160\001\001\000\002\001\001\000\024" +
    "\003\u0172\004\051\005\041\006\047\007\037\011\040\014" +
    "\u0171\035\u017d\036\u0173\001\001\000\002\001\001\000\046" +
    "\003\153\004\051\005\041\006\047\007\037\011\040\012" +
    "\u0181\013\156\017\146\021\162\022\163\025\144\026\137" +
    "\027\143\030\141\031\155\032\154\045\160\001\001\000" +
    "\046\003\153\004\051\005\041\006\047\007\037\011\040" +
    "\012\u0180\013\156\017\146\021\162\022\163\025\144\026" +
    "\137\027\143\030\141\031\155\032\154\045\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\u0196\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\016\003\u018b\004\051\005\041\006\047\007\037\011" +
    "\040\001\001\000\002\001\001\000\004\141\u018d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\142\u0194\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\u019e\044\u019c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u01a5\001\001\000\004\134\u01a0\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u01a1\001" +
    "\001\000\002\001\001\000\016\003\u01a3\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\002\001\001\000" +
    "\004\135\u01a9\001\001\000\002\001\001\000\016\003\u01a7" +
    "\004\051\005\041\006\047\007\037\011\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\u01ab\004\051\005\041\006\047\007\037\011\040\001" +
    "\001\000\002\001\001\000\004\066\u0228\001\001\000\012" +
    "\015\026\020\030\042\u01ae\043\031\001\001\000\002\001" +
    "\001\000\004\067\u021e\001\001\000\002\001\001\000\004" +
    "\070\u0215\001\001\000\004\016\u01b4\001\001\000\004\100" +
    "\u020e\001\001\000\002\001\001\000\006\071\u0201\101\u0202" +
    "\001\001\000\014\015\014\020\020\037\u01b7\040\017\041" +
    "\015\001\001\000\002\001\001\000\006\102\u01d6\106\u01d5" +
    "\001\001\000\046\003\153\004\051\005\041\006\047\007" +
    "\037\011\040\012\u01ba\013\156\017\146\021\162\022\163" +
    "\025\144\026\137\027\143\030\141\031\155\032\154\045" +
    "\160\001\001\000\002\001\001\000\006\103\u01c4\107\u01c3" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\110" +
    "\u01bf\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\104\u01d2\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\105\u01ce" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\153\004" +
    "\051\005\041\006\047\007\037\011\040\012\u01d7\013\156" +
    "\017\146\021\162\022\163\025\144\026\137\027\143\030" +
    "\141\031\155\032\154\045\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\072\u01f8\076\u01f9\001\001\000\046\003\153\004\051\005" +
    "\041\006\047\007\037\011\040\012\u01e0\013\156\017\146" +
    "\021\162\022\163\025\144\026\137\027\143\030\141\031" +
    "\155\032\154\045\160\001\001\000\002\001\001\000\004" +
    "\073\u01e9\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\077\u01e5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\u01f5\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u01f1\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\153\004\051" +
    "\005\041\006\047\007\037\011\040\012\u01fd\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\015\014\020\020\037\u0208\040\017\041\015" +
    "\001\001\000\002\001\001\000\046\003\153\004\051\005" +
    "\041\006\047\007\037\011\040\012\u0204\013\156\017\146" +
    "\021\162\022\163\025\144\026\137\027\143\030\141\031" +
    "\155\032\154\045\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\153\004\051\005\041\006\047\007\037" +
    "\011\040\012\u020a\013\156\017\146\021\162\022\163\025" +
    "\144\026\137\027\143\030\141\031\155\032\154\045\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\153\004\051\005\041\006\047\007\037\011" +
    "\040\012\u0211\013\156\017\146\021\162\022\163\025\144" +
    "\026\137\027\143\030\141\031\155\032\154\045\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u0216\001\001\000\002\001" +
    "\001\000\014\015\014\020\020\037\u0218\040\017\041\015" +
    "\001\001\000\002\001\001\000\046\003\153\004\051\005" +
    "\041\006\047\007\037\011\040\012\u021a\013\156\017\146" +
    "\021\162\022\163\025\144\026\137\027\143\030\141\031" +
    "\155\032\154\045\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u0220\001\001\000\002\001\001\000\014" +
    "\015\014\020\020\037\u0222\040\017\041\015\001\001\000" +
    "\002\001\001\000\046\003\153\004\051\005\041\006\047" +
    "\007\037\011\040\012\u0224\013\156\017\146\021\162\022" +
    "\163\025\144\026\137\027\143\030\141\031\155\032\154" +
    "\045\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\026\020\030" +
    "\042\u0229\043\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u022c\001\001\000\002\001\001\000\014" +
    "\015\014\020\020\037\u022e\040\017\041\015\001\001\000" +
    "\002\001\001\000\046\003\153\004\051\005\041\006\047" +
    "\007\037\011\040\012\u0230\013\156\017\146\021\162\022" +
    "\163\025\144\026\137\027\143\030\141\031\155\032\154" +
    "\045\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\014\020\020\037\u0236\040\017\041\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\153\004\051" +
    "\005\041\006\047\007\037\011\040\012\u0239\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u019e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\111\u0242\001\001\000\002\001\001" +
    "\000\012\015\026\020\030\042\u0244\043\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\014\020\020" +
    "\037\u0247\040\017\041\015\001\001\000\002\001\001\000" +
    "\046\003\153\004\051\005\041\006\047\007\037\011\040" +
    "\012\u0249\013\156\017\146\021\162\022\163\025\144\026" +
    "\137\027\143\030\141\031\155\032\154\045\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\112\u02b6\001\001\000\012\015\026" +
    "\020\030\042\u024f\043\031\001\001\000\002\001\001\000" +
    "\004\113\u02ae\001\001\000\002\001\001\000\006\114\u02a2" +
    "\124\u02a1\001\001\000\014\015\014\020\020\037\u0254\040" +
    "\017\041\015\001\001\000\002\001\001\000\006\125\u0273" +
    "\131\u0272\001\001\000\046\003\153\004\051\005\041\006" +
    "\047\007\037\011\040\012\u0257\013\156\017\146\021\162" +
    "\022\163\025\144\026\137\027\143\030\141\031\155\032" +
    "\154\045\160\001\001\000\002\001\001\000\006\126\u0261" +
    "\132\u0260\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\133\u025c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\127" +
    "\u026f\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\130\u026b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\153\004\051\005\041\006\047\007\037\011\040\012\u0274" +
    "\013\156\017\146\021\162\022\163\025\144\026\137\027" +
    "\143\030\141\031\155\032\154\045\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\115\u0299\121\u0298\001\001\000\046\003\153\004" +
    "\051\005\041\006\047\007\037\011\040\012\u027d\013\156" +
    "\017\146\021\162\022\163\025\144\026\137\027\143\030" +
    "\141\031\155\032\154\045\160\001\001\000\002\001\001" +
    "\000\006\116\u0287\122\u0286\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\u0282\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\117\u0295\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\120\u0291\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\153\004\051\005\041\006\047\007\037" +
    "\011\040\012\u029a\013\156\017\146\021\162\022\163\025" +
    "\144\026\137\027\143\030\141\031\155\032\154\045\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\014\020" +
    "\020\037\u02a3\040\017\041\015\001\001\000\002\001\001" +
    "\000\046\003\153\004\051\005\041\006\047\007\037\011" +
    "\040\012\u02a5\013\156\017\146\021\162\022\163\025\144" +
    "\026\137\027\143\030\141\031\155\032\154\045\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\153\004\051\005\041\006" +
    "\047\007\037\011\040\012\u02aa\013\156\017\146\021\162" +
    "\022\163\025\144\026\137\027\143\030\141\031\155\032" +
    "\154\045\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\014\020\020\037\u02b0\040\017\041\015\001\001" +
    "\000\002\001\001\000\046\003\153\004\051\005\041\006" +
    "\047\007\037\011\040\012\u02b2\013\156\017\146\021\162" +
    "\022\163\025\144\026\137\027\143\030\141\031\155\032" +
    "\154\045\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\026\020" +
    "\030\042\u02b7\043\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\014\020\020\037\u02ba\040\017\041" +
    "\015\001\001\000\002\001\001\000\046\003\153\004\051" +
    "\005\041\006\047\007\037\011\040\012\u02bc\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u02c1\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u0312\001\001\000\014\015\014\020\020\037\u02c5" +
    "\040\017\041\015\001\001\000\002\001\001\000\010\050" +
    "\u02df\057\u02e0\062\u02e1\001\001\000\046\003\153\004\051" +
    "\005\041\006\047\007\037\011\040\012\u02c8\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\004\063\u02d1\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\u02cd\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\u02dc\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u02d8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\153\004" +
    "\051\005\041\006\047\007\037\011\040\012\u02e5\013\156" +
    "\017\146\021\162\022\163\025\144\026\137\027\143\030" +
    "\141\031\155\032\154\045\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\153\004\051\005\041\006\047\007" +
    "\037\011\040\012\u02ea\013\156\017\146\021\162\022\163" +
    "\025\144\026\137\027\143\030\141\031\155\032\154\045" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u030d\001\001\000" +
    "\046\003\153\004\051\005\041\006\047\007\037\011\040" +
    "\012\u02f0\013\156\017\146\021\162\022\163\025\144\026" +
    "\137\027\143\030\141\031\155\032\154\045\160\001\001" +
    "\000\002\001\001\000\006\052\u02fb\055\u02fa\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\u02f5\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u030a" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u0305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\153" +
    "\004\051\005\041\006\047\007\037\011\040\012\u030e\013" +
    "\156\017\146\021\162\022\163\025\144\026\137\027\143" +
    "\030\141\031\155\032\154\045\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\014\020\020\037\u0313\040\017\041\015\001" +
    "\001\000\002\001\001\000\046\003\153\004\051\005\041" +
    "\006\047\007\037\011\040\012\u0315\013\156\017\146\021" +
    "\162\022\163\025\144\026\137\027\143\030\141\031\155" +
    "\032\154\045\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/*	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line " + (s.left + 1));   
				if (s.right >= 0){
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}
*/
	@Override
	public void report_error(String message, Object info) {
		if (info instanceof String){
			//System.err.println("  " + info + " "+ message + "\n       Parsing resumed from 2nd token before" + s.current_lexeme() + "\n");
			System.err.println("  " + info + " "+ message + "\n");
		} else {
			StringBuffer m = new StringBuffer("Error ");
			if (info instanceof java_cup.runtime.Symbol){
				m.append( "(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea " + (((Symbol)info).left + 1) + ", columna" + (((Symbol)info).right + 1) + ")" );
			}
			m.append(" : " + message);
			System.err.println(m);
		}
	}

	@Override
	public void syntax_error(Symbol s){
		System.err.println( "(Se ha encontrado el token \"" + sym.terminalNames[s.sym] + "\" en la linea " + (s.left+1) + ", columna" + (s.right+1) + ")" ); 
                seEsperaba();
	}

	public void seEsperaba(){
		List<Integer> listaTokens = this.expected_token_ids();
		if (listaTokens.size() <= 0){
			listaTokens = this.expected_token_ids();
		}
		String cadenaTokensEsperados = "";
		for (int i = 0 ; i < listaTokens.size(); i++){
			int id = listaTokens.get(i);
			if (id == 1){
				continue;
			}
			String nombreTerminal = sym.terminalNames[id];
			if (i == listaTokens.size() - 1){
				cadenaTokensEsperados += nombreTerminal;
			}else{
				cadenaTokensEsperados += nombreTerminal + " , ";
			}
		}
		System.err.print("Se esperaba alguno de los siguientes tokens:" + cadenaTokensEsperados);
	};


	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,dp,s,identifier2);
											
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
parser.report_error("Programa principal: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROCEDURE error NT$0 IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROCEDURE ID error NT$1 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaban declaraciones","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program ::= PROCEDURE ID IS error NT$2 BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= PROCEDURE ID IS declaration_part error NT$3 statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaban statements","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= PROCEDURE ID IS declaration_part BEGIN error NT$4 END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program ::= PROCEDURE ID IS declaration_part BEGIN statements error NT$5 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END error NT$6 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal: Se esperaba ;","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Programa principal: Simbolo no esperado","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // program ::= PROCEDURE ID IS declaration_part BEGIN END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,dp,identifier2);
											// try {
											// 	ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
											// 	xmlConverter.toXML();
											// 	System.out.println("Se ha generado el arbol");
											// } catch(Exception e){
											// 	System.out.println(e.getMessage());
											// }
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$7 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // program ::= PROCEDURE ID IS declaration_part BEGIN error NT$7 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Programa principal: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // program ::= PROCEDURE ID IS declaration_part BEGIN END error NT$8 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // program ::= PROCEDURE ID IS declaration_part BEGIN END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal: Se esperaba ;","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // program ::= PROCEDURE ID IS declaration_part BEGIN END ID PUNTOCOMA error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Programa principal: Simbolo no esperado","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // program ::= PROCEDURE ID IS BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,s,identifier2);
											// try {
											// 	ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
											// 	xmlConverter.toXML();
											// 	System.out.println("Se ha generado el arbol");
											// } catch(Exception e){
											// 	System.out.println(e.getMessage());
											// }
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$9 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // program ::= PROCEDURE ID IS error NT$9 statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$10 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba END","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // program ::= PROCEDURE ID IS BEGIN statements error NT$10 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$11 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // program ::= PROCEDURE ID IS BEGIN statements END error NT$11 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // program ::= PROCEDURE ID IS BEGIN statements END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal sin declaraciones: Se esperaba \";\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // program ::= PROCEDURE ID IS BEGIN END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,identifier2);
											// try {
											// 	ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
											// 	xmlConverter.toXML();
											// 	System.out.println("Se ha generado el arbol");
											// } catch(Exception e){
											// 	System.out.println(e.getMessage());
											// }
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$12 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // program ::= PROCEDURE ID IS error NT$12 END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$13 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba END","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // program ::= PROCEDURE ID IS BEGIN error NT$13 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$14 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // program ::= PROCEDURE ID IS BEGIN END error NT$14 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // program ::= PROCEDURE ID IS BEGIN END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal sin declaraciones: Se esperaba \";\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // program ::= error 
            {
              Object RESULT =null;
		parser.report_error("Programa principal: Se esperaba Procedure","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaration_part ::= variable_declaration PUNTOCOMA declaration_part 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											dp.add(vd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration_part ::= function_declaration declaration_part 
            {
              DeclarationPart RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											dp.add(fd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration_part ::= procedure_declaration declaration_part 
            {
              DeclarationPart RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcedureDeclaration pd = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
											dp.add(pd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaration_part ::= function_declaration 
            {
              DeclarationPart RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(fd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaration_part ::= procedure_declaration 
            {
              DeclarationPart RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcedureDeclaration pd = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(pd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaration_part ::= variable_declaration PUNTOCOMA 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(vd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaration_part ::= variable_declaration error 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,dp,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$15 ::= 
            {
              FunctionDeclaration RESULT =null;
parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_declaration ::= FUNCTION error NT$15 PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$16 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba \"(\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_declaration ::= FUNCTION ID error NT$16 parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$17 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba\")\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations error NT$17 RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$18 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion: Se esperaba Return","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER error NT$18 variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$19 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type error NT$19 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$20 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part error NT$20 statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$21 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion: Se esperaba Statements","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN error NT$21 END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$22 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba End","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements error NT$22 ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$23 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END error NT$23 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,dp,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$24 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part error NT$24 END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$25 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN END error NT$25 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$26 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba un tipo ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN error NT$26 IS BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$27 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba IS","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type error NT$27 BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$28 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS error NT$28 statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$29 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba Statements","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN error NT$29 END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$30 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba END","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements error NT$30 ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$31 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END error NT$31 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$32 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS error NT$32 END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$33 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba END","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN error NT$33 ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$34 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN END error NT$34 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,dp,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$35 ::= 
            {
              ProcedureDeclaration RESULT =null;
parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // procedure_declaration ::= PROCEDURE error NT$35 PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$36 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba  \"(\"","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // procedure_declaration ::= PROCEDURE ID error NT$36 parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$37 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba\")\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$37",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations error NT$37 IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$38 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Is","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$38",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER error NT$38 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$39 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$39",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part error NT$39 statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$40 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Statements","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$40",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN error NT$40 END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$41 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$41",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements error NT$41 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$42 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$42",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END error NT$42 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,dp,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$43 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$43",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part error NT$43 END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$44 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$44",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN error NT$44 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$45 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$45",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN END error NT$45 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$46 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba IS","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$46",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER error NT$46 BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$47 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$47",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS error NT$47 statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$48 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba Statements","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$48",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN error NT$48 END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$49 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba End","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$49",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements error NT$49 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$50 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$50",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END error NT$50 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$51 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$51",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS error NT$51 END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$52 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba End","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$52",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN error NT$52 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NT$53 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$53",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN END error NT$53 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parameter_declarations ::= parameter 
            {
              ParameterDeclarations RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParameterDeclarations(); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parameter_declarations ::= parameter_declarations PUNTOCOMA parameter 
            {
              ParameterDeclarations RESULT =null;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											pds.add(p);
											RESULT = pds;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // parameter_declarations ::= 
            {
              ParameterDeclarations RESULT =null;
		 RESULT = new ParameterDeclarations(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // parameter ::= variable_ids DOSPUNTOS mode variable_type OPERASIG expression 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vids,m,vtype,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$54 ::= 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("parameter: Se esperaba un modo: IN,OUT,IN OUT ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$54",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parameter ::= variable_ids DOSPUNTOS error NT$54 variable_type OPERASIG expression 
            {
              Parameter RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Parameter) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$55 ::= 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("parameter: Se esperaba un tipo","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$55",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parameter ::= variable_ids DOSPUNTOS mode error NT$55 OPERASIG expression 
            {
              Parameter RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Parameter) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parameter ::= variable_ids DOSPUNTOS mode variable_type OPERASIG error 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("parameter: Se esperaba una expresion","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parameter ::= variable_ids DOSPUNTOS mode variable_type 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vids,m,vtype); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // parameter ::= variable_ids DOSPUNTOS mode error 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("parameter: Se esperaba un tipo","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // parameter ::= variable_declaration 
            {
              Parameter RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vd.getVariables(),vd.getType()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // parameter ::= variable_declaration OPERASIG expression 
            {
              Parameter RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vd.getVariables(),vd.getType(),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // mode ::= IN 
            {
              Mode RESULT =null;
		 RESULT = new ModeIn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // mode ::= INOUT 
            {
              Mode RESULT =null;
		 RESULT = new ModeInOut(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // mode ::= OUT 
            {
              Mode RESULT =null;
		 RESULT = new ModeOut(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expression ::= literal_expression 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpression le = (LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expression ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expression ::= arithmetic_expression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExpression ae = (ArithmeticExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expression ::= PARIZQ expression PARDER 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expression ::= boolean_expression 
            {
              Expression RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BooleanExpression be = (BooleanExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = be; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expression ::= logical_expression 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicalExpression le = (LogicalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expression ::= function_call 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // literal_expression ::= NUMEROENTERO 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerNumber(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // literal_expression ::= NUMEROFLOAT 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatNumber(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // literal_expression ::= TRUE 
            {
              LiteralExpression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // literal_expression ::= FALSE 
            {
              LiteralExpression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // literal_expression ::= CADENA 
            {
              LiteralExpression RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(cad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // arithmetic_expression ::= expression OPERSUMA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Add(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // arithmetic_expression ::= expression OPERRESTA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  Minus(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // arithmetic_expression ::= expression OPERDIVISION expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // arithmetic_expression ::= expression OPERMULTIPLICACION expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplication(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // arithmetic_expression ::= expression OPERPOTENCIA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pow(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // arithmetic_expression ::= OPERRESTA expression 
            {
              ArithmeticExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Negative(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // arithmetic_expression ::= expression MOD expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Module(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // boolean_expression ::= expression OPERIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equal(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // boolean_expression ::= expression OPERDISTINTO expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // boolean_expression ::= expression OPERMAYOR expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Greater(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // boolean_expression ::= expression OPERMENOR expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Less(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // boolean_expression ::= expression OPERMAYORIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterOrEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // boolean_expression ::= expression OPERMENORIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessOrEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // logical_expression ::= expression AND expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // logical_expression ::= expression OR expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // logical_expression ::= NOT expression 
            {
              LogicalExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // function_parameters ::= expression 
            {
              FunctionParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new FunctionParameters();
											RESULT.add(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // function_parameters ::= expression COMA function_parameters 
            {
              FunctionParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											fp.add(e); 
											RESULT = fp; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // function_call ::= ID PARIZQ function_parameters PARDER 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier = new Identifier(id); 
											RESULT = new FunctionCall(identifier,fp); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // function_call ::= ID PARIZQ PARDER 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
											Identifier identifier = new Identifier(id);  
											RESULT = new FunctionCall(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // statements ::= statement statements 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // statements ::= statement 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Statements(); RESULT.add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // statement ::= assign_variable 
            {
              Statement RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignVariable av = (AssignVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = av; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // statement ::= expression PUNTOCOMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // statement ::= get_value 
            {
              Statement RESULT =null;
		int gvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GetValue gv = (GetValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = gv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // statement ::= put_value 
            {
              Statement RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PutValue pv = (PutValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If is = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // statement ::= while_statemet 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While ws = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // statement ::= for_statement 
            {
              Statement RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For fs = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // statement ::= exit_statement 
            {
              Statement RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exit es = (Exit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // statement ::= loop_statement 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Loop ls = (Loop)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // statement ::= case_statement 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case cs = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // statement ::= return_statement 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Return rs = (Return)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // range ::= expression DOBLEPUNTO expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Range(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // variable_ids ::= ID 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // variable_ids ::= ID COMA variable_ids 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											Identifier identifier = new Identifier(id);
											vids.add(identifier);
											RESULT = vids;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // variable_ids ::= ID COMA error 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba una variable después de la coma.", "Error en variables: ");
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // variable_type ::= INTEGER 
            {
              VariableType RESULT =null;
		 RESULT = new TypeInteger(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // variable_type ::= BOOLEAN 
            {
              VariableType RESULT =null;
		 RESULT = new TypeBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // variable_type ::= FLOAT 
            {
              VariableType RESULT =null;
		 RESULT = new TypeFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // variable_type ::= STRING 
            {
              VariableType RESULT =null;
		 RESULT = new TypeString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // assign_variable ::= ID OPERASIG expression PUNTOCOMA 
            {
              AssignVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier = new Identifier(id); 
											RESULT = new AssignVariableSimple(identifier, e); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // NT$56 ::= 
            {
              AssignVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("Se esperaba el valor a asignar.","Error en asignación: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$56",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // assign_variable ::= ID OPERASIG error NT$56 PUNTOCOMA 
            {
              AssignVariable RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (AssignVariable) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // assign_variable ::= ID OPERASIG expression error 
            {
              AssignVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											parser.report_error("Se esperaba \";\"","Error en asignación: ");	// OJO
											Identifier identifier = new Identifier(id); 
											RESULT = new AssignVariableSimple(identifier, e); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // variable_declaration ::= variable_ids DOSPUNTOS variable_type 
            {
              VariableDeclaration RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableType types = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableDeclaration(vids,types); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // variable_declaration ::= variable_ids DOSPUNTOS error 
            {
              VariableDeclaration RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
										parser.report_error("variable_declaration: Se esperaba un tipo ","\t");
										RESULT = new VariableDeclaration(vids, null); 
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // get_value ::= GET PARIZQ ID PARDER PUNTOCOMA 
            {
              GetValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // get_value ::= GET error ID PARDER PUNTOCOMA 
            {
              GetValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba \"(\" ","Error en Get: ");
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$57 ::= 
            {
              GetValue RESULT =null;

											parser.report_error("Se esperaba una variable","Error en Get: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$57",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // get_value ::= GET PARIZQ error NT$57 PARDER PUNTOCOMA 
            {
              GetValue RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (GetValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // NT$58 ::= 
            {
              GetValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \")\" ","Error en Get: ");
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$58",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // get_value ::= GET PARIZQ ID error NT$58 PUNTOCOMA 
            {
              GetValue RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (GetValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // get_value ::= GET PARIZQ ID PARDER error 
            {
              GetValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en Get: ");
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // put_value ::= PUT PARIZQ expression PARDER PUNTOCOMA 
            {
              PutValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PutValue(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // put_value ::= PUT error expression PARDER PUNTOCOMA 
            {
              PutValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba \"(\" ","Error en Put: ");
											RESULT = new PutValue(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$59 ::= 
            {
              PutValue RESULT =null;

											parser.report_error("Se esperaba valor a imprimir.","Error en Put: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$59",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // put_value ::= PUT PARIZQ error NT$59 PARDER PUNTOCOMA 
            {
              PutValue RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (PutValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$60 ::= 
            {
              PutValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \")\" ","Error en Put: ");
											RESULT = new PutValue(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$60",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // put_value ::= PUT PARIZQ expression error NT$60 PUNTOCOMA 
            {
              PutValue RESULT =null;
              // propagate RESULT from NT$60
                RESULT = (PutValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // put_value ::= PUT PARIZQ expression PARDER error 
            {
              PutValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en Put: ");
											RESULT = new PutValue(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // elsif_statements ::= elsif_statement elsif_statements 
            {
              ElsIfList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElsIf es = (ElsIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int essleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int essright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElsIfList ess = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											ess.add(es); 
											RESULT = ess; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // elsif_statements ::= elsif_statement 
            {
              ElsIfList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElsIf es = (ElsIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new ElsIfList();
											RESULT.add(es); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // elsif_statement ::= ELSIF expression THEN statements 
            {
              ElsIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElsIf(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // NT$61 ::= 
            {
              ElsIf RESULT =null;

											parser.report_error("Se esperaba un valor a evaluar.","Error en ElsIf: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$61",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // elsif_statement ::= ELSIF error NT$61 THEN statements 
            {
              ElsIf RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (ElsIf) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // elsif_statement ::= ELSIF expression error statements 
            {
              ElsIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											parser.report_error("Se esperaba \"then\" ","Error en ElsIf: ");
											RESULT = new ElsIf(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // elsif_statement ::= ELSIF expression THEN error 
            {
              ElsIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba \"statements\" ","Error en ElsIf: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // if_statement ::= IF expression THEN statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfSimple(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // if_statement ::= IF expression error statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \"then\" ","Error en If: ");
											RESULT = new IfSimple(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // NT$62 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"statements\" ","Error en If: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$62",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // if_statement ::= IF expression THEN error NT$62 END IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // NT$63 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfSimple(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$63",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // if_statement ::= IF expression THEN statements error NT$63 IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$64 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfSimple(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$64",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // if_statement ::= IF expression THEN statements END error NT$64 PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // if_statement ::= IF expression THEN statements END IF error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en If: ");
											RESULT = new IfSimple(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // if_statement ::= IF expression THEN statements ELSE statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new  IfWithElse(e,s1,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // NT$65 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"statements\" ","Error en If: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$65",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // if_statement ::= IF expression THEN statements ELSE error NT$65 END IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NT$66 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new  IfWithElse(e,s1,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$66",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // if_statement ::= IF expression THEN statements ELSE statements error NT$66 IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // NT$67 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new  IfWithElse(e,s1,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$67",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // if_statement ::= IF expression THEN statements ELSE statements END error NT$67 PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // if_statement ::= IF expression THEN statements ELSE statements END IF error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en If: ");
											RESULT = new  IfWithElse(e,s1,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // if_statement ::= IF expression THEN statements elsif_statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfWithElsIF(e,s,es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // NT$68 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfWithElsIF(e,s,es);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$68",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // if_statement ::= IF expression THEN statements elsif_statements error NT$68 IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // NT$69 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfWithElsIF(e,s,es);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$69",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // if_statement ::= IF expression THEN statements elsif_statements END error NT$69 PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // if_statement ::= IF expression THEN statements elsif_statements END IF error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en If: ");
											RESULT = new IfWithElsIF(e,s,es);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfWithElsIfAndElse(e,s1,es,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NT$70 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"statements\" ","Error en If: ");
											// RESULT = new IfWithElsIfAndElse(e,s1,es,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$70",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // if_statement ::= IF expression THEN statements elsif_statements ELSE error NT$70 END IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // NT$71 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfWithElsIfAndElse(e,s1,es,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$71",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements error NT$71 IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // NT$72 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfWithElsIfAndElse(e,s1,es,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$72",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END error NT$72 PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$72
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END IF error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en If: ");
											RESULT = new IfWithElsIfAndElse(e,s1,es,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // while_statemet ::= WHILE expression LOOP statements END LOOP PUNTOCOMA 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new While(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // while_statemet ::= WHILE expression error statements END LOOP PUNTOCOMA 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \"loop\" ","Error en while: ");
											RESULT = new While(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // while_statemet ::= WHILE expression LOOP error END LOOP PUNTOCOMA 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
											parser.report_error("Se esperaba \"Statements\" ","Error en while: ");
											RESULT = new While(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // NT$73 ::= 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en while: ");
											RESULT = new While(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$73",109, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // while_statemet ::= WHILE expression LOOP statements error NT$73 LOOP PUNTOCOMA 
            {
              While RESULT =null;
              // propagate RESULT from NT$73
                RESULT = (While) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // NT$74 ::= 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en while: ");
											RESULT = new While(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$74",110, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // while_statemet ::= WHILE expression LOOP statements END error NT$74 PUNTOCOMA 
            {
              While RESULT =null;
              // propagate RESULT from NT$74
                RESULT = (While) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // while_statemet ::= WHILE expression LOOP statements END LOOP error 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en while: ");
											RESULT = new While(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // while_statemet ::= WHILE expression LOOP END LOOP PUNTOCOMA 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new While(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // while_statemet ::= WHILE expression error END LOOP PUNTOCOMA 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
											parser.report_error("Se esperaba \"loop\" ","Error en while: ");
											RESULT = new While(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // NT$75 ::= 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en while: ");
											RESULT = new While(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$75",111, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // while_statemet ::= WHILE expression LOOP error NT$75 LOOP PUNTOCOMA 
            {
              While RESULT =null;
              // propagate RESULT from NT$75
                RESULT = (While) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // NT$76 ::= 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en while: ");
											RESULT = new While(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$76",112, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // while_statemet ::= WHILE expression LOOP END error NT$76 PUNTOCOMA 
            {
              While RESULT =null;
              // propagate RESULT from NT$76
                RESULT = (While) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // while_statemet ::= WHILE expression LOOP END LOOP error 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en while: ");
											RESULT = new While(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // for_statement ::= FOR ID IN range LOOP statements END LOOP PUNTOCOMA 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // for_statement ::= FOR ID error range LOOP statements END LOOP PUNTOCOMA 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \"in\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // for_statement ::= FOR ID IN range error statements END LOOP PUNTOCOMA 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \"loop\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // for_statement ::= FOR ID IN range LOOP error END LOOP PUNTOCOMA 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
											parser.report_error("Se esperaba \"statements\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NT$77 ::= 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$77",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // for_statement ::= FOR ID IN range LOOP statements error NT$77 LOOP PUNTOCOMA 
            {
              For RESULT =null;
              // propagate RESULT from NT$77
                RESULT = (For) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NT$78 ::= 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$78",114, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // for_statement ::= FOR ID IN range LOOP statements END error NT$78 PUNTOCOMA 
            {
              For RESULT =null;
              // propagate RESULT from NT$78
                RESULT = (For) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // for_statement ::= FOR ID IN range LOOP statements END LOOP error 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // for_statement ::= FOR ID IN range LOOP END LOOP PUNTOCOMA 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // for_statement ::= FOR ID error range LOOP END LOOP PUNTOCOMA 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
											parser.report_error("Se esperaba \"in\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // for_statement ::= FOR ID IN range error END LOOP PUNTOCOMA 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
											parser.report_error("Se esperaba \"loop\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // NT$79 ::= 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$79",115, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // for_statement ::= FOR ID IN range LOOP error NT$79 LOOP PUNTOCOMA 
            {
              For RESULT =null;
              // propagate RESULT from NT$79
                RESULT = (For) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // NT$80 ::= 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$80",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000001(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // for_statement ::= FOR ID IN range LOOP END error NT$80 PUNTOCOMA 
            {
              For RESULT =null;
              // propagate RESULT from NT$80
                RESULT = (For) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // for_statement ::= FOR ID IN range LOOP END LOOP error 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // exit_statement ::= EXIT WHEN expression PUNTOCOMA 
            {
              Exit RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // exit_statement ::= EXIT error expression PUNTOCOMA 
            {
              Exit RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											parser.report_error("Se esperaba \"when\" ","Error: ");
											RESULT = new Exit(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // exit_statement ::= EXIT WHEN expression error 
            {
              Exit RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											parser.report_error("Se esperaba \";\" ","Error: ");
											RESULT = new Exit(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // loop_statement ::= LOOP statements END LOOP PUNTOCOMA 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Loop(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // NT$81 ::= 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en loop: ");
											RESULT = new Loop(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$81",117, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // loop_statement ::= LOOP statements error NT$81 LOOP PUNTOCOMA 
            {
              Loop RESULT =null;
              // propagate RESULT from NT$81
                RESULT = (Loop) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // NT$82 ::= 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en loop: ");
											RESULT = new Loop(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$82",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // loop_statement ::= LOOP statements END error NT$82 PUNTOCOMA 
            {
              Loop RESULT =null;
              // propagate RESULT from NT$82
                RESULT = (Loop) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // NT$83 ::= 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

											parser.report_error("Se esperaba \";\" ","Error en loop: ");
											RESULT = new Loop(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$83",119, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // loop_statement ::= LOOP statements END LOOP error NT$83 LOOP END LOOP PUNTOCOMA 
            {
              Loop RESULT =null;
              // propagate RESULT from NT$83
                RESULT = (Loop) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 RESULT = new Loop(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // NT$84 ::= 
            {
              Loop RESULT =null;

											parser.report_error("Se esperaba \"end loop\" ","Error en loop: ");
											RESULT = new Loop();
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$84",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // loop_statement ::= LOOP error NT$84 LOOP PUNTOCOMA 
            {
              Loop RESULT =null;
              // propagate RESULT from NT$84
                RESULT = (Loop) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // NT$85 ::= 
            {
              Loop RESULT =null;

											parser.report_error("Se esperaba \"end loop\" ","Error en loop: ");
											RESULT = new Loop();
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$85",121, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // loop_statement ::= LOOP END error NT$85 PUNTOCOMA 
            {
              Loop RESULT =null;
              // propagate RESULT from NT$85
                RESULT = (Loop) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // loop_statement ::= LOOP END LOOP error 
            {
              Loop RESULT =null;
		
											parser.report_error("Se esperaba \";\" ","Error en loop: ");
											RESULT = new Loop();
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // case_statement ::= CASE expression IS when_list END CASE PUNTOCOMA 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
											//recorrer wl para ver si tiene algun elemento Others
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // case_statement ::= CASE expression error when_list END CASE PUNTOCOMA 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \"is\" ","Error en case: ");
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // NT$86 ::= 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end case\" ","Error en case: ");
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$86",122, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // case_statement ::= CASE expression IS when_list error NT$86 CASE PUNTOCOMA 
            {
              Case RESULT =null;
              // propagate RESULT from NT$86
                RESULT = (Case) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // NT$87 ::= 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end case\" ","Error en case: ");
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$87",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // case_statement ::= CASE expression IS when_list END error NT$87 PUNTOCOMA 
            {
              Case RESULT =null;
              // propagate RESULT from NT$87
                RESULT = (Case) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // case_statement ::= CASE expression IS when_list END CASE error 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en case: ");
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // when_list ::= when_element 
            {
              WhenList RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int weright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenElement we = (WhenElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenList(); RESULT.add(we); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // when_list ::= when_element when_list 
            {
              WhenList RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int weright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhenElement we = (WhenElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											wl.add(we); 
											RESULT = wl; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // when_element ::= WHEN when_options OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenOptions w = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenElement(w,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // when_element ::= WHEN when_options error statements 
            {
              WhenElement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenOptions w = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											parser.report_error("Se esperaba \"=>\" ","Error: ");
											RESULT = new WhenElement(w,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // when_element ::= WHEN when_options OPERPUNTERO 
            {
              WhenElement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhenOptions w = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhenElement(w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // when_element ::= WHEN when_options error 
            {
              WhenElement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhenOptions w = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											parser.report_error("Se esperaba \"=>\" ","Error: ");
											RESULT = new WhenElement(w);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // when_element ::= WHEN OTHERS OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenElement(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // when_element ::= WHEN error OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											parser.report_error("Se esperaba \"others\" ","Error: ");
											RESULT = new WhenElement(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // when_element ::= WHEN OTHERS error statements 
            {
              WhenElement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											parser.report_error("Se esperaba \"=>\" ","Error: ");
											RESULT = new WhenElement(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // when_element ::= WHEN OTHERS OPERPUNTERO 
            {
              WhenElement RESULT =null;
		 RESULT = new WhenElement(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // when_element ::= WHEN error OPERPUNTERO 
            {
              WhenElement RESULT =null;
		
											parser.report_error("Se esperaba \"others\" ","Error: ");
											RESULT = new WhenElement();
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // when_element ::= WHEN OTHERS error 
            {
              WhenElement RESULT =null;
		
											parser.report_error("Se esperaba \"=>\" ","Error: ");
											RESULT = new WhenElement();
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // when_options ::= option_when 
            {
              WhenOptions RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenOption opt = (WhenOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new WhenOptions();
											RESULT.add(opt); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // when_options ::= option_when PIPE when_options 
            {
              WhenOptions RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenOption opt = (WhenOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenOptions opts = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											opts.add(opt);
											RESULT = opts;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // option_when ::= expression 
            {
              WhenOption RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenOption(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // option_when ::= range 
            {
              WhenOption RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenOption(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // return_statement ::= RETURN expression PUNTOCOMA 
            {
              Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // return_statement ::= RETURN error 
            {
              Return RESULT =null;
		 parser.report_error("Se esperaba un valor de retorno", "ERROR: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$parser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$parser$do_action_part00000001(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
