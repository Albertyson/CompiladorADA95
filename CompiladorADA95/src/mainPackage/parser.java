
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 18 23:04:43 CST 2016
//----------------------------------------------------

package mainPackage;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 18 23:04:43 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\013\000\002\002\004\000\002\035" +
    "\005\000\002\035\004\000\002\035\004\000\002\035\002" +
    "\000\002\036\020\000\002\037\016\000\002\040\003\000" +
    "\002\040\005\000\002\040\002\000\002\041\010\000\002" +
    "\041\006\000\002\041\005\000\002\041\007\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\005\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\043\003\000\002\043\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\004\000\002\005\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\004\000\002\010\003\000\002" +
    "\010\005\000\002\011\006\000\002\011\005\000\002\012" +
    "\004\000\002\012\002\000\002\013\003\000\002\013\004" +
    "\000\002\013\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\005\000\002\015\003\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\006\000\002" +
    "\017\006\000\002\020\005\000\002\021\007\000\002\022" +
    "\007\000\002\023\004\000\002\023\003\000\002\024\006" +
    "\000\002\025\011\000\002\025\013\000\002\025\012\000" +
    "\002\025\014\000\002\026\011\000\002\027\013\000\002" +
    "\030\006\000\002\031\007\000\002\032\014\000\002\032" +
    "\015\000\002\033\003\000\002\033\005\000\002\034\003" +
    "\000\002\034\003\000\002\044\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\004\025\004\001\002\000\004\101\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\037\010\001\002\000\012\022\017\025\012\040" +
    "\ufffc\101\011\001\002\000\006\064\200\065\uffbc\001\002" +
    "\000\004\101\351\001\002\000\004\065\347\001\002\000" +
    "\012\022\017\025\012\040\ufffc\101\011\001\002\000\004" +
    "\040\341\001\002\000\012\022\017\025\012\040\ufffc\101" +
    "\011\001\002\000\004\101\023\001\002\000\004\062\021" +
    "\001\002\000\012\022\017\025\012\040\ufffc\101\011\001" +
    "\002\000\004\040\uffff\001\002\000\004\060\024\001\002" +
    "\000\010\061\ufff7\062\ufff7\101\011\001\002\000\004\065" +
    "\325\001\002\000\006\061\030\062\031\001\002\000\006" +
    "\061\ufff9\062\ufff9\001\002\000\004\026\033\001\002\000" +
    "\004\101\011\001\002\000\006\061\ufff8\062\ufff8\001\002" +
    "\000\014\004\034\005\040\006\041\007\037\010\035\001" +
    "\002\000\012\037\uffba\041\uffba\061\uffba\062\uffba\001\002" +
    "\000\012\037\uffb6\041\uffb6\061\uffb6\062\uffb6\001\002\000" +
    "\004\037\042\001\002\000\012\037\uffb7\041\uffb7\061\uffb7" +
    "\062\uffb7\001\002\000\012\037\uffb9\041\uffb9\061\uffb9\062" +
    "\uffb9\001\002\000\012\037\uffb8\041\uffb8\061\uffb8\062\uffb8" +
    "\001\002\000\012\022\017\025\012\040\ufffc\101\011\001" +
    "\002\000\004\040\044\001\002\000\054\011\101\012\113" +
    "\013\071\016\055\020\uffca\021\067\023\103\026\100\032" +
    "\110\033\070\035\047\036\065\051\105\057\060\060\077" +
    "\100\053\101\072\102\102\103\063\104\057\105\107\001" +
    "\002\000\062\027\uffe3\033\uffe3\037\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\067\uffe3\074\uffe3\075\uffe3\077\uffe3\001" +
    "\002\000\062\027\uffeb\033\uffeb\037\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\067\uffeb\074\uffeb\075\uffeb\077\uffeb\001" +
    "\002\000\004\060\321\001\002\000\004\020\316\001\002" +
    "\000\062\027\uffed\033\uffed\037\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed" +
    "\053\uffed\054\uffed\055\uffed\056\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\067\uffed\074\uffed\075\uffed\077\uffed\001\002" +
    "\000\060\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\020\uffc3\021\uffc3\023\uffc3\026\uffc3\032\uffc3\033\uffc3" +
    "\035\uffc3\036\uffc3\051\uffc3\057\uffc3\060\uffc3\100\uffc3\101" +
    "\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\001\002\000\030" +
    "\011\101\012\113\023\103\051\105\057\060\060\077\101" +
    "\115\102\102\103\063\104\057\105\107\001\002\000\060" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020" +
    "\uffc1\021\uffc1\023\uffc1\026\uffc1\032\uffc1\033\uffc1\035\uffc1" +
    "\036\uffc1\051\uffc1\057\uffc1\060\uffc1\100\uffc1\101\uffc1\102" +
    "\uffc1\103\uffc1\104\uffc1\105\uffc1\001\002\000\004\101\257" +
    "\001\002\000\060\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\020\uffc2\021\uffc2\023\uffc2\026\uffc2\032\uffc2" +
    "\033\uffc2\035\uffc2\036\uffc2\051\uffc2\057\uffc2\060\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\001\002" +
    "\000\062\027\uffe8\033\uffe8\037\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\061\uffe8\062\uffe8\063" +
    "\uffe8\064\uffe8\067\uffe8\074\uffe8\075\uffe8\077\uffe8\001\002" +
    "\000\030\011\101\012\113\023\103\051\105\057\060\060" +
    "\077\101\115\102\102\103\063\104\057\105\107\001\002" +
    "\000\006\041\252\062\253\001\002\000\060\011\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\021\uffc4" +
    "\023\uffc4\026\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4\051" +
    "\uffc4\057\uffc4\060\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4" +
    "\104\uffc4\105\uffc4\001\002\000\062\027\uffe2\033\uffe2\037" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\067\uffe2\074\uffe2" +
    "\075\uffe2\077\uffe2\001\002\000\062\027\uffea\033\uffea\037" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\067\uffea\074\uffea" +
    "\075\uffea\077\uffea\001\002\000\004\060\246\001\002\000" +
    "\060\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\020\uffc9\021\uffc9\023\uffc9\026\uffc9\032\uffc9\033\uffc9\035" +
    "\uffc9\036\uffc9\051\uffc9\057\uffc9\060\uffc9\100\uffc9\101\uffc9" +
    "\102\uffc9\103\uffc9\104\uffc9\105\uffc9\001\002\000\004\030" +
    "\243\001\002\000\054\011\101\012\113\013\071\016\055" +
    "\020\uffca\021\067\023\103\026\100\032\110\033\070\035" +
    "\047\036\065\051\105\057\060\060\077\100\053\101\072" +
    "\102\102\103\063\104\057\105\107\001\002\000\030\011" +
    "\101\012\113\023\103\051\105\057\060\060\077\101\115" +
    "\102\102\103\063\104\057\105\107\001\002\000\050\041" +
    "\201\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\060\160\062\uffee\064\200\065\uffbc\075\uffee\001\002" +
    "\000\040\042\133\043\121\044\123\045\130\046\132\047" +
    "\117\050\131\051\126\052\124\053\134\054\122\055\120" +
    "\056\135\062\177\075\125\001\002\000\060\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf" +
    "\023\uffbf\026\uffbf\032\uffbf\033\uffbf\035\uffbf\036\uffbf\051" +
    "\uffbf\057\uffbf\060\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf" +
    "\104\uffbf\105\uffbf\001\002\000\060\011\101\012\113\013" +
    "\071\014\uffca\015\uffca\016\055\020\uffca\021\067\023\103" +
    "\026\100\032\110\033\070\035\047\036\065\051\105\057" +
    "\060\060\077\100\053\101\072\102\102\103\063\104\057" +
    "\105\107\001\002\000\060\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\020\uffc0\021\uffc0\023\uffc0\026\uffc0" +
    "\032\uffc0\033\uffc0\035\uffc0\036\uffc0\051\uffc0\057\uffc0\060" +
    "\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\062\027\uffe5\033\uffe5\037\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\067\uffe5\074\uffe5\075\uffe5\077\uffe5" +
    "\001\002\000\064\027\uffe1\033\uffe1\037\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\067\uffe1\072\170\074\uffe1\075\uffe1" +
    "\077\uffe1\001\002\000\062\027\uffe6\033\uffe6\037\uffe6\042" +
    "\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\064\uffe6\067\uffe6\074\uffe6\075\uffe6" +
    "\077\uffe6\001\002\000\060\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\020\uffbe\021\uffbe\023\uffbe\026\uffbe" +
    "\032\uffbe\033\uffbe\035\uffbe\036\uffbe\051\uffbe\057\uffbe\060" +
    "\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\062\027\uffef\033\uffef\037\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef" +
    "\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\067\uffef\074\uffef\075\uffef\077\uffef" +
    "\001\002\000\062\027\uffe7\033\uffe7\037\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\061\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\067\uffe7\074\uffe7\075\uffe7\077\uffe7" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\062\027\uffe9\033\uffe9\037\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\067\uffe9\074\uffe9\075\uffe9\077\uffe9" +
    "\001\002\000\060\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\020\uffc6\021\uffc6\023\uffc6\026\uffc6\032\uffc6" +
    "\033\uffc6\035\uffc6\036\uffc6\051\uffc6\057\uffc6\060\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\105\uffc6\001\002" +
    "\000\062\027\uffe4\033\uffe4\037\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\056\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\067\uffe4\074\uffe4\075\uffe4\077\uffe4\001\002" +
    "\000\060\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\020\uffc5\021\uffc5\023\uffc5\026\uffc5\032\uffc5\033\uffc5" +
    "\035\uffc5\036\uffc5\051\uffc5\057\uffc5\060\uffc5\100\uffc5\101" +
    "\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\001\002\000\064" +
    "\027\uffee\033\uffee\037\uffee\042\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\060\160\061\uffee\062\uffee\063" +
    "\uffee\064\uffee\067\uffee\074\uffee\075\uffee\077\uffee\001\002" +
    "\000\040\033\127\042\133\043\121\044\123\045\130\046" +
    "\132\047\117\050\131\051\126\052\124\053\134\054\122" +
    "\055\120\056\135\075\125\001\002\000\030\011\101\012" +
    "\113\023\103\051\105\057\060\060\077\101\115\102\102" +
    "\103\063\104\057\105\107\001\002\000\030\011\101\012" +
    "\113\023\103\051\105\057\060\060\077\101\115\102\102" +
    "\103\063\104\057\105\107\001\002\000\030\011\101\012" +
    "\113\023\103\051\105\057\060\060\077\101\115\102\102" +
    "\103\063\104\057\105\107\001\002\000\030\011\101\012" +
    "\113\023\103\051\105\057\060\060\077\101\115\102\102" +
    "\103\063\104\057\105\107\001\002\000\030\011\101\012" +
    "\113\023\103\051\105\057\060\060\077\101\115\102\102" +
    "\103\063\104\057\105\107\001\002\000\030\011\101\012" +
    "\113\023\103\051\105\057\060\060\077\101\115\102\102" +
    "\103\063\104\057\105\107\001\002\000\030\011\101\012" +
    "\113\023\103\051\105\057\060\060\077\101\115\102\102" +
    "\103\063\104\057\105\107\001\002\000\030\011\101\012" +
    "\113\023\103\051\105\057\060\060\077\101\115\102\102" +
    "\103\063\104\057\105\107\001\002\000\054\011\101\012" +
    "\113\013\071\016\055\020\uffca\021\067\023\103\026\100" +
    "\032\110\033\070\035\047\036\065\051\105\057\060\060" +
    "\077\100\053\101\072\102\102\103\063\104\057\105\107" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\030\011\101\012\113\023\103\051\105\057" +
    "\060\060\077\101\115\102\102\103\063\104\057\105\107" +
    "\001\002\000\062\027\uffd1\033\uffd1\037\uffd1\042\133\043" +
    "\121\044\123\045\130\046\132\047\117\050\131\051\126" +
    "\052\124\053\134\054\122\055\120\056\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\067\uffd1\074\uffd1\075\125\077\uffd1" +
    "\001\002\000\062\027\uffdd\033\uffdd\037\uffdd\042\uffdd\043" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\122\055\uffdd\056\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\067\uffdd\074\uffdd\075\125\077\uffdd" +
    "\001\002\000\062\027\uffd5\033\uffd5\037\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\131\051\126" +
    "\052\124\053\134\054\122\055\uffd5\056\uffd5\061\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\067\uffd5\074\uffd5\075\125\077\uffd5" +
    "\001\002\000\062\027\uffd4\033\uffd4\037\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\131\051\126" +
    "\052\124\053\134\054\122\055\uffd4\056\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\067\uffd4\074\uffd4\075\125\077\uffd4" +
    "\001\002\000\062\027\uffdf\033\uffdf\037\uffdf\042\uffdf\043" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\124\053\134\054\122\055\uffdf\056\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\067\uffdf\074\uffdf\075\125\077\uffdf" +
    "\001\002\000\062\027\uffd7\033\uffd7\037\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\131\051\126" +
    "\052\124\053\134\054\122\055\uffd7\056\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\067\uffd7\074\uffd7\075\125\077\uffd7" +
    "\001\002\000\004\020\145\001\002\000\004\033\146\001" +
    "\002\000\004\062\147\001\002\000\060\011\uffa9\012\uffa9" +
    "\013\uffa9\014\uffa9\015\uffa9\016\uffa9\020\uffa9\021\uffa9\023" +
    "\uffa9\026\uffa9\032\uffa9\033\uffa9\035\uffa9\036\uffa9\051\uffa9" +
    "\057\uffa9\060\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\105\uffa9\001\002\000\062\027\uffde\033\uffde\037\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\124\053\134\054\122\055\uffde\056\uffde" +
    "\061\uffde\062\uffde\063\uffde\064\uffde\067\uffde\074\uffde\075" +
    "\125\077\uffde\001\002\000\062\027\uffd9\033\uffd9\037\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\122\055\uffd9\056\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\064\uffd9\067\uffd9\074\uffd9\075" +
    "\uffd9\077\uffd9\001\002\000\062\027\uffdc\033\uffdc\037\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\122\055\uffdc\056\uffdc" +
    "\061\uffdc\062\uffdc\063\uffdc\064\uffdc\067\uffdc\074\uffdc\075" +
    "\125\077\uffdc\001\002\000\062\027\uffd8\033\uffd8\037\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\131\051\126\052\124\053\134\054\122\055\uffd8\056\uffd8" +
    "\061\uffd8\062\uffd8\063\uffd8\064\uffd8\067\uffd8\074\uffd8\075" +
    "\125\077\uffd8\001\002\000\062\027\uffdb\033\uffdb\037\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\053\uffdb\054\122\055\uffdb\056\uffdb" +
    "\061\uffdb\062\uffdb\063\uffdb\064\uffdb\067\uffdb\074\uffdb\075" +
    "\uffdb\077\uffdb\001\002\000\062\027\uffd6\033\uffd6\037\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050" +
    "\131\051\126\052\124\053\134\054\122\055\uffd6\056\uffd6" +
    "\061\uffd6\062\uffd6\063\uffd6\064\uffd6\067\uffd6\074\uffd6\075" +
    "\125\077\uffd6\001\002\000\062\027\uffd2\033\uffd2\037\uffd2" +
    "\042\133\043\121\044\123\045\130\046\132\047\117\050" +
    "\131\051\126\052\124\053\134\054\122\055\uffd2\056\uffd2" +
    "\061\uffd2\062\uffd2\063\uffd2\064\uffd2\067\uffd2\074\uffd2\075" +
    "\125\077\uffd2\001\002\000\062\027\uffd3\033\uffd3\037\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\131\051\126\052\124\053\134\054\122\055\uffd3\056\uffd3" +
    "\061\uffd3\062\uffd3\063\uffd3\064\uffd3\067\uffd3\074\uffd3\075" +
    "\125\077\uffd3\001\002\000\032\011\101\012\113\023\103" +
    "\051\105\057\060\060\077\061\162\101\115\102\102\103" +
    "\063\104\057\105\107\001\002\000\004\061\166\001\002" +
    "\000\062\027\uffcc\033\uffcc\037\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\056\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\067\uffcc\074\uffcc\075\uffcc\077\uffcc\001\002" +
    "\000\042\042\133\043\121\044\123\045\130\046\132\047" +
    "\117\050\131\051\126\052\124\053\134\054\122\055\120" +
    "\056\135\061\uffcf\064\164\075\125\001\002\000\030\011" +
    "\101\012\113\023\103\051\105\057\060\060\077\101\115" +
    "\102\102\103\063\104\057\105\107\001\002\000\004\061" +
    "\uffce\001\002\000\062\027\uffcd\033\uffcd\037\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\067\uffcd\074\uffcd\075\uffcd\077" +
    "\uffcd\001\002\000\062\027\uffda\033\uffda\037\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\122\055\uffda\056\uffda\061\uffda" +
    "\062\uffda\063\uffda\064\uffda\067\uffda\074\uffda\075\uffda\077" +
    "\uffda\001\002\000\004\102\102\001\002\000\062\027\uffe0" +
    "\033\uffe0\037\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\067" +
    "\uffe0\074\uffe0\075\uffe0\077\uffe0\001\002\000\040\042\133" +
    "\043\121\044\123\045\130\046\132\047\117\050\131\051" +
    "\126\052\124\053\134\054\122\055\120\056\135\062\173" +
    "\075\125\001\002\000\060\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\020\uff9f\021\uff9f\023\uff9f\026\uff9f" +
    "\032\uff9f\033\uff9f\035\uff9f\036\uff9f\051\uff9f\057\uff9f\060" +
    "\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f" +
    "\001\002\000\040\042\133\043\121\044\123\045\130\046" +
    "\132\047\117\050\131\051\126\052\124\053\134\054\122" +
    "\055\120\056\135\061\175\075\125\001\002\000\062\027" +
    "\uffec\033\uffec\037\uffec\042\uffec\043\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\067\uffec\074\uffec\075\uffec\077\uffec\001\002\000\010\014" +
    "\uffcb\015\uffcb\020\uffcb\001\002\000\060\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7\023" +
    "\uffc7\026\uffc7\032\uffc7\033\uffc7\035\uffc7\036\uffc7\051\uffc7" +
    "\057\uffc7\060\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104" +
    "\uffc7\105\uffc7\001\002\000\004\101\011\001\002\000\030" +
    "\011\101\012\113\023\103\051\105\057\060\060\077\101" +
    "\115\102\102\103\063\104\057\105\107\001\002\000\040" +
    "\042\133\043\121\044\123\045\130\046\132\047\117\050" +
    "\131\051\126\052\124\053\134\054\122\055\120\056\135" +
    "\062\203\075\125\001\002\000\060\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\021\uffb5\023\uffb5" +
    "\026\uffb5\032\uffb5\033\uffb5\035\uffb5\036\uffb5\051\uffb5\057" +
    "\uffb5\060\uffb5\100\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5" +
    "\105\uffb5\001\002\000\004\065\uffbb\001\002\000\040\027" +
    "\206\042\133\043\121\044\123\045\130\046\132\047\117" +
    "\050\131\051\126\052\124\053\134\054\122\055\120\056" +
    "\135\075\125\001\002\000\060\011\101\012\113\013\071" +
    "\014\uffca\015\uffca\016\055\020\uffca\021\067\023\103\026" +
    "\100\032\110\033\070\035\047\036\065\051\105\057\060" +
    "\060\077\100\053\101\072\102\102\103\063\104\057\105" +
    "\107\001\002\000\010\014\210\015\212\020\214\001\002" +
    "\000\054\011\101\012\113\013\071\016\055\020\uffca\021" +
    "\067\023\103\026\100\032\110\033\070\035\047\036\065" +
    "\051\105\057\060\060\077\100\053\101\072\102\102\103" +
    "\063\104\057\105\107\001\002\000\010\014\uffaf\015\212" +
    "\020\uffaf\001\002\000\030\011\101\012\113\023\103\051" +
    "\105\057\060\060\077\101\115\102\102\103\063\104\057" +
    "\105\107\001\002\000\006\014\217\020\220\001\002\000" +
    "\004\013\215\001\002\000\004\062\216\001\002\000\060" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\020" +
    "\uffad\021\uffad\023\uffad\026\uffad\032\uffad\033\uffad\035\uffad" +
    "\036\uffad\051\uffad\057\uffad\060\uffad\100\uffad\101\uffad\102" +
    "\uffad\103\uffad\104\uffad\105\uffad\001\002\000\054\011\101" +
    "\012\113\013\071\016\055\020\uffca\021\067\023\103\026" +
    "\100\032\110\033\070\035\047\036\065\051\105\057\060" +
    "\060\077\100\053\101\072\102\102\103\063\104\057\105" +
    "\107\001\002\000\004\013\221\001\002\000\004\062\222" +
    "\001\002\000\060\011\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\020\uffab\021\uffab\023\uffab\026\uffab\032\uffab" +
    "\033\uffab\035\uffab\036\uffab\051\uffab\057\uffab\060\uffab\100" +
    "\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab\001\002" +
    "\000\004\020\224\001\002\000\004\013\225\001\002\000" +
    "\004\062\226\001\002\000\060\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\020\uffaa\021\uffaa\023\uffaa\026" +
    "\uffaa\032\uffaa\033\uffaa\035\uffaa\036\uffaa\051\uffaa\057\uffaa" +
    "\060\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105" +
    "\uffaa\001\002\000\040\027\230\042\133\043\121\044\123" +
    "\045\130\046\132\047\117\050\131\051\126\052\124\053" +
    "\134\054\122\055\120\056\135\075\125\001\002\000\060" +
    "\011\101\012\113\013\071\014\uffca\015\uffca\016\055\020" +
    "\uffca\021\067\023\103\026\100\032\110\033\070\035\047" +
    "\036\065\051\105\057\060\060\077\100\053\101\072\102" +
    "\102\103\063\104\057\105\107\001\002\000\010\014\uffae" +
    "\015\uffae\020\uffae\001\002\000\006\014\uffb0\020\uffb0\001" +
    "\002\000\004\020\234\001\002\000\004\013\235\001\002" +
    "\000\004\062\236\001\002\000\060\011\uffac\012\uffac\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\020\uffac\021\uffac\023\uffac" +
    "\026\uffac\032\uffac\033\uffac\035\uffac\036\uffac\051\uffac\057" +
    "\uffac\060\uffac\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac" +
    "\105\uffac\001\002\000\004\020\240\001\002\000\004\033" +
    "\241\001\002\000\004\062\242\001\002\000\060\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\020\uffa6\021" +
    "\uffa6\023\uffa6\026\uffa6\032\uffa6\033\uffa6\035\uffa6\036\uffa6" +
    "\051\uffa6\057\uffa6\060\uffa6\100\uffa6\101\uffa6\102\uffa6\103" +
    "\uffa6\104\uffa6\105\uffa6\001\002\000\030\011\101\012\113" +
    "\023\103\051\105\057\060\060\077\101\115\102\102\103" +
    "\063\104\057\105\107\001\002\000\040\042\133\043\121" +
    "\044\123\045\130\046\132\047\117\050\131\051\126\052" +
    "\124\053\134\054\122\055\120\056\135\062\245\075\125" +
    "\001\002\000\060\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\020\uffa7\021\uffa7\023\uffa7\026\uffa7\032\uffa7" +
    "\033\uffa7\035\uffa7\036\uffa7\051\uffa7\057\uffa7\060\uffa7\100" +
    "\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\001\002" +
    "\000\004\101\247\001\002\000\004\061\250\001\002\000" +
    "\004\062\251\001\002\000\060\011\uffb2\012\uffb2\013\uffb2" +
    "\014\uffb2\015\uffb2\016\uffb2\020\uffb2\021\uffb2\023\uffb2\026" +
    "\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\051\uffb2\057\uffb2" +
    "\060\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105" +
    "\uffb2\001\002\000\030\011\101\012\113\023\103\051\105" +
    "\057\060\060\077\101\115\102\102\103\063\104\057\105" +
    "\107\001\002\000\060\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\020\uffc8\021\uffc8\023\uffc8\026\uffc8\032" +
    "\uffc8\033\uffc8\035\uffc8\036\uffc8\051\uffc8\057\uffc8\060\uffc8" +
    "\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\001" +
    "\002\000\040\042\133\043\121\044\123\045\130\046\132" +
    "\047\117\050\131\051\126\052\124\053\134\054\122\055" +
    "\120\056\135\062\255\075\125\001\002\000\060\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\020\uffb4\021" +
    "\uffb4\023\uffb4\026\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4" +
    "\051\uffb4\057\uffb4\060\uffb4\100\uffb4\101\uffb4\102\uffb4\103" +
    "\uffb4\104\uffb4\105\uffb4\001\002\000\062\027\uffd0\033\uffd0" +
    "\037\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\122\055\uffd0" +
    "\056\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\067\uffd0\074" +
    "\uffd0\075\uffd0\077\uffd0\001\002\000\004\031\260\001\002" +
    "\000\030\011\101\012\113\023\103\051\105\057\060\060" +
    "\077\101\115\102\102\103\063\104\057\105\107\001\002" +
    "\000\040\042\133\043\121\044\123\045\130\046\132\047" +
    "\117\050\131\051\126\052\124\053\134\054\122\055\120" +
    "\056\135\063\270\075\125\001\002\000\004\033\263\001" +
    "\002\000\054\011\101\012\113\013\071\016\055\020\uffca" +
    "\021\067\023\103\026\100\032\110\033\070\035\047\036" +
    "\065\051\105\057\060\060\077\100\053\101\072\102\102" +
    "\103\063\104\057\105\107\001\002\000\004\020\265\001" +
    "\002\000\004\033\266\001\002\000\004\062\267\001\002" +
    "\000\060\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\020\uffa8\021\uffa8\023\uffa8\026\uffa8\032\uffa8\033\uffa8" +
    "\035\uffa8\036\uffa8\051\uffa8\057\uffa8\060\uffa8\100\uffa8\101" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\001\002\000\030" +
    "\011\101\012\113\023\103\051\105\057\060\060\077\101" +
    "\115\102\102\103\063\104\057\105\107\001\002\000\046" +
    "\033\uffbd\042\133\043\121\044\123\045\130\046\132\047" +
    "\117\050\131\051\126\052\124\053\134\054\122\055\120" +
    "\056\135\067\uffbd\074\uffbd\075\125\077\uffbd\001\002\000" +
    "\040\037\273\042\133\043\121\044\123\045\130\046\132" +
    "\047\117\050\131\051\126\052\124\053\134\054\122\055" +
    "\120\056\135\075\125\001\002\000\004\030\274\001\002" +
    "\000\030\011\101\012\113\023\103\051\105\057\060\060" +
    "\077\101\115\102\102\103\063\104\057\105\107\001\002" +
    "\000\046\042\133\043\121\044\123\045\130\046\132\047" +
    "\117\050\131\051\126\052\124\053\134\054\122\055\120" +
    "\056\135\063\270\067\uffa1\074\uffa1\075\125\077\uffa1\001" +
    "\002\000\010\067\uffa0\074\uffa0\077\uffa0\001\002\000\010" +
    "\067\314\074\uffa3\077\uffa3\001\002\000\006\074\302\077" +
    "\301\001\002\000\004\074\307\001\002\000\054\011\101" +
    "\012\113\013\071\016\055\020\uffca\021\067\023\103\026" +
    "\100\032\110\033\070\035\047\036\065\051\105\057\060" +
    "\060\077\100\053\101\072\102\102\103\063\104\057\105" +
    "\107\001\002\000\004\020\304\001\002\000\004\100\305" +
    "\001\002\000\004\062\306\001\002\000\060\011\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\020\uffa5\021\uffa5" +
    "\023\uffa5\026\uffa5\032\uffa5\033\uffa5\035\uffa5\036\uffa5\051" +
    "\uffa5\057\uffa5\060\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5" +
    "\104\uffa5\105\uffa5\001\002\000\054\011\101\012\113\013" +
    "\071\016\055\020\uffca\021\067\023\103\026\100\032\110" +
    "\033\070\035\047\036\065\051\105\057\060\060\077\100" +
    "\053\101\072\102\102\103\063\104\057\105\107\001\002" +
    "\000\004\020\311\001\002\000\004\100\312\001\002\000" +
    "\004\062\313\001\002\000\060\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\020\uffa4\021\uffa4\023\uffa4\026" +
    "\uffa4\032\uffa4\033\uffa4\035\uffa4\036\uffa4\051\uffa4\057\uffa4" +
    "\060\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\001\002\000\030\011\101\012\113\023\103\051\105" +
    "\057\060\060\077\101\115\102\102\103\063\104\057\105" +
    "\107\001\002\000\006\074\uffa2\077\uffa2\001\002\000\004" +
    "\101\317\001\002\000\004\062\320\001\002\000\012\022" +
    "\ufffb\025\ufffb\040\ufffb\101\ufffb\001\002\000\030\011\101" +
    "\012\113\023\103\051\105\057\060\060\077\101\115\102" +
    "\102\103\063\104\057\105\107\001\002\000\040\042\133" +
    "\043\121\044\123\045\130\046\132\047\117\050\131\051" +
    "\126\052\124\053\134\054\122\055\120\056\135\061\323" +
    "\075\125\001\002\000\004\062\324\001\002\000\060\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\020\uffb1" +
    "\021\uffb1\023\uffb1\026\uffb1\032\uffb1\033\uffb1\035\uffb1\036" +
    "\uffb1\051\uffb1\057\uffb1\060\uffb1\100\uffb1\101\uffb1\102\uffb1" +
    "\103\uffb1\104\uffb1\105\uffb1\001\002\000\022\004\034\005" +
    "\040\006\041\007\037\010\035\024\332\031\326\034\327" +
    "\001\002\000\014\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\001\002\000\014\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\010\ufff1\001\002\000\014\004\034\005\040\006\041\007" +
    "\037\010\035\001\002\000\010\041\333\061\ufff4\062\ufff4" +
    "\001\002\000\014\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\001\002\000\030\011\101\012\113\023\103\051\105" +
    "\057\060\060\077\101\115\102\102\103\063\104\057\105" +
    "\107\001\002\000\042\042\133\043\121\044\123\045\130" +
    "\046\132\047\117\050\131\051\126\052\124\053\134\054" +
    "\122\055\120\056\135\061\ufff3\062\ufff3\075\125\001\002" +
    "\000\010\041\336\061\ufff5\062\ufff5\001\002\000\030\011" +
    "\101\012\113\023\103\051\105\057\060\060\077\101\115" +
    "\102\102\103\063\104\057\105\107\001\002\000\042\042" +
    "\133\043\121\044\123\045\130\046\132\047\117\050\131" +
    "\051\126\052\124\053\134\054\122\055\120\056\135\061" +
    "\ufff6\062\ufff6\075\125\001\002\000\004\040\ufffe\001\002" +
    "\000\054\011\101\012\113\013\071\016\055\020\uffca\021" +
    "\067\023\103\026\100\032\110\033\070\035\047\036\065" +
    "\051\105\057\060\060\077\100\053\101\072\102\102\103" +
    "\063\104\057\105\107\001\002\000\004\020\343\001\002" +
    "\000\004\101\344\001\002\000\004\062\345\001\002\000" +
    "\004\002\001\001\002\000\004\040\ufffd\001\002\000\014" +
    "\004\034\005\040\006\041\007\037\010\035\001\002\000" +
    "\006\041\uffb3\062\uffb3\001\002\000\004\060\352\001\002" +
    "\000\010\061\ufff7\062\ufff7\101\011\001\002\000\006\061" +
    "\354\062\031\001\002\000\004\037\355\001\002\000\012" +
    "\022\017\025\012\040\ufffc\101\011\001\002\000\004\040" +
    "\357\001\002\000\054\011\101\012\113\013\071\016\055" +
    "\020\uffca\021\067\023\103\026\100\032\110\033\070\035" +
    "\047\036\065\051\105\057\060\060\077\100\053\101\072" +
    "\102\102\103\063\104\057\105\107\001\002\000\004\020" +
    "\361\001\002\000\004\101\362\001\002\000\004\062\363" +
    "\001\002\000\012\022\ufffa\025\ufffa\040\ufffa\101\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\012\020\017\035\014\036\015\037\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\012\020\017\035\345\036\015\037\013\001\001\000" +
    "\002\001\001\000\014\015\012\020\017\035\337\036\015" +
    "\037\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\015\012\020\017\035\021\036\015\037\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\024\040" +
    "\025\041\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\024\041" +
    "\031\001\001\000\002\001\001\000\004\016\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\012\020\017\035\042\036\015\037\013\001\001\000" +
    "\002\001\001\000\054\003\072\004\105\005\050\006\045" +
    "\007\063\011\110\012\047\013\074\015\012\017\065\020" +
    "\060\021\111\022\113\025\061\026\051\027\055\030\053" +
    "\031\075\032\073\043\044\044\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\271\004" +
    "\105\005\050\006\045\007\063\011\110\043\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\255\004\105\005\050\006\045" +
    "\007\063\011\110\043\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\072\004\105\005\050\006\045\007\063\011\110\012\236" +
    "\013\074\015\012\017\065\020\060\021\111\022\113\025" +
    "\061\026\051\027\055\030\053\031\075\032\073\043\044" +
    "\044\103\001\001\000\020\003\204\004\105\005\050\006" +
    "\045\007\063\011\110\043\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\003\072\004" +
    "\105\005\050\006\045\007\063\011\110\012\175\013\074" +
    "\015\012\017\065\020\060\021\111\022\113\025\061\026" +
    "\051\027\055\030\053\031\075\032\073\043\044\044\103" +
    "\001\001\000\002\001\001\000\020\003\173\004\105\005" +
    "\050\006\045\007\063\011\110\043\044\001\001\000\020" +
    "\003\171\004\105\005\050\006\045\007\063\011\110\043" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\166\004\105\005" +
    "\050\006\045\007\063\011\110\043\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\115\004\105\005" +
    "\050\006\045\007\063\011\110\043\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\156" +
    "\004\105\005\050\006\045\007\063\011\110\043\044\001" +
    "\001\000\020\003\155\004\105\005\050\006\045\007\063" +
    "\011\110\043\044\001\001\000\020\003\154\004\105\005" +
    "\050\006\045\007\063\011\110\043\044\001\001\000\020" +
    "\003\153\004\105\005\050\006\045\007\063\011\110\043" +
    "\044\001\001\000\020\003\152\004\105\005\050\006\045" +
    "\007\063\011\110\043\044\001\001\000\020\003\151\004" +
    "\105\005\050\006\045\007\063\011\110\043\044\001\001" +
    "\000\020\003\150\004\105\005\050\006\045\007\063\011" +
    "\110\043\044\001\001\000\020\003\147\004\105\005\050" +
    "\006\045\007\063\011\110\043\044\001\001\000\054\003" +
    "\072\004\105\005\050\006\045\007\063\011\110\012\143" +
    "\013\074\015\012\017\065\020\060\021\111\022\113\025" +
    "\061\026\051\027\055\030\053\031\075\032\073\043\044" +
    "\044\103\001\001\000\020\003\142\004\105\005\050\006" +
    "\045\007\063\011\110\043\044\001\001\000\020\003\141" +
    "\004\105\005\050\006\045\007\063\011\110\043\044\001" +
    "\001\000\020\003\140\004\105\005\050\006\045\007\063" +
    "\011\110\043\044\001\001\000\020\003\137\004\105\005" +
    "\050\006\045\007\063\011\110\043\044\001\001\000\020" +
    "\003\136\004\105\005\050\006\045\007\063\011\110\043" +
    "\044\001\001\000\020\003\135\004\105\005\050\006\045" +
    "\007\063\011\110\043\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\162\004\105\005\050\006\045\007" +
    "\063\010\160\011\110\043\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\162\004" +
    "\105\005\050\006\045\007\063\010\164\011\110\043\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\203" +
    "\001\001\000\020\003\201\004\105\005\050\006\045\007" +
    "\063\011\110\043\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\072\004\105\005\050\006\045\007\063\011\110\012\206" +
    "\013\074\015\012\017\065\020\060\021\111\022\113\025" +
    "\061\026\051\027\055\030\053\031\075\032\073\043\044" +
    "\044\103\001\001\000\006\023\212\024\210\001\001\000" +
    "\054\003\072\004\105\005\050\006\045\007\063\011\110" +
    "\012\232\013\074\015\012\017\065\020\060\021\111\022" +
    "\113\025\061\026\051\027\055\030\053\031\075\032\073" +
    "\043\044\044\103\001\001\000\006\023\231\024\210\001" +
    "\001\000\020\003\226\004\105\005\050\006\045\007\063" +
    "\011\110\043\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\072" +
    "\004\105\005\050\006\045\007\063\011\110\012\222\013" +
    "\074\015\012\017\065\020\060\021\111\022\113\025\061" +
    "\026\051\027\055\030\053\031\075\032\073\043\044\044" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\003\072" +
    "\004\105\005\050\006\045\007\063\011\110\012\230\013" +
    "\074\015\012\017\065\020\060\021\111\022\113\025\061" +
    "\026\051\027\055\030\053\031\075\032\073\043\044\044" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\243\004\105\005\050\006" +
    "\045\007\063\011\110\043\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\253\004\105" +
    "\005\050\006\045\007\063\011\110\043\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\260\004\105\005" +
    "\050\006\045\007\063\011\110\014\261\043\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\003\072\004" +
    "\105\005\050\006\045\007\063\011\110\012\263\013\074" +
    "\015\012\017\065\020\060\021\111\022\113\025\061\026" +
    "\051\027\055\030\053\031\075\032\073\043\044\044\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\270\004\105\005\050" +
    "\006\045\007\063\011\110\043\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\274" +
    "\004\105\005\050\006\045\007\063\011\110\014\275\033" +
    "\277\034\276\043\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\072\004\105\005\050\006\045\007\063" +
    "\011\110\012\302\013\074\015\012\017\065\020\060\021" +
    "\111\022\113\025\061\026\051\027\055\030\053\031\075" +
    "\032\073\043\044\044\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\003\072\004\105\005\050\006\045\007\063\011\110\012" +
    "\307\013\074\015\012\017\065\020\060\021\111\022\113" +
    "\025\061\026\051\027\055\030\053\031\075\032\073\043" +
    "\044\044\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\274\004" +
    "\105\005\050\006\045\007\063\011\110\014\275\033\314" +
    "\034\276\043\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\321" +
    "\004\105\005\050\006\045\007\063\011\110\043\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\330\042\327\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\334\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\333\004\105\005\050\006" +
    "\045\007\063\011\110\043\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\336\004\105\005\050\006" +
    "\045\007\063\011\110\043\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\003\072\004\105\005\050\006" +
    "\045\007\063\011\110\012\341\013\074\015\012\017\065" +
    "\020\060\021\111\022\113\025\061\026\051\027\055\030" +
    "\053\031\075\032\073\043\044\044\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\024\040\352\041" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\012\020\017\035\355\036\015\037\013\001\001\000" +
    "\002\001\001\000\054\003\072\004\105\005\050\006\045" +
    "\007\063\011\110\012\357\013\074\015\012\017\065\020" +
    "\060\021\111\022\113\025\061\026\051\027\055\030\053" +
    "\031\075\032\073\043\044\044\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line " + (s.left + 1));   
				if (s.right >= 0){
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		//System.exit(1);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // return_statement ::= RETURN expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("return_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // option_when ::= range 
            {
              Object RESULT =null;
		 System.out.println("range"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // option_when ::= expression 
            {
              Object RESULT =null;
		 System.out.println("expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // when_options ::= option_when PIPE when_options 
            {
              Object RESULT =null;
		 System.out.println("when_options"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // when_options ::= option_when 
            {
              Object RESULT =null;
		 System.out.println("option_when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_statement ::= CASE expression IS WHEN when_options OTHERS OPERPUNTERO statements END CASE PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("case_statement and Others"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_statement ::= CASE expression IS WHEN when_options OPERPUNTERO statements END CASE PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("case_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // loop_statement ::= LOOP statements END LOOP PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exit_statement ::= EXIT WHEN expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("exit when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_statement ::= FOR ID IN range LOOP statements END LOOP PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // while_statemet ::= WHILE expression LOOP statements END LOOP PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If con elsif con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_statement ::= IF expression THEN statements elsif_statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If con elsif sin else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if_statement ::= IF expression THEN statements ELSE statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If Sencillo con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_statement ::= IF expression THEN statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If Sencillo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elsif_statement ::= ELSIF expression THEN statements 
            {
              Object RESULT =null;
		 System.out.println("elsif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // elsif_statements ::= elsif_statement 
            {
              Object RESULT =null;
		 System.out.println("elsif statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // elsif_statements ::= elsif_statement elsif_statements 
            {
              Object RESULT =null;
		 System.out.println("elsif statements"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // put_value ::= PUT PARIZQ expression PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Put"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // get_value ::= GET PARIZQ ID PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Get"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable_declaration ::= variable_ids DOSPUNTOS variable_type 
            {
              Object RESULT =null;
		 System.out.println("Declaracion de variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assign_variable ::= variable_declaration OPERASIG expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("declaracion y Asignacion de variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assign_variable ::= ID OPERASIG expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a Variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variable_type ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("Tipo String"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variable_type ::= CHARACTER 
            {
              Object RESULT =null;
		 System.out.println("Tipo Character"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variable_type ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("Tipo Float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variable_type ::= BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println("Tipo Boolean"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable_type ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("Tipo Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable_ids ::= ID COMA variable_ids 
            {
              Object RESULT =null;
		 System.out.println("Ids"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable_ids ::= ID 
            {
              Object RESULT =null;
		 System.out.println("Id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // range ::= expression DOBLEPUNTO expression 
            {
              Object RESULT =null;
		 System.out.println("rango"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= return_statement 
            {
              Object RESULT =null;
		 System.out.println("return de función");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= case_statement 
            {
              Object RESULT =null;
		 System.out.println("case statement");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= loop_statement 
            {
              Object RESULT =null;
		 System.out.println("statement loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= exit_statement 
            {
              Object RESULT =null;
		 System.out.println("statement exit when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= for_statement 
            {
              Object RESULT =null;
		 System.out.println("statement for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= while_statemet 
            {
              Object RESULT =null;
		 System.out.println("statement while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= if_statement 
            {
              Object RESULT =null;
		 System.out.println("statement if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= put_value 
            {
              Object RESULT =null;
		 System.out.println("statement put value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= get_value 
            {
              Object RESULT =null;
		 System.out.println("statement get value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("statement expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= variable_declaration PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("statement Declaracion Variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= assign_variable 
            {
              Object RESULT =null;
		 System.out.println("statement asignacion de variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statements ::= statement statements 
            {
              Object RESULT =null;
		 System.out.println("statements"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_call ::= ID PARIZQ PARDER 
            {
              Object RESULT =null;
		 System.out.println("llamado a funcion o procedimiento sin parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_call ::= ID PARIZQ function_parameters PARDER 
            {
              Object RESULT =null;
		 System.out.println("llamado a funcion o procedimiento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_parameters ::= expression COMA function_parameters 
            {
              Object RESULT =null;
		 System.out.println("parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_parameters ::= expression 
            {
              Object RESULT =null;
		 System.out.println("parametro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // logical_expression ::= NOT expression 
            {
              Object RESULT =null;
		 System.out.println("not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // logical_expression ::= expression OR expression 
            {
              Object RESULT =null;
		 System.out.println("or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logical_expression ::= expression AND expression 
            {
              Object RESULT =null;
		 System.out.println("and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boolean_expression ::= expression OPERMENORIGUAL expression 
            {
              Object RESULT =null;
		 System.out.println("Menor o Igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boolean_expression ::= expression OPERMAYORIGUAL expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor o Igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boolean_expression ::= expression OPERMENOR expression 
            {
              Object RESULT =null;
		 System.out.println("Menor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // boolean_expression ::= expression OPERMAYOR expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boolean_expression ::= expression OPERDISTINTO expression 
            {
              Object RESULT =null;
		 System.out.println("Distinto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boolean_expression ::= expression OPERIGUAL expression 
            {
              Object RESULT =null;
		 System.out.println("Igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arithmetic_expression ::= expression MOD expression 
            {
              Object RESULT =null;
		 System.out.println("Residuo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arithmetic_expression ::= OPERRESTA expression 
            {
              Object RESULT =null;
		 System.out.println("Negativo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithmetic_expression ::= expression OPERPOTENCIA expression 
            {
              Object RESULT =null;
		 System.out.println("Potencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithmetic_expression ::= expression OPERMULTIPLICACION expression 
            {
              Object RESULT =null;
		 System.out.println("Multiplicacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithmetic_expression ::= expression OPERDIVISION expression 
            {
              Object RESULT =null;
		 System.out.println("Division"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arithmetic_expression ::= expression OPERRESTA expression 
            {
              Object RESULT =null;
		 System.out.println("Resta"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arithmetic_expression ::= expression OPERSUMA expression 
            {
              Object RESULT =null;
		 System.out.println("Suma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // string_expression ::= CADENA AMPERSAND string_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_expression",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // string_expression ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(cad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("string_expression",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // literal_expression ::= CARACTER 
            {
              Object RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(car); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // literal_expression ::= string_expression 
            {
              Object RESULT =null;
		 System.out.println("Cadena"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literal_expression ::= FALSE 
            {
              Object RESULT =null;
		 System.out.println("false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literal_expression ::= TRUE 
            {
              Object RESULT =null;
		 System.out.println("true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literal_expression ::= NULL 
            {
              Object RESULT =null;
		 System.out.println("null"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literal_expression ::= NUMEROFLOAT 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literal_expression ::= NUMEROENTERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= function_call 
            {
              Object RESULT =null;
		 System.out.println("Expresion Llamado a Funcion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= logical_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion Logica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= boolean_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion Booleana"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= PARIZQ expression PARDER 
            {
              Object RESULT =null;
		 System.out.println("Expresion con parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion aritmetica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= literal_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion literal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // mode ::= OUT 
            {
              Object RESULT =null;
		System.out.println("OUT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // mode ::= INOUT 
            {
              Object RESULT =null;
		System.out.println("INOUT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mode ::= IN 
            {
              Object RESULT =null;
		System.out.println("IN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter ::= variable_ids DOSPUNTOS variable_type OPERASIG expression 
            {
              Object RESULT =null;
		System.out.println("parameter with type and assignation");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter ::= variable_ids DOSPUNTOS variable_type 
            {
              Object RESULT =null;
		System.out.println("parameter with type");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameter ::= variable_ids DOSPUNTOS mode variable_type 
            {
              Object RESULT =null;
		System.out.println("parameter with type and mode");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameter ::= variable_ids DOSPUNTOS mode variable_type OPERASIG expression 
            {
              Object RESULT =null;
		System.out.println("parameter with type and mode and assign");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameter_declarations ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter_declarations ::= parameter_declarations PUNTOCOMA parameter 
            {
              Object RESULT =null;
		System.out.println("parameter_declarations");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // parameter_declarations ::= parameter 
            {
              Object RESULT =null;
		System.out.println("parameter");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("inside procedure_declaration");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("inside function_declaration");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration_part ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration_part ::= procedure_declaration declaration_part 
            {
              Object RESULT =null;
		System.out.println("procedure_declaration");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_part ::= function_declaration declaration_part 
            {
              Object RESULT =null;
		System.out.println("function_declaration");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_part ::= variable_declaration PUNTOCOMA declaration_part 
            {
              Object RESULT =null;
		System.out.println("variable_declaration");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Programa principal");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

