
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 26 17:01:28 CST 2016
//----------------------------------------------------

package mainPackage;

import java_cup.runtime.*;
import abstractSyntaxTree.*;
import java.io.File;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 26 17:01:28 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\273\000\002\002\013\000\002\002\004\000\002\046" +
    "\002\000\002\002\014\000\002\047\002\000\002\002\014" +
    "\000\002\050\002\000\002\002\014\000\002\051\002\000" +
    "\002\002\014\000\002\052\002\000\002\002\014\000\002" +
    "\053\002\000\002\002\014\000\002\002\013\000\002\002" +
    "\014\000\002\002\012\000\002\054\002\000\002\002\013" +
    "\000\002\055\002\000\002\002\013\000\002\056\002\000" +
    "\002\002\013\000\002\057\002\000\002\002\013\000\002" +
    "\002\012\000\002\002\003\000\002\037\005\000\002\037" +
    "\004\000\002\037\004\000\002\037\003\000\002\037\003" +
    "\000\002\037\004\000\002\037\004\000\002\040\020\000" +
    "\002\060\002\000\002\040\021\000\002\061\002\000\002" +
    "\040\021\000\002\062\002\000\002\040\021\000\002\063" +
    "\002\000\002\040\021\000\002\064\002\000\002\040\021" +
    "\000\002\065\002\000\002\040\021\000\002\066\002\000" +
    "\002\040\021\000\002\067\002\000\002\040\021\000\002" +
    "\040\020\000\002\040\017\000\002\070\002\000\002\040" +
    "\020\000\002\071\002\000\002\040\020\000\002\072\002" +
    "\000\002\040\020\000\002\073\002\000\002\040\020\000" +
    "\002\074\002\000\002\040\020\000\002\040\017\000\002" +
    "\041\016\000\002\075\002\000\002\041\017\000\002\076" +
    "\002\000\002\041\017\000\002\077\002\000\002\041\017" +
    "\000\002\100\002\000\002\041\017\000\002\101\002\000" +
    "\002\041\017\000\002\102\002\000\002\041\017\000\002" +
    "\103\002\000\002\041\017\000\002\041\016\000\002\041" +
    "\015\000\002\104\002\000\002\041\016\000\002\105\002" +
    "\000\002\041\016\000\002\106\002\000\002\041\016\000" +
    "\002\107\002\000\002\041\016\000\002\041\015\000\002" +
    "\042\003\000\002\042\005\000\002\042\002\000\002\043" +
    "\010\000\002\110\002\000\002\043\011\000\002\111\002" +
    "\000\002\043\011\000\002\043\010\000\002\043\006\000" +
    "\002\043\006\000\002\043\003\000\002\043\005\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\004\000\002\010\003\000\002\010\005" +
    "\000\002\011\006\000\002\011\005\000\002\012\004\000" +
    "\002\012\002\000\002\013\003\000\002\013\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\005\000" +
    "\002\015\003\000\002\015\005\000\002\112\002\000\002" +
    "\015\006\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\006\000\002\020\005" +
    "\000\002\020\005\000\002\021\007\000\002\022\007\000" +
    "\002\023\004\000\002\023\003\000\002\024\006\000\002" +
    "\025\011\000\002\025\013\000\002\025\012\000\002\025" +
    "\014\000\002\026\011\000\002\027\013\000\002\030\006" +
    "\000\002\031\007\000\002\032\011\000\002\034\003\000" +
    "\002\034\004\000\002\033\006\000\002\033\006\000\002" +
    "\035\003\000\002\035\005\000\002\036\003\000\002\036" +
    "\003\000\002\045\005\000\002\045\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ec\000\006\003\006\023\005\001\002\000\004\002" +
    "\u01ee\001\002\000\006\003\010\077\007\001\002\000\004" +
    "\002\uffe7\001\002\000\006\003\u01b1\035\u01b2\001\002\000" +
    "\004\035\uffff\001\002\000\004\035\012\001\002\000\010" +
    "\020\022\023\014\077\013\001\002\000\010\003\u01ad\062" +
    "\u01ac\063\uff69\001\002\000\006\003\u0153\077\u0152\001\002" +
    "\000\004\063\u0150\001\002\000\014\003\uffe2\020\022\023" +
    "\014\036\uffe2\077\013\001\002\000\004\036\u014a\001\002" +
    "\000\014\003\uffe3\020\022\023\014\036\uffe3\077\013\001" +
    "\002\000\006\003\u0146\060\u0147\001\002\000\006\003\024" +
    "\077\023\001\002\000\006\003\341\056\342\001\002\000" +
    "\004\056\uffde\001\002\000\004\056\026\001\002\000\010" +
    "\057\uffa5\060\uffa5\077\013\001\002\000\004\063\316\001" +
    "\002\000\006\057\122\060\123\001\002\000\012\003\uff9c" +
    "\037\033\057\uff9c\060\uff9c\001\002\000\010\003\uffa7\057" +
    "\uffa7\060\uffa7\001\002\000\024\047\036\055\047\056\044" +
    "\077\046\100\034\102\050\103\035\104\037\105\043\001" +
    "\002\000\062\003\uff8c\025\uff8c\031\uff8c\035\uff8c\040\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047" +
    "\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\065\uff8c\072\uff8c\073\uff8c\001" +
    "\002\000\062\003\uff8f\025\uff8f\031\uff8f\035\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\057\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\065\uff8f\072\uff8f\073\uff8f\001" +
    "\002\000\024\047\036\055\047\056\044\077\046\100\034" +
    "\102\050\103\035\104\037\105\043\001\002\000\062\003" +
    "\uff8e\025\uff8e\031\uff8e\035\uff8e\040\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051" +
    "\uff8e\052\uff8e\053\uff8e\054\uff8e\057\uff8e\060\uff8e\061\uff8e" +
    "\062\uff8e\065\uff8e\072\uff8e\073\uff8e\001\002\000\062\003" +
    "\uff92\025\uff92\031\uff92\035\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\065\uff92\072\uff92\073\uff92\001\002\000\062\003" +
    "\uff95\025\uff95\031\uff95\035\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\057\uff95\060\uff95\061\uff95" +
    "\062\uff95\065\uff95\072\uff95\073\uff95\001\002\000\062\003" +
    "\uff91\025\uff91\031\uff91\035\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051" +
    "\uff91\052\uff91\053\uff91\054\uff91\057\uff91\060\uff91\061\uff91" +
    "\062\uff91\065\uff91\072\uff91\073\uff91\001\002\000\062\003" +
    "\uff8d\025\uff8d\031\uff8d\035\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\062\uff8d\065\uff8d\072\uff8d\073\uff8d\001\002\000\024\047" +
    "\036\055\047\056\044\077\046\100\034\102\050\103\035" +
    "\104\037\105\043\001\002\000\044\003\uff9b\040\070\041" +
    "\056\042\060\043\064\044\066\045\054\046\065\047\063" +
    "\050\061\051\067\052\057\053\055\054\071\057\uff9b\060" +
    "\uff9b\073\062\001\002\000\064\003\uff96\025\uff96\031\uff96" +
    "\035\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96" +
    "\054\uff96\056\110\057\uff96\060\uff96\061\uff96\062\uff96\065" +
    "\uff96\072\uff96\073\uff96\001\002\000\024\047\036\055\047" +
    "\056\044\077\046\100\034\102\050\103\035\104\037\105" +
    "\043\001\002\000\062\003\uff90\025\uff90\031\uff90\035\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046" +
    "\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90" +
    "\057\uff90\060\uff90\061\uff90\062\uff90\065\uff90\072\uff90\073" +
    "\uff90\001\002\000\062\003\uff93\025\uff93\031\uff93\035\uff93" +
    "\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046" +
    "\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\065\uff93\072\uff93\073" +
    "\uff93\001\002\000\062\003\uff97\025\uff97\031\uff97\035\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046" +
    "\uff97\047\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\057\uff97\060\uff97\061\uff97\062\uff97\065\uff97\072\uff97\073" +
    "\uff97\001\002\000\062\003\uff7c\025\uff7c\031\uff7c\035\uff7c" +
    "\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\051\uff7c\052\057\053\uff7c\054\uff7c" +
    "\057\uff7c\060\uff7c\061\uff7c\062\uff7c\065\uff7c\072\uff7c\073" +
    "\uff7c\001\002\000\024\047\036\055\047\056\044\077\046" +
    "\100\034\102\050\103\035\104\037\105\043\001\002\000" +
    "\024\047\036\055\047\056\044\077\046\100\034\102\050" +
    "\103\035\104\037\105\043\001\002\000\024\047\036\055" +
    "\047\056\044\077\046\100\034\102\050\103\035\104\037" +
    "\105\043\001\002\000\024\047\036\055\047\056\044\077" +
    "\046\100\034\102\050\103\035\104\037\105\043\001\002" +
    "\000\024\047\036\055\047\056\044\077\046\100\034\102" +
    "\050\103\035\104\037\105\043\001\002\000\024\047\036" +
    "\055\047\056\044\077\046\100\034\102\050\103\035\104" +
    "\037\105\043\001\002\000\024\047\036\055\047\056\044" +
    "\077\046\100\034\102\050\103\035\104\037\105\043\001" +
    "\002\000\024\047\036\055\047\056\044\077\046\100\034" +
    "\102\050\103\035\104\037\105\043\001\002\000\024\047" +
    "\036\055\047\056\044\077\046\100\034\102\050\103\035" +
    "\104\037\105\043\001\002\000\024\047\036\055\047\056" +
    "\044\077\046\100\034\102\050\103\035\104\037\105\043" +
    "\001\002\000\024\047\036\055\047\056\044\077\046\100" +
    "\034\102\050\103\035\104\037\105\043\001\002\000\024" +
    "\047\036\055\047\056\044\077\046\100\034\102\050\103" +
    "\035\104\037\105\043\001\002\000\024\047\036\055\047" +
    "\056\044\077\046\100\034\102\050\103\035\104\037\105" +
    "\043\001\002\000\024\047\036\055\047\056\044\077\046" +
    "\100\034\102\050\103\035\104\037\105\043\001\002\000" +
    "\062\003\uff7d\025\uff7d\031\uff7d\035\uff7d\040\070\041\056" +
    "\042\060\043\064\044\066\045\054\046\065\047\063\050" +
    "\061\051\067\052\057\053\055\054\uff7d\057\uff7d\060\uff7d" +
    "\061\uff7d\062\uff7d\065\uff7d\072\uff7d\073\062\001\002\000" +
    "\062\003\uff81\025\uff81\031\uff81\035\uff81\040\uff81\041\uff81" +
    "\042\uff81\043\uff81\044\uff81\045\uff81\046\065\047\063\050" +
    "\061\051\067\052\057\053\uff81\054\uff81\057\uff81\060\uff81" +
    "\061\uff81\062\uff81\065\uff81\072\uff81\073\062\001\002\000" +
    "\062\003\uff89\025\uff89\031\uff89\035\uff89\040\uff89\041\uff89" +
    "\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050" +
    "\uff89\051\uff89\052\057\053\uff89\054\uff89\057\uff89\060\uff89" +
    "\061\uff89\062\uff89\065\uff89\072\uff89\073\062\001\002\000" +
    "\062\003\uff80\025\uff80\031\uff80\035\uff80\040\uff80\041\uff80" +
    "\042\uff80\043\uff80\044\uff80\045\uff80\046\065\047\063\050" +
    "\061\051\067\052\057\053\uff80\054\uff80\057\uff80\060\uff80" +
    "\061\uff80\062\uff80\065\uff80\072\uff80\073\062\001\002\000" +
    "\062\003\uff8b\025\uff8b\031\uff8b\035\uff8b\040\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050" +
    "\061\051\067\052\057\053\uff8b\054\uff8b\057\uff8b\060\uff8b" +
    "\061\uff8b\062\uff8b\065\uff8b\072\uff8b\073\062\001\002\000" +
    "\062\003\uff83\025\uff83\031\uff83\035\uff83\040\uff83\041\uff83" +
    "\042\uff83\043\uff83\044\uff83\045\uff83\046\065\047\063\050" +
    "\061\051\067\052\057\053\uff83\054\uff83\057\uff83\060\uff83" +
    "\061\uff83\062\uff83\065\uff83\072\uff83\073\062\001\002\000" +
    "\062\003\uff8a\025\uff8a\031\uff8a\035\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
    "\061\051\067\052\057\053\uff8a\054\uff8a\057\uff8a\060\uff8a" +
    "\061\uff8a\062\uff8a\065\uff8a\072\uff8a\073\062\001\002\000" +
    "\062\003\uff85\025\uff85\031\uff85\035\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\051\uff85\052\057\053\uff85\054\uff85\057\uff85\060\uff85" +
    "\061\uff85\062\uff85\065\uff85\072\uff85\073\uff85\001\002\000" +
    "\062\003\uff88\025\uff88\031\uff88\035\uff88\040\uff88\041\uff88" +
    "\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050" +
    "\uff88\051\uff88\052\057\053\uff88\054\uff88\057\uff88\060\uff88" +
    "\061\uff88\062\uff88\065\uff88\072\uff88\073\062\001\002\000" +
    "\062\003\uff84\025\uff84\031\uff84\035\uff84\040\uff84\041\uff84" +
    "\042\uff84\043\uff84\044\uff84\045\uff84\046\065\047\063\050" +
    "\061\051\067\052\057\053\uff84\054\uff84\057\uff84\060\uff84" +
    "\061\uff84\062\uff84\065\uff84\072\uff84\073\062\001\002\000" +
    "\062\003\uff87\025\uff87\031\uff87\035\uff87\040\uff87\041\uff87" +
    "\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050" +
    "\uff87\051\uff87\052\057\053\uff87\054\uff87\057\uff87\060\uff87" +
    "\061\uff87\062\uff87\065\uff87\072\uff87\073\uff87\001\002\000" +
    "\062\003\uff82\025\uff82\031\uff82\035\uff82\040\uff82\041\uff82" +
    "\042\uff82\043\uff82\044\uff82\045\uff82\046\065\047\063\050" +
    "\061\051\067\052\057\053\uff82\054\uff82\057\uff82\060\uff82" +
    "\061\uff82\062\uff82\065\uff82\072\uff82\073\062\001\002\000" +
    "\062\003\uff7e\025\uff7e\031\uff7e\035\uff7e\040\070\041\056" +
    "\042\060\043\064\044\066\045\054\046\065\047\063\050" +
    "\061\051\067\052\057\053\uff7e\054\uff7e\057\uff7e\060\uff7e" +
    "\061\uff7e\062\uff7e\065\uff7e\072\uff7e\073\062\001\002\000" +
    "\062\003\uff7f\025\uff7f\031\uff7f\035\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\065\047\063\050" +
    "\061\051\067\052\057\053\uff7f\054\uff7f\057\uff7f\060\uff7f" +
    "\061\uff7f\062\uff7f\065\uff7f\072\uff7f\073\062\001\002\000" +
    "\026\047\036\055\047\056\044\057\112\077\046\100\034" +
    "\102\050\103\035\104\037\105\043\001\002\000\042\040" +
    "\070\041\056\042\060\043\064\044\066\045\054\046\065" +
    "\047\063\050\061\051\067\052\057\053\055\054\071\057" +
    "\uff7b\062\115\073\062\001\002\000\062\003\uff78\025\uff78" +
    "\031\uff78\035\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044" +
    "\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78" +
    "\053\uff78\054\uff78\057\uff78\060\uff78\061\uff78\062\uff78\065" +
    "\uff78\072\uff78\073\uff78\001\002\000\004\057\114\001\002" +
    "\000\062\003\uff79\025\uff79\031\uff79\035\uff79\040\uff79\041" +
    "\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79" +
    "\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\057\uff79\060" +
    "\uff79\061\uff79\062\uff79\065\uff79\072\uff79\073\uff79\001\002" +
    "\000\024\047\036\055\047\056\044\077\046\100\034\102" +
    "\050\103\035\104\037\105\043\001\002\000\004\057\uff7a" +
    "\001\002\000\040\040\070\041\056\042\060\043\064\044" +
    "\066\045\054\046\065\047\063\050\061\051\067\052\057" +
    "\053\055\054\071\057\120\073\062\001\002\000\062\003" +
    "\uff94\025\uff94\031\uff94\035\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051" +
    "\uff94\052\uff94\053\uff94\054\uff94\057\uff94\060\uff94\061\uff94" +
    "\062\uff94\065\uff94\072\uff94\073\uff94\001\002\000\062\003" +
    "\uff86\025\uff86\031\uff86\035\uff86\040\uff86\041\uff86\042\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051" +
    "\uff86\052\057\053\uff86\054\uff86\057\uff86\060\uff86\061\uff86" +
    "\062\uff86\065\uff86\072\uff86\073\uff86\001\002\000\004\024" +
    "\125\001\002\000\004\077\013\001\002\000\010\003\uffa6" +
    "\057\uffa6\060\uffa6\001\002\000\012\004\126\005\131\006" +
    "\132\010\127\001\002\000\014\003\uff65\035\uff65\037\uff65" +
    "\057\uff65\060\uff65\001\002\000\014\003\uff62\035\uff62\037" +
    "\uff62\057\uff62\060\uff62\001\002\000\004\035\133\001\002" +
    "\000\014\003\uff64\035\uff64\037\uff64\057\uff64\060\uff64\001" +
    "\002\000\014\003\uff63\035\uff63\037\uff63\057\uff63\060\uff63" +
    "\001\002\000\010\020\022\023\014\077\013\001\002\000" +
    "\004\036\135\001\002\000\050\011\152\014\143\016\uff76" +
    "\017\151\024\160\030\162\031\150\033\136\034\146\047" +
    "\036\055\047\056\044\076\141\077\153\100\034\102\050" +
    "\103\035\104\037\105\043\001\002\000\004\056\312\001" +
    "\002\000\004\016\307\001\002\000\060\003\uff70\011\uff70" +
    "\012\uff70\013\uff70\014\uff70\016\uff70\017\uff70\024\uff70\026" +
    "\uff70\030\uff70\031\uff70\033\uff70\034\uff70\047\uff70\055\uff70" +
    "\056\uff70\076\uff70\077\uff70\100\uff70\102\uff70\103\uff70\104" +
    "\uff70\105\uff70\001\002\000\024\047\036\055\047\056\044" +
    "\077\046\100\034\102\050\103\035\104\037\105\043\001" +
    "\002\000\060\003\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e" +
    "\016\uff6e\017\uff6e\024\uff6e\026\uff6e\030\uff6e\031\uff6e\033" +
    "\uff6e\034\uff6e\047\uff6e\055\uff6e\056\uff6e\076\uff6e\077\uff6e" +
    "\100\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\001\002\000" +
    "\004\077\250\001\002\000\060\003\uff6f\011\uff6f\012\uff6f" +
    "\013\uff6f\014\uff6f\016\uff6f\017\uff6f\024\uff6f\026\uff6f\030" +
    "\uff6f\031\uff6f\033\uff6f\034\uff6f\047\uff6f\055\uff6f\056\uff6f" +
    "\076\uff6f\077\uff6f\100\uff6f\102\uff6f\103\uff6f\104\uff6f\105" +
    "\uff6f\001\002\000\060\003\uff71\011\uff71\012\uff71\013\uff71" +
    "\014\uff71\016\uff71\017\uff71\024\uff71\026\uff71\030\uff71\031" +
    "\uff71\033\uff71\034\uff71\047\uff71\055\uff71\056\uff71\076\uff71" +
    "\077\uff71\100\uff71\102\uff71\103\uff71\104\uff71\105\uff71\001" +
    "\002\000\004\056\244\001\002\000\060\003\uff75\011\uff75" +
    "\012\uff75\013\uff75\014\uff75\016\uff75\017\uff75\024\uff75\026" +
    "\uff75\030\uff75\031\uff75\033\uff75\034\uff75\047\uff75\055\uff75" +
    "\056\uff75\076\uff75\077\uff75\100\uff75\102\uff75\103\uff75\104" +
    "\uff75\105\uff75\001\002\000\050\011\152\014\143\016\uff76" +
    "\017\151\024\160\030\162\031\150\033\136\034\146\047" +
    "\036\055\047\056\044\076\141\077\153\100\034\102\050" +
    "\103\035\104\037\105\043\001\002\000\004\026\235\001" +
    "\002\000\024\047\036\055\047\056\044\077\046\100\034" +
    "\102\050\103\035\104\037\105\043\001\002\000\044\037" +
    "\200\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96" +
    "\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054" +
    "\uff96\056\110\060\uff96\073\uff96\001\002\000\040\040\070" +
    "\041\056\042\060\043\064\044\066\045\054\046\065\047" +
    "\063\050\061\051\067\052\057\053\055\054\071\060\177" +
    "\073\062\001\002\000\060\003\uff6c\011\uff6c\012\uff6c\013" +
    "\uff6c\014\uff6c\016\uff6c\017\uff6c\024\uff6c\026\uff6c\030\uff6c" +
    "\031\uff6c\033\uff6c\034\uff6c\047\uff6c\055\uff6c\056\uff6c\076" +
    "\uff6c\077\uff6c\100\uff6c\102\uff6c\103\uff6c\104\uff6c\105\uff6c" +
    "\001\002\000\060\003\uff6d\011\uff6d\012\uff6d\013\uff6d\014" +
    "\uff6d\016\uff6d\017\uff6d\024\uff6d\026\uff6d\030\uff6d\031\uff6d" +
    "\033\uff6d\034\uff6d\047\uff6d\055\uff6d\056\uff6d\076\uff6d\077" +
    "\uff6d\100\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\001\002" +
    "\000\060\003\uff76\011\152\012\uff76\013\uff76\014\143\016" +
    "\uff76\017\151\024\160\026\uff76\030\162\031\150\033\136" +
    "\034\146\047\036\055\047\056\044\076\141\077\153\100" +
    "\034\102\050\103\035\104\037\105\043\001\002\000\026" +
    "\003\174\047\036\055\047\056\044\077\046\100\034\102" +
    "\050\103\035\104\037\105\043\001\002\000\060\003\uff6b" +
    "\011\uff6b\012\uff6b\013\uff6b\014\uff6b\016\uff6b\017\uff6b\024" +
    "\uff6b\026\uff6b\030\uff6b\031\uff6b\033\uff6b\034\uff6b\047\uff6b" +
    "\055\uff6b\056\uff6b\076\uff6b\077\uff6b\100\uff6b\102\uff6b\103" +
    "\uff6b\104\uff6b\105\uff6b\001\002\000\024\047\036\055\047" +
    "\056\044\077\046\100\034\102\050\103\035\104\037\105" +
    "\043\001\002\000\060\003\uff73\011\uff73\012\uff73\013\uff73" +
    "\014\uff73\016\uff73\017\uff73\024\uff73\026\uff73\030\uff73\031" +
    "\uff73\033\uff73\034\uff73\047\uff73\055\uff73\056\uff73\076\uff73" +
    "\077\uff73\100\uff73\102\uff73\103\uff73\104\uff73\105\uff73\001" +
    "\002\000\060\003\uff72\011\uff72\012\uff72\013\uff72\014\uff72" +
    "\016\uff72\017\uff72\024\uff72\026\uff72\030\uff72\031\uff72\033" +
    "\uff72\034\uff72\047\uff72\055\uff72\056\uff72\076\uff72\077\uff72" +
    "\100\uff72\102\uff72\103\uff72\104\uff72\105\uff72\001\002\000" +
    "\040\031\166\040\070\041\056\042\060\043\064\044\066" +
    "\045\054\046\065\047\063\050\061\051\067\052\057\053" +
    "\055\054\071\073\062\001\002\000\050\011\152\014\143" +
    "\016\uff76\017\151\024\160\030\162\031\150\033\136\034" +
    "\146\047\036\055\047\056\044\076\141\077\153\100\034" +
    "\102\050\103\035\104\037\105\043\001\002\000\004\016" +
    "\170\001\002\000\004\031\171\001\002\000\004\060\172" +
    "\001\002\000\060\003\uff55\011\uff55\012\uff55\013\uff55\014" +
    "\uff55\016\uff55\017\uff55\024\uff55\026\uff55\030\uff55\031\uff55" +
    "\033\uff55\034\uff55\047\uff55\055\uff55\056\uff55\076\uff55\077" +
    "\uff55\100\uff55\102\uff55\103\uff55\104\uff55\105\uff55\001\002" +
    "\000\040\040\070\041\056\042\060\043\064\044\066\045" +
    "\054\046\065\047\063\050\061\051\067\052\057\053\055" +
    "\054\071\060\175\073\062\001\002\000\060\003\uff47\011" +
    "\uff47\012\uff47\013\uff47\014\uff47\016\uff47\017\uff47\024\uff47" +
    "\026\uff47\030\uff47\031\uff47\033\uff47\034\uff47\047\uff47\055" +
    "\uff47\056\uff47\076\uff47\077\uff47\100\uff47\102\uff47\103\uff47" +
    "\104\uff47\105\uff47\001\002\000\060\003\uff48\011\uff48\012" +
    "\uff48\013\uff48\014\uff48\016\uff48\017\uff48\024\uff48\026\uff48" +
    "\030\uff48\031\uff48\033\uff48\034\uff48\047\uff48\055\uff48\056" +
    "\uff48\076\uff48\077\uff48\100\uff48\102\uff48\103\uff48\104\uff48" +
    "\105\uff48\001\002\000\014\003\uff77\012\uff77\013\uff77\016" +
    "\uff77\026\uff77\001\002\000\060\003\uff74\011\uff74\012\uff74" +
    "\013\uff74\014\uff74\016\uff74\017\uff74\024\uff74\026\uff74\030" +
    "\uff74\031\uff74\033\uff74\034\uff74\047\uff74\055\uff74\056\uff74" +
    "\076\uff74\077\uff74\100\uff74\102\uff74\103\uff74\104\uff74\105" +
    "\uff74\001\002\000\024\047\036\055\047\056\044\077\046" +
    "\100\034\102\050\103\035\104\037\105\043\001\002\000" +
    "\040\040\070\041\056\042\060\043\064\044\066\045\054" +
    "\046\065\047\063\050\061\051\067\052\057\053\055\054" +
    "\071\060\202\073\062\001\002\000\060\003\uff61\011\uff61" +
    "\012\uff61\013\uff61\014\uff61\016\uff61\017\uff61\024\uff61\026" +
    "\uff61\030\uff61\031\uff61\033\uff61\034\uff61\047\uff61\055\uff61" +
    "\056\uff61\076\uff61\077\uff61\100\uff61\102\uff61\103\uff61\104" +
    "\uff61\105\uff61\001\002\000\040\025\204\040\070\041\056" +
    "\042\060\043\064\044\066\045\054\046\065\047\063\050" +
    "\061\051\067\052\057\053\055\054\071\073\062\001\002" +
    "\000\054\011\152\012\uff76\013\uff76\014\143\016\uff76\017" +
    "\151\024\160\030\162\031\150\033\136\034\146\047\036" +
    "\055\047\056\044\076\141\077\153\100\034\102\050\103" +
    "\035\104\037\105\043\001\002\000\010\012\206\013\211" +
    "\016\212\001\002\000\050\011\152\014\143\016\uff76\017" +
    "\151\024\160\030\162\031\150\033\136\034\146\047\036" +
    "\055\047\056\044\076\141\077\153\100\034\102\050\103" +
    "\035\104\037\105\043\001\002\000\010\012\uff5b\013\211" +
    "\016\uff5b\001\002\000\006\012\220\016\221\001\002\000" +
    "\024\047\036\055\047\056\044\077\046\100\034\102\050" +
    "\103\035\104\037\105\043\001\002\000\004\011\213\001" +
    "\002\000\004\060\214\001\002\000\060\003\uff59\011\uff59" +
    "\012\uff59\013\uff59\014\uff59\016\uff59\017\uff59\024\uff59\026" +
    "\uff59\030\uff59\031\uff59\033\uff59\034\uff59\047\uff59\055\uff59" +
    "\056\uff59\076\uff59\077\uff59\100\uff59\102\uff59\103\uff59\104" +
    "\uff59\105\uff59\001\002\000\040\025\216\040\070\041\056" +
    "\042\060\043\064\044\066\045\054\046\065\047\063\050" +
    "\061\051\067\052\057\053\055\054\071\073\062\001\002" +
    "\000\054\011\152\012\uff76\013\uff76\014\143\016\uff76\017" +
    "\151\024\160\030\162\031\150\033\136\034\146\047\036" +
    "\055\047\056\044\076\141\077\153\100\034\102\050\103" +
    "\035\104\037\105\043\001\002\000\010\012\uff5a\013\uff5a" +
    "\016\uff5a\001\002\000\050\011\152\014\143\016\uff76\017" +
    "\151\024\160\030\162\031\150\033\136\034\146\047\036" +
    "\055\047\056\044\076\141\077\153\100\034\102\050\103" +
    "\035\104\037\105\043\001\002\000\004\011\222\001\002" +
    "\000\004\060\223\001\002\000\060\003\uff57\011\uff57\012" +
    "\uff57\013\uff57\014\uff57\016\uff57\017\uff57\024\uff57\026\uff57" +
    "\030\uff57\031\uff57\033\uff57\034\uff57\047\uff57\055\uff57\056" +
    "\uff57\076\uff57\077\uff57\100\uff57\102\uff57\103\uff57\104\uff57" +
    "\105\uff57\001\002\000\004\016\225\001\002\000\004\011" +
    "\226\001\002\000\004\060\227\001\002\000\060\003\uff56" +
    "\011\uff56\012\uff56\013\uff56\014\uff56\016\uff56\017\uff56\024" +
    "\uff56\026\uff56\030\uff56\031\uff56\033\uff56\034\uff56\047\uff56" +
    "\055\uff56\056\uff56\076\uff56\077\uff56\100\uff56\102\uff56\103" +
    "\uff56\104\uff56\105\uff56\001\002\000\006\012\uff5c\016\uff5c" +
    "\001\002\000\004\016\232\001\002\000\004\011\233\001" +
    "\002\000\004\060\234\001\002\000\060\003\uff58\011\uff58" +
    "\012\uff58\013\uff58\014\uff58\016\uff58\017\uff58\024\uff58\026" +
    "\uff58\030\uff58\031\uff58\033\uff58\034\uff58\047\uff58\055\uff58" +
    "\056\uff58\076\uff58\077\uff58\100\uff58\102\uff58\103\uff58\104" +
    "\uff58\105\uff58\001\002\000\024\047\036\055\047\056\044" +
    "\077\046\100\034\102\050\103\035\104\037\105\043\001" +
    "\002\000\040\040\070\041\056\042\060\043\064\044\066" +
    "\045\054\046\065\047\063\050\061\051\067\052\057\053" +
    "\055\054\071\060\237\073\062\001\002\000\060\003\uff53" +
    "\011\uff53\012\uff53\013\uff53\014\uff53\016\uff53\017\uff53\024" +
    "\uff53\026\uff53\030\uff53\031\uff53\033\uff53\034\uff53\047\uff53" +
    "\055\uff53\056\uff53\076\uff53\077\uff53\100\uff53\102\uff53\103" +
    "\uff53\104\uff53\105\uff53\001\002\000\004\016\241\001\002" +
    "\000\004\031\242\001\002\000\004\060\243\001\002\000" +
    "\060\003\uff52\011\uff52\012\uff52\013\uff52\014\uff52\016\uff52" +
    "\017\uff52\024\uff52\026\uff52\030\uff52\031\uff52\033\uff52\034" +
    "\uff52\047\uff52\055\uff52\056\uff52\076\uff52\077\uff52\100\uff52" +
    "\102\uff52\103\uff52\104\uff52\105\uff52\001\002\000\004\077" +
    "\245\001\002\000\004\057\246\001\002\000\004\060\247" +
    "\001\002\000\060\003\uff5e\011\uff5e\012\uff5e\013\uff5e\014" +
    "\uff5e\016\uff5e\017\uff5e\024\uff5e\026\uff5e\030\uff5e\031\uff5e" +
    "\033\uff5e\034\uff5e\047\uff5e\055\uff5e\056\uff5e\076\uff5e\077" +
    "\uff5e\100\uff5e\102\uff5e\103\uff5e\104\uff5e\105\uff5e\001\002" +
    "\000\004\027\251\001\002\000\024\047\036\055\047\056" +
    "\044\077\046\100\034\102\050\103\035\104\037\105\043" +
    "\001\002\000\004\031\256\001\002\000\040\040\070\041" +
    "\056\042\060\043\064\044\066\045\054\046\065\047\063" +
    "\050\061\051\067\052\057\053\055\054\071\061\254\073" +
    "\062\001\002\000\024\047\036\055\047\056\044\077\046" +
    "\100\034\102\050\103\035\104\037\105\043\001\002\000" +
    "\044\031\uff6a\040\070\041\056\042\060\043\064\044\066" +
    "\045\054\046\065\047\063\050\061\051\067\052\057\053" +
    "\055\054\071\065\uff6a\072\uff6a\073\062\001\002\000\050" +
    "\011\152\014\143\016\uff76\017\151\024\160\030\162\031" +
    "\150\033\136\034\146\047\036\055\047\056\044\076\141" +
    "\077\153\100\034\102\050\103\035\104\037\105\043\001" +
    "\002\000\004\016\260\001\002\000\004\031\261\001\002" +
    "\000\004\060\262\001\002\000\060\003\uff54\011\uff54\012" +
    "\uff54\013\uff54\014\uff54\016\uff54\017\uff54\024\uff54\026\uff54" +
    "\030\uff54\031\uff54\033\uff54\034\uff54\047\uff54\055\uff54\056" +
    "\uff54\076\uff54\077\uff54\100\uff54\102\uff54\103\uff54\104\uff54" +
    "\105\uff54\001\002\000\040\035\264\040\070\041\056\042" +
    "\060\043\064\044\066\045\054\046\065\047\063\050\061" +
    "\051\067\052\057\053\055\054\071\073\062\001\002\000" +
    "\004\026\265\001\002\000\026\047\036\055\047\056\044" +
    "\075\274\077\046\100\034\102\050\103\035\104\037\105" +
    "\043\001\002\000\004\016\271\001\002\000\006\016\uff50" +
    "\026\265\001\002\000\004\016\uff4f\001\002\000\004\076" +
    "\272\001\002\000\004\060\273\001\002\000\060\003\uff51" +
    "\011\uff51\012\uff51\013\uff51\014\uff51\016\uff51\017\uff51\024" +
    "\uff51\026\uff51\030\uff51\031\uff51\033\uff51\034\uff51\047\uff51" +
    "\055\uff51\056\uff51\076\uff51\077\uff51\100\uff51\102\uff51\103" +
    "\uff51\104\uff51\105\uff51\001\002\000\004\072\305\001\002" +
    "\000\044\040\070\041\056\042\060\043\064\044\066\045" +
    "\054\046\065\047\063\050\061\051\067\052\057\053\055" +
    "\054\071\061\254\065\uff4a\072\uff4a\073\062\001\002\000" +
    "\006\065\uff49\072\uff49\001\002\000\006\065\303\072\uff4c" +
    "\001\002\000\004\072\301\001\002\000\052\011\152\014" +
    "\143\016\uff76\017\151\024\160\026\uff76\030\162\031\150" +
    "\033\136\034\146\047\036\055\047\056\044\076\141\077" +
    "\153\100\034\102\050\103\035\104\037\105\043\001\002" +
    "\000\006\016\uff4e\026\uff4e\001\002\000\024\047\036\055" +
    "\047\056\044\077\046\100\034\102\050\103\035\104\037" +
    "\105\043\001\002\000\004\072\uff4b\001\002\000\052\011" +
    "\152\014\143\016\uff76\017\151\024\160\026\uff76\030\162" +
    "\031\150\033\136\034\146\047\036\055\047\056\044\076" +
    "\141\077\153\100\034\102\050\103\035\104\037\105\043" +
    "\001\002\000\006\016\uff4d\026\uff4d\001\002\000\004\077" +
    "\310\001\002\000\004\060\311\001\002\000\014\003\uffdd" +
    "\020\uffdd\023\uffdd\036\uffdd\077\uffdd\001\002\000\024\047" +
    "\036\055\047\056\044\077\046\100\034\102\050\103\035" +
    "\104\037\105\043\001\002\000\040\040\070\041\056\042" +
    "\060\043\064\044\066\045\054\046\065\047\063\050\061" +
    "\051\067\052\057\053\055\054\071\057\314\073\062\001" +
    "\002\000\004\060\315\001\002\000\060\003\uff5d\011\uff5d" +
    "\012\uff5d\013\uff5d\014\uff5d\016\uff5d\017\uff5d\024\uff5d\026" +
    "\uff5d\030\uff5d\031\uff5d\033\uff5d\034\uff5d\047\uff5d\055\uff5d" +
    "\056\uff5d\076\uff5d\077\uff5d\100\uff5d\102\uff5d\103\uff5d\104" +
    "\uff5d\105\uff5d\001\002\000\022\003\322\004\126\005\131" +
    "\006\132\010\127\022\324\027\317\032\320\001\002\000" +
    "\014\003\uff9a\004\uff9a\005\uff9a\006\uff9a\010\uff9a\001\002" +
    "\000\014\003\uff99\004\uff99\005\uff99\006\uff99\010\uff99\001" +
    "\002\000\014\003\331\004\126\005\131\006\132\010\127" +
    "\001\002\000\022\003\uff5f\004\uffa3\005\uffa3\006\uffa3\010" +
    "\uffa3\037\uff5f\057\uff5f\060\uff5f\001\002\000\012\003\uff60" +
    "\037\uff60\057\uff60\060\uff60\001\002\000\014\003\uff98\004" +
    "\uff98\005\uff98\006\uff98\010\uff98\001\002\000\012\004\126" +
    "\005\131\006\132\010\127\001\002\000\004\037\327\001" +
    "\002\000\024\047\036\055\047\056\044\077\046\100\034" +
    "\102\050\103\035\104\037\105\043\001\002\000\044\003" +
    "\uffa2\040\070\041\056\042\060\043\064\044\066\045\054" +
    "\046\065\047\063\050\061\051\067\052\057\053\055\054" +
    "\071\057\uffa2\060\uffa2\073\062\001\002\000\012\003\uff9d" +
    "\037\uffa1\057\uff9d\060\uff9d\001\002\000\012\003\uff9e\037" +
    "\333\057\uff9e\060\uff9e\001\002\000\026\003\335\047\036" +
    "\055\047\056\044\077\046\100\034\102\050\103\035\104" +
    "\037\105\043\001\002\000\044\003\uffa4\040\070\041\056" +
    "\042\060\043\064\044\066\045\054\046\065\047\063\050" +
    "\061\051\067\052\057\053\055\054\071\057\uffa4\060\uffa4" +
    "\073\062\001\002\000\010\003\uff9f\057\uff9f\060\uff9f\001" +
    "\002\000\004\037\337\001\002\000\024\047\036\055\047" +
    "\056\044\077\046\100\034\102\050\103\035\104\037\105" +
    "\043\001\002\000\044\003\uffa0\040\070\041\056\042\060" +
    "\043\064\044\066\045\054\046\065\047\063\050\061\051" +
    "\067\052\057\053\055\054\071\057\uffa0\060\uffa0\073\062" +
    "\001\002\000\010\057\uffdc\060\uffdc\077\uffdc\001\002\000" +
    "\012\003\uffa5\057\uffa5\060\uffa5\077\013\001\002\000\010" +
    "\003\344\057\345\060\123\001\002\000\004\024\uffda\001" +
    "\002\000\006\003\346\024\347\001\002\000\012\004\uffd8" +
    "\005\uffd8\006\uffd8\010\uffd8\001\002\000\014\003\350\004" +
    "\126\005\131\006\132\010\127\001\002\000\004\035\uffcc" +
    "\001\002\000\006\003\352\035\353\001\002\000\012\020" +
    "\uffd6\023\uffd6\036\uffca\077\uffd6\001\002\000\014\003\355" +
    "\020\022\023\014\036\356\077\013\001\002\000\006\003" +
    "\u0100\036\u0101\001\002\000\050\011\uffc8\014\uffc8\016\uffc8" +
    "\017\uffc8\024\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\047" +
    "\uffc8\055\uffc8\056\uffc8\076\uffc8\077\uffc8\100\uffc8\102\uffc8" +
    "\103\uffc8\104\uffc8\105\uffc8\001\002\000\052\003\uff76\011" +
    "\152\014\143\016\uff76\017\151\024\160\030\162\031\150" +
    "\033\136\034\146\047\036\055\047\056\044\076\141\077" +
    "\153\100\034\102\050\103\035\104\037\105\043\001\002" +
    "\000\006\003\360\016\361\001\002\000\004\077\uffc6\001" +
    "\002\000\006\003\363\077\362\001\002\000\006\003\366" +
    "\060\367\001\002\000\004\060\uffc4\001\002\000\004\060" +
    "\365\001\002\000\014\003\uffc3\020\uffc3\023\uffc3\036\uffc3" +
    "\077\uffc3\001\002\000\014\003\uffc2\020\uffc2\023\uffc2\036" +
    "\uffc2\077\uffc2\001\002\000\014\003\uffcd\020\uffcd\023\uffcd" +
    "\036\uffcd\077\uffcd\001\002\000\004\077\371\001\002\000" +
    "\004\060\372\001\002\000\014\003\uffc5\020\uffc5\023\uffc5" +
    "\036\uffc5\077\uffc5\001\002\000\050\011\152\014\143\016" +
    "\uff76\017\151\024\160\030\162\031\150\033\136\034\146" +
    "\047\036\055\047\056\044\076\141\077\153\100\034\102" +
    "\050\103\035\104\037\105\043\001\002\000\004\016\375" +
    "\001\002\000\004\077\376\001\002\000\004\060\377\001" +
    "\002\000\014\003\uffc7\020\uffc7\023\uffc7\036\uffc7\077\uffc7" +
    "\001\002\000\050\011\uffd4\014\uffd4\016\uffd4\017\uffd4\024" +
    "\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4\047\uffd4\055\uffd4" +
    "\056\uffd4\076\uffd4\077\uffd4\100\uffd4\102\uffd4\103\uffd4\104" +
    "\uffd4\105\uffd4\001\002\000\052\003\uff76\011\152\014\143" +
    "\016\uff76\017\151\024\160\030\162\031\150\033\136\034" +
    "\146\047\036\055\047\056\044\076\141\077\153\100\034" +
    "\102\050\103\035\104\037\105\043\001\002\000\006\003" +
    "\u0103\016\u0104\001\002\000\004\077\uffd2\001\002\000\006" +
    "\003\u0106\077\u0105\001\002\000\006\003\u0109\060\u010a\001" +
    "\002\000\004\060\uffd0\001\002\000\004\060\u0108\001\002" +
    "\000\014\003\uffcf\020\uffcf\023\uffcf\036\uffcf\077\uffcf\001" +
    "\002\000\014\003\uffce\020\uffce\023\uffce\036\uffce\077\uffce" +
    "\001\002\000\014\003\uffdf\020\uffdf\023\uffdf\036\uffdf\077" +
    "\uffdf\001\002\000\004\077\u010c\001\002\000\004\060\u010d" +
    "\001\002\000\014\003\uffd1\020\uffd1\023\uffd1\036\uffd1\077" +
    "\uffd1\001\002\000\050\011\152\014\143\016\uff76\017\151" +
    "\024\160\030\162\031\150\033\136\034\146\047\036\055" +
    "\047\056\044\076\141\077\153\100\034\102\050\103\035" +
    "\104\037\105\043\001\002\000\004\016\u0110\001\002\000" +
    "\004\077\u0111\001\002\000\004\060\u0112\001\002\000\014" +
    "\003\uffd3\020\uffd3\023\uffd3\036\uffd3\077\uffd3\001\002\000" +
    "\004\036\u011b\001\002\000\010\020\022\023\014\077\013" +
    "\001\002\000\004\036\u0116\001\002\000\050\011\152\014" +
    "\143\016\uff76\017\151\024\160\030\162\031\150\033\136" +
    "\034\146\047\036\055\047\056\044\076\141\077\153\100" +
    "\034\102\050\103\035\104\037\105\043\001\002\000\004" +
    "\016\u0118\001\002\000\004\077\u0119\001\002\000\004\060" +
    "\u011a\001\002\000\014\003\uffd5\020\uffd5\023\uffd5\036\uffd5" +
    "\077\uffd5\001\002\000\050\011\152\014\143\016\uff76\017" +
    "\151\024\160\030\162\031\150\033\136\034\146\047\036" +
    "\055\047\056\044\076\141\077\153\100\034\102\050\103" +
    "\035\104\037\105\043\001\002\000\004\016\u011d\001\002" +
    "\000\004\077\u011e\001\002\000\004\060\u011f\001\002\000" +
    "\014\003\uffc9\020\uffc9\023\uffc9\036\uffc9\077\uffc9\001\002" +
    "\000\004\035\u0121\001\002\000\004\036\u0122\001\002\000" +
    "\050\011\152\014\143\016\uff76\017\151\024\160\030\162" +
    "\031\150\033\136\034\146\047\036\055\047\056\044\076" +
    "\141\077\153\100\034\102\050\103\035\104\037\105\043" +
    "\001\002\000\004\016\u0124\001\002\000\004\077\u0125\001" +
    "\002\000\004\060\u0126\001\002\000\014\003\uffcb\020\uffcb" +
    "\023\uffcb\036\uffcb\077\uffcb\001\002\000\012\004\126\005" +
    "\131\006\132\010\127\001\002\000\004\035\u0129\001\002" +
    "\000\010\020\022\023\014\077\013\001\002\000\004\036" +
    "\u012b\001\002\000\050\011\152\014\143\016\uff76\017\151" +
    "\024\160\030\162\031\150\033\136\034\146\047\036\055" +
    "\047\056\044\076\141\077\153\100\034\102\050\103\035" +
    "\104\037\105\043\001\002\000\004\016\u012d\001\002\000" +
    "\004\077\u012e\001\002\000\004\060\u012f\001\002\000\014" +
    "\003\uffd7\020\uffd7\023\uffd7\036\uffd7\077\uffd7\001\002\000" +
    "\004\024\u0131\001\002\000\012\004\126\005\131\006\132" +
    "\010\127\001\002\000\004\035\u0133\001\002\000\010\020" +
    "\022\023\014\077\013\001\002\000\004\036\u0135\001\002" +
    "\000\050\011\152\014\143\016\uff76\017\151\024\160\030" +
    "\162\031\150\033\136\034\146\047\036\055\047\056\044" +
    "\076\141\077\153\100\034\102\050\103\035\104\037\105" +
    "\043\001\002\000\004\016\u0137\001\002\000\004\077\u0138" +
    "\001\002\000\004\060\u0139\001\002\000\014\003\uffd9\020" +
    "\uffd9\023\uffd9\036\uffd9\077\uffd9\001\002\000\010\057\uffa5" +
    "\060\uffa5\077\013\001\002\000\006\057\u013c\060\123\001" +
    "\002\000\004\024\u013d\001\002\000\012\004\126\005\131" +
    "\006\132\010\127\001\002\000\004\035\u013f\001\002\000" +
    "\010\020\022\023\014\077\013\001\002\000\004\036\u0141" +
    "\001\002\000\050\011\152\014\143\016\uff76\017\151\024" +
    "\160\030\162\031\150\033\136\034\146\047\036\055\047" +
    "\056\044\076\141\077\153\100\034\102\050\103\035\104" +
    "\037\105\043\001\002\000\004\016\u0143\001\002\000\004" +
    "\077\u0144\001\002\000\004\060\u0145\001\002\000\014\003" +
    "\uffdb\020\uffdb\023\uffdb\036\uffdb\077\uffdb\001\002\000\006" +
    "\003\uffe0\036\uffe0\001\002\000\014\003\uffe1\020\022\023" +
    "\014\036\uffe1\077\013\001\002\000\006\003\uffe6\036\uffe6" +
    "\001\002\000\006\003\uffe5\036\uffe5\001\002\000\050\011" +
    "\152\014\143\016\uff76\017\151\024\160\030\162\031\150" +
    "\033\136\034\146\047\036\055\047\056\044\076\141\077" +
    "\153\100\034\102\050\103\035\104\037\105\043\001\002" +
    "\000\004\016\u014c\001\002\000\004\077\u014d\001\002\000" +
    "\004\060\u014e\001\002\000\004\002\ufffe\001\002\000\006" +
    "\003\uffe4\036\uffe4\001\002\000\014\003\u0151\004\126\005" +
    "\131\006\132\010\127\001\002\000\006\003\uff5f\060\uff5f" +
    "\001\002\000\006\003\u015f\056\u0160\001\002\000\004\056" +
    "\uffc0\001\002\000\004\056\u0155\001\002\000\010\057\uffa5" +
    "\060\uffa5\077\013\001\002\000\006\057\u0157\060\123\001" +
    "\002\000\004\035\u0158\001\002\000\010\020\022\023\014" +
    "\077\013\001\002\000\004\036\u015a\001\002\000\050\011" +
    "\152\014\143\016\uff76\017\151\024\160\030\162\031\150" +
    "\033\136\034\146\047\036\055\047\056\044\076\141\077" +
    "\153\100\034\102\050\103\035\104\037\105\043\001\002" +
    "\000\004\016\u015c\001\002\000\004\077\u015d\001\002\000" +
    "\004\060\u015e\001\002\000\014\003\uffbf\020\uffbf\023\uffbf" +
    "\036\uffbf\077\uffbf\001\002\000\010\057\uffbe\060\uffbe\077" +
    "\uffbe\001\002\000\012\003\uffa5\057\uffa5\060\uffa5\077\013" +
    "\001\002\000\010\003\u0162\057\u0163\060\123\001\002\000" +
    "\004\035\uffbc\001\002\000\006\003\u0164\035\u0165\001\002" +
    "\000\012\020\uffba\023\uffba\036\uffb0\077\uffba\001\002\000" +
    "\014\003\u0167\020\022\023\014\036\u0168\077\013\001\002" +
    "\000\006\003\u017a\036\u017b\001\002\000\050\011\uffae\014" +
    "\uffae\016\uffae\017\uffae\024\uffae\030\uffae\031\uffae\033\uffae" +
    "\034\uffae\047\uffae\055\uffae\056\uffae\076\uffae\077\uffae\100" +
    "\uffae\102\uffae\103\uffae\104\uffae\105\uffae\001\002\000\052" +
    "\003\uff76\011\152\014\143\016\uff76\017\151\024\160\030" +
    "\162\031\150\033\136\034\146\047\036\055\047\056\044" +
    "\076\141\077\153\100\034\102\050\103\035\104\037\105" +
    "\043\001\002\000\006\003\u016a\016\u016b\001\002\000\004" +
    "\077\uffac\001\002\000\006\003\u016d\077\u016c\001\002\000" +
    "\006\003\u0170\060\u0171\001\002\000\004\060\uffaa\001\002" +
    "\000\004\060\u016f\001\002\000\014\003\uffa9\020\uffa9\023" +
    "\uffa9\036\uffa9\077\uffa9\001\002\000\014\003\uffa8\020\uffa8" +
    "\023\uffa8\036\uffa8\077\uffa8\001\002\000\014\003\uffb1\020" +
    "\uffb1\023\uffb1\036\uffb1\077\uffb1\001\002\000\004\077\u0173" +
    "\001\002\000\004\060\u0174\001\002\000\014\003\uffab\020" +
    "\uffab\023\uffab\036\uffab\077\uffab\001\002\000\050\011\152" +
    "\014\143\016\uff76\017\151\024\160\030\162\031\150\033" +
    "\136\034\146\047\036\055\047\056\044\076\141\077\153" +
    "\100\034\102\050\103\035\104\037\105\043\001\002\000" +
    "\004\016\u0177\001\002\000\004\077\u0178\001\002\000\004" +
    "\060\u0179\001\002\000\014\003\uffad\020\uffad\023\uffad\036" +
    "\uffad\077\uffad\001\002\000\050\011\uffb8\014\uffb8\016\uffb8" +
    "\017\uffb8\024\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\047" +
    "\uffb8\055\uffb8\056\uffb8\076\uffb8\077\uffb8\100\uffb8\102\uffb8" +
    "\103\uffb8\104\uffb8\105\uffb8\001\002\000\052\003\uff76\011" +
    "\152\014\143\016\uff76\017\151\024\160\030\162\031\150" +
    "\033\136\034\146\047\036\055\047\056\044\076\141\077" +
    "\153\100\034\102\050\103\035\104\037\105\043\001\002" +
    "\000\006\003\u017d\016\u017e\001\002\000\004\077\uffb6\001" +
    "\002\000\006\003\u0180\077\u017f\001\002\000\006\003\u0183" +
    "\060\u0184\001\002\000\004\060\uffb4\001\002\000\004\060" +
    "\u0182\001\002\000\014\003\uffb3\020\uffb3\023\uffb3\036\uffb3" +
    "\077\uffb3\001\002\000\014\003\uffb2\020\uffb2\023\uffb2\036" +
    "\uffb2\077\uffb2\001\002\000\014\003\uffc1\020\uffc1\023\uffc1" +
    "\036\uffc1\077\uffc1\001\002\000\004\077\u0186\001\002\000" +
    "\004\060\u0187\001\002\000\014\003\uffb5\020\uffb5\023\uffb5" +
    "\036\uffb5\077\uffb5\001\002\000\050\011\152\014\143\016" +
    "\uff76\017\151\024\160\030\162\031\150\033\136\034\146" +
    "\047\036\055\047\056\044\076\141\077\153\100\034\102" +
    "\050\103\035\104\037\105\043\001\002\000\004\016\u018a" +
    "\001\002\000\004\077\u018b\001\002\000\004\060\u018c\001" +
    "\002\000\014\003\uffb7\020\uffb7\023\uffb7\036\uffb7\077\uffb7" +
    "\001\002\000\004\036\u0195\001\002\000\010\020\022\023" +
    "\014\077\013\001\002\000\004\036\u0190\001\002\000\050" +
    "\011\152\014\143\016\uff76\017\151\024\160\030\162\031" +
    "\150\033\136\034\146\047\036\055\047\056\044\076\141" +
    "\077\153\100\034\102\050\103\035\104\037\105\043\001" +
    "\002\000\004\016\u0192\001\002\000\004\077\u0193\001\002" +
    "\000\004\060\u0194\001\002\000\014\003\uffb9\020\uffb9\023" +
    "\uffb9\036\uffb9\077\uffb9\001\002\000\050\011\152\014\143" +
    "\016\uff76\017\151\024\160\030\162\031\150\033\136\034" +
    "\146\047\036\055\047\056\044\076\141\077\153\100\034" +
    "\102\050\103\035\104\037\105\043\001\002\000\004\016" +
    "\u0197\001\002\000\004\077\u0198\001\002\000\004\060\u0199" +
    "\001\002\000\014\003\uffaf\020\uffaf\023\uffaf\036\uffaf\077" +
    "\uffaf\001\002\000\004\035\u019b\001\002\000\010\020\022" +
    "\023\014\077\013\001\002\000\004\036\u019d\001\002\000" +
    "\050\011\152\014\143\016\uff76\017\151\024\160\030\162" +
    "\031\150\033\136\034\146\047\036\055\047\056\044\076" +
    "\141\077\153\100\034\102\050\103\035\104\037\105\043" +
    "\001\002\000\004\016\u019f\001\002\000\004\077\u01a0\001" +
    "\002\000\004\060\u01a1\001\002\000\014\003\uffbb\020\uffbb" +
    "\023\uffbb\036\uffbb\077\uffbb\001\002\000\010\057\uffa5\060" +
    "\uffa5\077\013\001\002\000\006\057\u01a4\060\123\001\002" +
    "\000\004\035\u01a5\001\002\000\010\020\022\023\014\077" +
    "\013\001\002\000\004\036\u01a7\001\002\000\050\011\152" +
    "\014\143\016\uff76\017\151\024\160\030\162\031\150\033" +
    "\136\034\146\047\036\055\047\056\044\076\141\077\153" +
    "\100\034\102\050\103\035\104\037\105\043\001\002\000" +
    "\004\016\u01a9\001\002\000\004\077\u01aa\001\002\000\004" +
    "\060\u01ab\001\002\000\014\003\uffbd\020\uffbd\023\uffbd\036" +
    "\uffbd\077\uffbd\001\002\000\004\077\013\001\002\000\004" +
    "\077\uff67\001\002\000\004\077\013\001\002\000\004\063" +
    "\uff66\001\002\000\004\063\uff68\001\002\000\012\020\ufffd" +
    "\023\ufffd\036\ufff0\077\ufffd\001\002\000\014\003\u01b4\020" +
    "\022\023\014\036\u01b5\077\013\001\002\000\006\003\u01cd" +
    "\036\u01ce\001\002\000\052\011\uffee\014\uffee\016\uffee\017" +
    "\uffee\024\uffee\030\uffee\031\uffee\033\uffee\034\uffee\036\ufffb" +
    "\047\uffee\055\uffee\056\uffee\076\uffee\077\uffee\100\uffee\102" +
    "\uffee\103\uffee\104\uffee\105\uffee\001\002\000\052\003\uff76" +
    "\011\152\014\143\016\uff76\017\151\024\160\030\162\031" +
    "\150\033\136\034\146\047\036\055\047\056\044\076\141" +
    "\077\153\100\034\102\050\103\035\104\037\105\043\001" +
    "\002\000\006\003\u01b7\016\u01b8\001\002\000\004\077\uffec" +
    "\001\002\000\006\003\u01ba\077\u01b9\001\002\000\006\003" +
    "\u01bd\060\u01be\001\002\000\004\060\uffea\001\002\000\004" +
    "\060\u01bc\001\002\000\004\002\uffe9\001\002\000\004\002" +
    "\uffe8\001\002\000\004\002\ufff1\001\002\000\004\077\u01c0" +
    "\001\002\000\004\060\u01c1\001\002\000\004\002\uffeb\001" +
    "\002\000\004\036\u01c8\001\002\000\050\011\152\014\143" +
    "\016\uff76\017\151\024\160\030\162\031\150\033\136\034" +
    "\146\047\036\055\047\056\044\076\141\077\153\100\034" +
    "\102\050\103\035\104\037\105\043\001\002\000\004\016" +
    "\u01c5\001\002\000\004\077\u01c6\001\002\000\004\060\u01c7" +
    "\001\002\000\004\002\uffed\001\002\000\050\011\152\014" +
    "\143\016\uff76\017\151\024\160\030\162\031\150\033\136" +
    "\034\146\047\036\055\047\056\044\076\141\077\153\100" +
    "\034\102\050\103\035\104\037\105\043\001\002\000\004" +
    "\016\u01ca\001\002\000\004\077\u01cb\001\002\000\004\060" +
    "\u01cc\001\002\000\004\002\ufffa\001\002\000\050\011\ufff9" +
    "\014\ufff9\016\ufff9\017\ufff9\024\ufff9\030\ufff9\031\ufff9\033" +
    "\ufff9\034\ufff9\047\ufff9\055\ufff9\056\ufff9\076\ufff9\077\ufff9" +
    "\100\ufff9\102\ufff9\103\ufff9\104\ufff9\105\ufff9\001\002\000" +
    "\052\003\uff76\011\152\014\143\016\uff76\017\151\024\160" +
    "\030\162\031\150\033\136\034\146\047\036\055\047\056" +
    "\044\076\141\077\153\100\034\102\050\103\035\104\037" +
    "\105\043\001\002\000\006\003\u01d0\016\u01d1\001\002\000" +
    "\004\077\ufff7\001\002\000\006\003\u01d3\077\u01d2\001\002" +
    "\000\006\003\u01d6\060\u01d7\001\002\000\004\060\ufff5\001" +
    "\002\000\004\060\u01d5\001\002\000\004\002\ufff4\001\002" +
    "\000\004\002\ufff3\001\002\000\006\002\001\003\u01d8\001" +
    "\002\000\004\002\ufff2\001\002\000\004\077\u01da\001\002" +
    "\000\004\060\u01db\001\002\000\004\002\ufff6\001\002\000" +
    "\050\011\152\014\143\016\uff76\017\151\024\160\030\162" +
    "\031\150\033\136\034\146\047\036\055\047\056\044\076" +
    "\141\077\153\100\034\102\050\103\035\104\037\105\043" +
    "\001\002\000\004\016\u01de\001\002\000\004\077\u01df\001" +
    "\002\000\004\060\u01e0\001\002\000\004\002\ufff8\001\002" +
    "\000\010\020\022\023\014\077\013\001\002\000\004\036" +
    "\u01e3\001\002\000\050\011\152\014\143\016\uff76\017\151" +
    "\024\160\030\162\031\150\033\136\034\146\047\036\055" +
    "\047\056\044\076\141\077\153\100\034\102\050\103\035" +
    "\104\037\105\043\001\002\000\004\016\u01e5\001\002\000" +
    "\004\077\u01e6\001\002\000\004\060\u01e7\001\002\000\004" +
    "\002\uffef\001\002\000\004\036\u01e9\001\002\000\050\011" +
    "\152\014\143\016\uff76\017\151\024\160\030\162\031\150" +
    "\033\136\034\146\047\036\055\047\056\044\076\141\077" +
    "\153\100\034\102\050\103\035\104\037\105\043\001\002" +
    "\000\004\016\u01eb\001\002\000\004\077\u01ec\001\002\000" +
    "\004\060\u01ed\001\002\000\004\002\ufffc\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ec\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\010\001\001\000\002\001\001\000\014\015\014\020" +
    "\020\037\016\040\017\041\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\014\020" +
    "\020\037\u014e\040\017\041\015\001\001\000\002\001\001" +
    "\000\014\015\014\020\020\037\u0148\040\017\041\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\024\001\001\000\002\001\001\000\012\015" +
    "\026\020\030\042\027\043\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\044\004\051\005\040\006\050\007\037\011\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\120\004\051\005\040\006\050\007\037\011\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\116\004\051" +
    "\005\040\006\050\007\037\011\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\052\004\051\005\040" +
    "\006\050\007\037\011\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\106\004\051\005\040\006\050\007\037\011\041\001" +
    "\001\000\016\003\105\004\051\005\040\006\050\007\037" +
    "\011\041\001\001\000\016\003\104\004\051\005\040\006" +
    "\050\007\037\011\041\001\001\000\016\003\103\004\051" +
    "\005\040\006\050\007\037\011\041\001\001\000\016\003" +
    "\102\004\051\005\040\006\050\007\037\011\041\001\001" +
    "\000\016\003\101\004\051\005\040\006\050\007\037\011" +
    "\041\001\001\000\016\003\100\004\051\005\040\006\050" +
    "\007\037\011\041\001\001\000\016\003\077\004\051\005" +
    "\040\006\050\007\037\011\041\001\001\000\016\003\076" +
    "\004\051\005\040\006\050\007\037\011\041\001\001\000" +
    "\016\003\075\004\051\005\040\006\050\007\037\011\041" +
    "\001\001\000\016\003\074\004\051\005\040\006\050\007" +
    "\037\011\041\001\001\000\016\003\073\004\051\005\040" +
    "\006\050\007\037\011\041\001\001\000\016\003\072\004" +
    "\051\005\040\006\050\007\037\011\041\001\001\000\016" +
    "\003\071\004\051\005\040\006\050\007\037\011\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\110\004\051\005\040" +
    "\006\050\007\037\010\112\011\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\110\004\051\005\040\006\050\007\037\010" +
    "\115\011\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\026\020\030\043\123\001\001\000\002\001\001" +
    "\000\004\016\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\014\020\020\037\133\040\017\041\015\001" +
    "\001\000\002\001\001\000\046\003\153\004\051\005\040" +
    "\006\050\007\037\011\041\012\136\013\156\017\146\021" +
    "\162\022\163\025\144\026\137\027\143\030\141\031\155" +
    "\032\154\045\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\262\004\051\005\040" +
    "\006\050\007\037\011\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\153\004\051\005" +
    "\040\006\050\007\037\011\041\012\237\013\156\017\146" +
    "\021\162\022\163\025\144\026\137\027\143\030\141\031" +
    "\155\032\154\045\160\001\001\000\002\001\001\000\016" +
    "\003\202\004\051\005\040\006\050\007\037\011\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\153\004\051\005\040\006" +
    "\050\007\037\011\041\012\175\013\156\017\146\021\162" +
    "\022\163\025\144\026\137\027\143\030\141\031\155\032" +
    "\154\045\160\001\001\000\016\003\172\004\051\005\040" +
    "\006\050\007\037\011\041\001\001\000\002\001\001\000" +
    "\016\003\164\004\051\005\040\006\050\007\037\011\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\153\004\051\005\040\006\050\007\037" +
    "\011\041\012\166\013\156\017\146\021\162\022\163\025" +
    "\144\026\137\027\143\030\141\031\155\032\154\045\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\200\004\051\005\040\006\050\007\037\011\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\153\004\051\005\040\006\050\007\037" +
    "\011\041\012\204\013\156\017\146\021\162\022\163\025" +
    "\144\026\137\027\143\030\141\031\155\032\154\045\160" +
    "\001\001\000\006\023\207\024\206\001\001\000\046\003" +
    "\153\004\051\005\040\006\050\007\037\011\041\012\230" +
    "\013\156\017\146\021\162\022\163\025\144\026\137\027" +
    "\143\030\141\031\155\032\154\045\160\001\001\000\006" +
    "\023\227\024\206\001\001\000\002\001\001\000\016\003" +
    "\214\004\051\005\040\006\050\007\037\011\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\153\004\051\005\040\006\050" +
    "\007\037\011\041\012\216\013\156\017\146\021\162\022" +
    "\163\025\144\026\137\027\143\030\141\031\155\032\154" +
    "\045\160\001\001\000\002\001\001\000\046\003\153\004" +
    "\051\005\040\006\050\007\037\011\041\012\223\013\156" +
    "\017\146\021\162\022\163\025\144\026\137\027\143\030" +
    "\141\031\155\032\154\045\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\235\004\051\005\040" +
    "\006\050\007\037\011\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\252\004\051\005\040\006\050\007\037\011" +
    "\041\014\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\254\004\051\005\040\006\050\007\037\011" +
    "\041\001\001\000\002\001\001\000\046\003\153\004\051" +
    "\005\040\006\050\007\037\011\041\012\256\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\266\034\265\001\001\000\024\003" +
    "\274\004\051\005\040\006\050\007\037\011\041\014\275" +
    "\035\277\036\276\001\001\000\002\001\001\000\006\033" +
    "\266\034\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\153\004\051\005\040\006\050\007" +
    "\037\011\041\012\301\013\156\017\146\021\162\022\163" +
    "\025\144\026\137\027\143\030\141\031\155\032\154\045" +
    "\160\001\001\000\002\001\001\000\024\003\274\004\051" +
    "\005\040\006\050\007\037\011\041\014\275\035\303\036" +
    "\276\001\001\000\002\001\001\000\046\003\153\004\051" +
    "\005\040\006\050\007\037\011\041\012\305\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\312\004\051\005\040\006\050\007\037\011\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\322\044\320\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\331\001\001\000\004\110\324" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\325\001\001\000\002\001\001\000\016\003\327\004\051" +
    "\005\040\006\050\007\037\011\041\001\001\000\002\001" +
    "\001\000\004\111\335\001\001\000\002\001\001\000\016" +
    "\003\333\004\051\005\040\006\050\007\037\011\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\337\004\051\005\040\006\050\007\037\011" +
    "\041\001\001\000\002\001\001\000\004\061\u0139\001\001" +
    "\000\012\015\026\020\030\042\342\043\031\001\001\000" +
    "\002\001\001\000\004\062\u012f\001\001\000\002\001\001" +
    "\000\004\063\u0126\001\001\000\004\016\350\001\001\000" +
    "\004\070\u011f\001\001\000\002\001\001\000\006\064\u0113" +
    "\071\u0112\001\001\000\014\015\014\020\020\037\353\040" +
    "\017\041\015\001\001\000\002\001\001\000\004\072\372" +
    "\001\001\000\046\003\153\004\051\005\040\006\050\007" +
    "\037\011\041\012\356\013\156\017\146\021\162\022\163" +
    "\025\144\026\137\027\143\030\141\031\155\032\154\045" +
    "\160\001\001\000\002\001\001\000\004\073\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\153\004\051\005\040\006\050" +
    "\007\037\011\041\012\373\013\156\017\146\021\162\022" +
    "\163\025\144\026\137\027\143\030\141\031\155\032\154" +
    "\045\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u010d\001\001" +
    "\000\046\003\153\004\051\005\040\006\050\007\037\011" +
    "\041\012\u0101\013\156\017\146\021\162\022\163\025\144" +
    "\026\137\027\143\030\141\031\155\032\154\045\160\001" +
    "\001\000\002\001\001\000\004\066\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\153\004\051\005\040\006\050\007\037" +
    "\011\041\012\u010e\013\156\017\146\021\162\022\163\025" +
    "\144\026\137\027\143\030\141\031\155\032\154\045\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\014" +
    "\020\020\037\u0114\040\017\041\015\001\001\000\002\001" +
    "\001\000\046\003\153\004\051\005\040\006\050\007\037" +
    "\011\041\012\u0116\013\156\017\146\021\162\022\163\025" +
    "\144\026\137\027\143\030\141\031\155\032\154\045\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\153\004\051\005\040" +
    "\006\050\007\037\011\041\012\u011b\013\156\017\146\021" +
    "\162\022\163\025\144\026\137\027\143\030\141\031\155" +
    "\032\154\045\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\153\004\051\005\040\006" +
    "\050\007\037\011\041\012\u0122\013\156\017\146\021\162" +
    "\022\163\025\144\026\137\027\143\030\141\031\155\032" +
    "\154\045\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u0127\001" +
    "\001\000\002\001\001\000\014\015\014\020\020\037\u0129" +
    "\040\017\041\015\001\001\000\002\001\001\000\046\003" +
    "\153\004\051\005\040\006\050\007\037\011\041\012\u012b" +
    "\013\156\017\146\021\162\022\163\025\144\026\137\027" +
    "\143\030\141\031\155\032\154\045\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0131\001\001\000\002" +
    "\001\001\000\014\015\014\020\020\037\u0133\040\017\041" +
    "\015\001\001\000\002\001\001\000\046\003\153\004\051" +
    "\005\040\006\050\007\037\011\041\012\u0135\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\026\020\030\042\u013a\043\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u013d\001\001\000\002" +
    "\001\001\000\014\015\014\020\020\037\u013f\040\017\041" +
    "\015\001\001\000\002\001\001\000\046\003\153\004\051" +
    "\005\040\006\050\007\037\011\041\012\u0141\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\014\020\020\037\u0147\040\017\041" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\153\004\051\005\040\006\050\007\037\011\041\012" +
    "\u014a\013\156\017\146\021\162\022\163\025\144\026\137" +
    "\027\143\030\141\031\155\032\154\045\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\u0153\001\001" +
    "\000\002\001\001\000\012\015\026\020\030\042\u0155\043" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\014\020\020\037\u0158\040\017\041\015\001\001\000" +
    "\002\001\001\000\046\003\153\004\051\005\040\006\050" +
    "\007\037\011\041\012\u015a\013\156\017\146\021\162\022" +
    "\163\025\144\026\137\027\143\030\141\031\155\032\154" +
    "\045\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\u01a1\001\001" +
    "\000\012\015\026\020\030\042\u0160\043\031\001\001\000" +
    "\002\001\001\000\004\077\u0199\001\001\000\002\001\001" +
    "\000\006\100\u018d\104\u018c\001\001\000\014\015\014\020" +
    "\020\037\u0165\040\017\041\015\001\001\000\002\001\001" +
    "\000\004\105\u0174\001\001\000\046\003\153\004\051\005" +
    "\040\006\050\007\037\011\041\012\u0168\013\156\017\146" +
    "\021\162\022\163\025\144\026\137\027\143\030\141\031" +
    "\155\032\154\045\160\001\001\000\002\001\001\000\004" +
    "\106\u0171\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\107\u016d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\153\004\051" +
    "\005\040\006\050\007\037\011\041\012\u0175\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\u0187\001\001\000\046\003\153\004\051\005\040\006" +
    "\050\007\037\011\041\012\u017b\013\156\017\146\021\162" +
    "\022\163\025\144\026\137\027\143\030\141\031\155\032" +
    "\154\045\160\001\001\000\002\001\001\000\004\102\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\u0180\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\153\004\051\005\040" +
    "\006\050\007\037\011\041\012\u0188\013\156\017\146\021" +
    "\162\022\163\025\144\026\137\027\143\030\141\031\155" +
    "\032\154\045\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\014\020\020\037\u018e\040\017\041\015\001" +
    "\001\000\002\001\001\000\046\003\153\004\051\005\040" +
    "\006\050\007\037\011\041\012\u0190\013\156\017\146\021" +
    "\162\022\163\025\144\026\137\027\143\030\141\031\155" +
    "\032\154\045\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\153" +
    "\004\051\005\040\006\050\007\037\011\041\012\u0195\013" +
    "\156\017\146\021\162\022\163\025\144\026\137\027\143" +
    "\030\141\031\155\032\154\045\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\014\020\020\037\u019b\040" +
    "\017\041\015\001\001\000\002\001\001\000\046\003\153" +
    "\004\051\005\040\006\050\007\037\011\041\012\u019d\013" +
    "\156\017\146\021\162\022\163\025\144\026\137\027\143" +
    "\030\141\031\155\032\154\045\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\026\020\030\042\u01a2\043\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\014\020\020" +
    "\037\u01a5\040\017\041\015\001\001\000\002\001\001\000" +
    "\046\003\153\004\051\005\040\006\050\007\037\011\041" +
    "\012\u01a7\013\156\017\146\021\162\022\163\025\144\026" +
    "\137\027\143\030\141\031\155\032\154\045\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u01af\001\001\000\004\112\u01ad" +
    "\001\001\000\004\015\u01ae\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\u01e0\054\u01e1\001\001\000\014" +
    "\015\014\020\020\037\u01b2\040\017\041\015\001\001\000" +
    "\002\001\001\000\006\050\u01c1\055\u01c2\001\001\000\046" +
    "\003\153\004\051\005\040\006\050\007\037\011\041\012" +
    "\u01b5\013\156\017\146\021\162\022\163\025\144\026\137" +
    "\027\143\030\141\031\155\032\154\045\160\001\001\000" +
    "\002\001\001\000\004\056\u01be\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\057\u01ba\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\153\004\051\005\040\006\050" +
    "\007\037\011\041\012\u01c3\013\156\017\146\021\162\022" +
    "\163\025\144\026\137\027\143\030\141\031\155\032\154" +
    "\045\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\153\004\051" +
    "\005\040\006\050\007\037\011\041\012\u01c8\013\156\017" +
    "\146\021\162\022\163\025\144\026\137\027\143\030\141" +
    "\031\155\032\154\045\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\u01db\001\001\000\046\003\153\004\051\005\040\006" +
    "\050\007\037\011\041\012\u01ce\013\156\017\146\021\162" +
    "\022\163\025\144\026\137\027\143\030\141\031\155\032" +
    "\154\045\160\001\001\000\002\001\001\000\004\052\u01d8" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\u01d3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\153" +
    "\004\051\005\040\006\050\007\037\011\041\012\u01dc\013" +
    "\156\017\146\021\162\022\163\025\144\026\137\027\143" +
    "\030\141\031\155\032\154\045\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\014\020\020\037\u01e7\040\017\041\015\001" +
    "\001\000\002\001\001\000\046\003\153\004\051\005\040" +
    "\006\050\007\037\011\041\012\u01e3\013\156\017\146\021" +
    "\162\022\163\025\144\026\137\027\143\030\141\031\155" +
    "\032\154\045\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\153\004\051\005\040\006\050\007\037\011" +
    "\041\012\u01e9\013\156\017\146\021\162\022\163\025\144" +
    "\026\137\027\143\030\141\031\155\032\154\045\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/*	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line " + (s.left + 1));   
				if (s.right >= 0){
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}
*/
	@Override
	public void report_error(String message, Object info) {
		if (info instanceof String){
			//System.err.println("  " + info + " "+ message + "\n       Parsing resumed from 2nd token before" + s.current_lexeme() + "\n");
			System.err.println("  " + info + " "+ message + "\n");
		} else {
			StringBuffer m = new StringBuffer("Error");
			if (info instanceof java_cup.runtime.Symbol){
				m.append( "(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea " + (((Symbol)info).left+1) + ", columna" + (((Symbol)info).right+1) + ")" );     
			}
			m.append(" : " + message);
			System.err.println(m);
		}
	}


	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // return_statement ::= RETURN error 
            {
              Return RESULT =null;
		 parser.report_error("Se esperaba un valor de retorno", "ERROR: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // return_statement ::= RETURN expression PUNTOCOMA 
            {
              Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // option_when ::= range 
            {
              WhenOption RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenOption(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // option_when ::= expression 
            {
              WhenOption RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenOption(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // when_options ::= option_when PIPE when_options 
            {
              WhenOptions RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenOption opt = (WhenOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenOptions opts = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											opts.add(opt);
											RESULT = opts;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // when_options ::= option_when 
            {
              WhenOptions RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenOption opt = (WhenOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new WhenOptions();
											RESULT.add(opt); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // when_element ::= WHEN OTHERS OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenElement(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // when_element ::= WHEN when_options OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenOptions w = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenElement(w,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // when_list ::= when_element when_list 
            {
              WhenList RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int weright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhenElement we = (WhenElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											wl.add(we); 
											RESULT = wl; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // when_list ::= when_element 
            {
              WhenList RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int weright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenElement we = (WhenElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenList(); RESULT.add(we); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // case_statement ::= CASE expression IS when_list END CASE PUNTOCOMA 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
											//recorrer wl para ver si tiene algun elemento Others
											boolean hasOthers=false;
											Statements othersStatements=null;
											int othersCount = 0;
											for(int i=0;i<wl.size();i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size()-1 ){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount>1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
													RESULT = new CaseOthers(e,wl,othersStatements);													
											}else{
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // loop_statement ::= LOOP statements END LOOP PUNTOCOMA 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Loop(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // exit_statement ::= EXIT WHEN expression PUNTOCOMA 
            {
              Exit RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // for_statement ::= FOR ID IN range LOOP statements END LOOP PUNTOCOMA 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // while_statemet ::= WHILE expression LOOP statements END LOOP PUNTOCOMA 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new While(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfWithElsIfAndElse(e,s1,es,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // if_statement ::= IF expression THEN statements elsif_statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfWithElsIF(e,s,es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // if_statement ::= IF expression THEN statements ELSE statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new  IfWithElse(e,s1,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // if_statement ::= IF expression THEN statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfSimple(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // elsif_statement ::= ELSIF expression THEN statements 
            {
              ElsIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElsIf(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // elsif_statements ::= elsif_statement 
            {
              ElsIfList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElsIf es = (ElsIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new ElsIfList();
											RESULT.add(es); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // elsif_statements ::= elsif_statement elsif_statements 
            {
              ElsIfList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElsIf es = (ElsIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int essleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int essright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElsIfList ess = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											ess.add(es); 
											RESULT = ess; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // put_value ::= PUT PARIZQ expression PARDER PUNTOCOMA 
            {
              PutValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PutValue(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // get_value ::= GET PARIZQ ID PARDER PUNTOCOMA 
            {
              GetValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // variable_declaration ::= variable_ids DOSPUNTOS error 
            {
              VariableDeclaration RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
										parser.report_error("variable_declaration:Se esperaba un tipo ","\t");
										RESULT = new VariableDeclaration(vids,null); 
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // variable_declaration ::= variable_ids DOSPUNTOS variable_type 
            {
              VariableDeclaration RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableType types = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableDeclaration(vids,types); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // assign_variable ::= ID OPERASIG expression PUNTOCOMA 
            {
              AssignVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier = new Identifier(id); 
											RESULT = new AssignVariableSimple(identifier,e); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // variable_type ::= STRING 
            {
              VariableType RESULT =null;
		 RESULT = new TypeString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // variable_type ::= FLOAT 
            {
              VariableType RESULT =null;
		 RESULT = new TypeFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // variable_type ::= BOOLEAN 
            {
              VariableType RESULT =null;
		 RESULT = new TypeBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // variable_type ::= INTEGER 
            {
              VariableType RESULT =null;
		 RESULT = new TypeInteger(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // variable_ids ::= ID error NT$36 variable_ids 
            {
              VariableIDs RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (VariableIDs) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$36 ::= 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("variable_ids: Se esperaba \",\" ","\t");
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // variable_ids ::= ID COMA variable_ids 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											Identifier identifier = new Identifier(id);
											vids.add(identifier);
											RESULT = vids;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // variable_ids ::= ID 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // range ::= expression DOBLEPUNTO expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Range(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // statement ::= return_statement 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Return rs = (Return)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statement ::= case_statement 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case cs = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement ::= loop_statement 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Loop ls = (Loop)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // statement ::= exit_statement 
            {
              Statement RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exit es = (Exit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statement ::= for_statement 
            {
              Statement RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For fs = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // statement ::= while_statemet 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While ws = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If is = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // statement ::= put_value 
            {
              Statement RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PutValue pv = (PutValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // statement ::= get_value 
            {
              Statement RESULT =null;
		int gvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GetValue gv = (GetValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = gv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // statement ::= expression PUNTOCOMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // statement ::= assign_variable 
            {
              Statement RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignVariable av = (AssignVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = av; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // statements ::= 
            {
              Statements RESULT =null;
		 RESULT = new Statements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // statements ::= statement statements 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // function_call ::= ID PARIZQ PARDER 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
											Identifier identifier = new Identifier(id);  
											RESULT = new FunctionCall(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // function_call ::= ID PARIZQ function_parameters PARDER 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier = new Identifier(id); 
											RESULT = new FunctionCall(identifier,fp); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // function_parameters ::= expression COMA function_parameters 
            {
              FunctionParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											fp.add(e); 
											RESULT = fp; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // function_parameters ::= expression 
            {
              FunctionParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new FunctionParameters();
											RESULT.add(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // logical_expression ::= NOT expression 
            {
              LogicalExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // logical_expression ::= expression OR expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // logical_expression ::= expression AND expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // boolean_expression ::= expression OPERMENORIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessOrEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // boolean_expression ::= expression OPERMAYORIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterOrEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // boolean_expression ::= expression OPERMENOR expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Less(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // boolean_expression ::= expression OPERMAYOR expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Greater(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // boolean_expression ::= expression OPERDISTINTO expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // boolean_expression ::= expression OPERIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equal(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arithmetic_expression ::= expression MOD expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Module(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arithmetic_expression ::= OPERRESTA expression 
            {
              ArithmeticExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Negative(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arithmetic_expression ::= expression OPERPOTENCIA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pow(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arithmetic_expression ::= expression OPERMULTIPLICACION expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplication(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arithmetic_expression ::= expression OPERDIVISION expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arithmetic_expression ::= expression OPERRESTA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  Minus(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arithmetic_expression ::= expression OPERSUMA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Add(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literal_expression ::= CADENA 
            {
              LiteralExpression RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(cad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // literal_expression ::= FALSE 
            {
              LiteralExpression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // literal_expression ::= TRUE 
            {
              LiteralExpression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // literal_expression ::= NUMEROFLOAT 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatNumber(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // literal_expression ::= NUMEROENTERO 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerNumber(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= function_call 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= logical_expression 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicalExpression le = (LogicalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= boolean_expression 
            {
              Expression RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BooleanExpression be = (BooleanExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = be; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= PARIZQ expression PARDER 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= arithmetic_expression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExpression ae = (ArithmeticExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= literal_expression 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpression le = (LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // mode ::= OUT 
            {
              Mode RESULT =null;
		RESULT = new ModeOut(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mode ::= INOUT 
            {
              Mode RESULT =null;
		RESULT = new ModeInOut(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mode ::= IN 
            {
              Mode RESULT =null;
		RESULT = new ModeIn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameter ::= variable_declaration OPERASIG expression 
            {
              Parameter RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vd.getVariables(),vd.getType(),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameter ::= variable_declaration 
            {
              Parameter RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vd.getVariables(),vd.getType()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parameter ::= variable_ids DOSPUNTOS mode error 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("parameter: Se esperaba un tipo","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parameter ::= variable_ids DOSPUNTOS mode variable_type 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vids,m,vtype); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parameter ::= variable_ids DOSPUNTOS mode variable_type OPERASIG error 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("parameter: Se esperaba una expresion","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parameter ::= variable_ids DOSPUNTOS mode error NT$35 OPERASIG expression 
            {
              Parameter RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Parameter) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$35 ::= 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("parameter: Se esperaba un tipo","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parameter ::= variable_ids DOSPUNTOS error NT$34 variable_type OPERASIG expression 
            {
              Parameter RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Parameter) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$34 ::= 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("parameter: Se esperaba un modo: IN,OUT,IN OUT ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parameter ::= variable_ids DOSPUNTOS mode variable_type OPERASIG expression 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vids,m,vtype,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter_declarations ::= 
            {
              ParameterDeclarations RESULT =null;
		 RESULT = new ParameterDeclarations(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter_declarations ::= parameter_declarations PUNTOCOMA parameter 
            {
              ParameterDeclarations RESULT =null;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											pds.add(p);
											RESULT = pds;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameter_declarations ::= parameter 
            {
              ParameterDeclarations RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParameterDeclarations(); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END error NT$33 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$33 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements error NT$32 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$32 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba End","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS error NT$31 statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$31 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER error NT$30 BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$30 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba IS","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END error NT$29 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$29 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements error NT$28 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$28 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part error NT$27 statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$27 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER error NT$26 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$26 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Is","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations error NT$25 IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$25 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba\")\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procedure_declaration ::= PROCEDURE ID error NT$24 parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$24 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba  \"(\"","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procedure_declaration ::= PROCEDURE error NT$23 PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$23 ::= 
            {
              ProcedureDeclaration RESULT =null;
parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,dp,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END error NT$22 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$22 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements error NT$21 ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$21 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba END","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS error NT$20 statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$20 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type error NT$19 BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$19 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba IS","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN error NT$18 IS BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$18 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba un tipo ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END error NT$17 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$17 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements error NT$16 ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$16 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba End","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part error NT$15 statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$15 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type error NT$14 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$14 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER error NT$13 variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$13 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion: Se esperaba Return","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations error NT$12 RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$12 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba\")\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_declaration ::= FUNCTION ID error NT$11 parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$11 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba \"(\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_declaration ::= FUNCTION error NT$10 PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$10 ::= 
            {
              FunctionDeclaration RESULT =null;
parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,dp,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration_part ::= variable_declaration error 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Se esperaba \";\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration_part ::= variable_declaration PUNTOCOMA 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(vd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration_part ::= procedure_declaration 
            {
              DeclarationPart RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcedureDeclaration pd = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(pd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration_part ::= function_declaration 
            {
              DeclarationPart RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(fd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration_part ::= procedure_declaration declaration_part 
            {
              DeclarationPart RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcedureDeclaration pd = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
											dp.add(pd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_part ::= function_declaration declaration_part 
            {
              DeclarationPart RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											dp.add(fd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_part ::= variable_declaration PUNTOCOMA declaration_part 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											dp.add(vd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // program ::= error 
            {
              Object RESULT =null;
		parser.report_error("Programa principal: Se esperaba Procedure","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // program ::= PROCEDURE ID IS BEGIN statements END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal sin declaraciones: Se esperaba \";\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // program ::= PROCEDURE ID IS BEGIN statements END error NT$9 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // program ::= PROCEDURE ID IS BEGIN statements error NT$8 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba END","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // program ::= PROCEDURE ID IS error NT$7 statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$7 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // program ::= PROCEDURE ID error NT$6 BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$6 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // program ::= PROCEDURE ID IS BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,s,identifier2);
											try {
												ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
												xmlConverter.toXML();
												System.out.println("Se ha generado el arbol");
											} catch(Exception e){
												System.out.println(e.getMessage());
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Programa principal: Simbolo no esperado","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal: Se esperaba ;","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END error NT$5 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= PROCEDURE ID IS declaration_part BEGIN statements error NT$4 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= PROCEDURE ID IS declaration_part error NT$3 statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program ::= PROCEDURE ID IS error NT$2 BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaban declaraciones","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROCEDURE ID error NT$1 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROCEDURE error NT$0 IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
parser.report_error("Programa principal: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,dp,s,identifier2);
											try {
												ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
												xmlConverter.toXML();
												System.out.println("Se ha generado el arbol");
											} catch(Exception e){
												System.out.println(e.getMessage());
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

