
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package mainPackage;

import java_cup.runtime.*;
import abstractSyntaxTree.*;
import java.io.File;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\317\000\002\002\013\000\002\002\004\000\002\046" +
    "\002\000\002\002\014\000\002\047\002\000\002\002\014" +
    "\000\002\050\002\000\002\002\014\000\002\051\002\000" +
    "\002\002\014\000\002\052\002\000\002\002\014\000\002" +
    "\053\002\000\002\002\014\000\002\002\013\000\002\002" +
    "\014\000\002\002\012\000\002\054\002\000\002\002\013" +
    "\000\002\055\002\000\002\002\013\000\002\056\002\000" +
    "\002\002\013\000\002\057\002\000\002\002\013\000\002" +
    "\002\012\000\002\002\003\000\002\037\005\000\002\037" +
    "\004\000\002\037\004\000\002\037\003\000\002\037\003" +
    "\000\002\037\004\000\002\037\004\000\002\040\020\000" +
    "\002\060\002\000\002\040\021\000\002\061\002\000\002" +
    "\040\021\000\002\062\002\000\002\040\021\000\002\063" +
    "\002\000\002\040\021\000\002\064\002\000\002\040\021" +
    "\000\002\065\002\000\002\040\021\000\002\066\002\000" +
    "\002\040\021\000\002\067\002\000\002\040\021\000\002" +
    "\040\020\000\002\040\017\000\002\070\002\000\002\040" +
    "\020\000\002\071\002\000\002\040\020\000\002\072\002" +
    "\000\002\040\020\000\002\073\002\000\002\040\020\000" +
    "\002\074\002\000\002\040\020\000\002\040\017\000\002" +
    "\041\016\000\002\075\002\000\002\041\017\000\002\076" +
    "\002\000\002\041\017\000\002\077\002\000\002\041\017" +
    "\000\002\100\002\000\002\041\017\000\002\101\002\000" +
    "\002\041\017\000\002\102\002\000\002\041\017\000\002" +
    "\103\002\000\002\041\017\000\002\041\016\000\002\041" +
    "\015\000\002\104\002\000\002\041\016\000\002\105\002" +
    "\000\002\041\016\000\002\106\002\000\002\041\016\000" +
    "\002\107\002\000\002\041\016\000\002\041\015\000\002" +
    "\042\003\000\002\042\005\000\002\042\002\000\002\043" +
    "\010\000\002\110\002\000\002\043\011\000\002\111\002" +
    "\000\002\043\011\000\002\043\010\000\002\043\006\000" +
    "\002\043\006\000\002\043\003\000\002\043\005\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\005\005\000\002\005" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\004\000\002\007\004\000\002\010\003\000" +
    "\002\010\005\000\002\011\006\000\002\011\006\000\002" +
    "\011\005\000\002\011\005\000\002\012\004\000\002\012" +
    "\002\000\002\013\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\005\000\002\015\003\000\002\015\005\000\002\112\002" +
    "\000\002\015\006\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\006\000\002" +
    "\020\005\000\002\020\005\000\002\021\007\000\002\022" +
    "\007\000\002\023\004\000\002\023\003\000\002\024\006" +
    "\000\002\025\011\000\002\025\013\000\002\025\012\000" +
    "\002\025\014\000\002\026\011\000\002\027\013\000\002" +
    "\030\006\000\002\031\007\000\002\032\011\000\002\034" +
    "\003\000\002\034\004\000\002\033\006\000\002\033\006" +
    "\000\002\035\003\000\002\035\005\000\002\036\003\000" +
    "\002\036\003\000\002\045\005\000\002\045\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0200\000\006\003\006\023\005\001\002\000\004\002" +
    "\u0202\001\002\000\006\003\010\077\007\001\002\000\004" +
    "\002\uffe7\001\002\000\006\003\u01c5\035\u01c6\001\002\000" +
    "\004\035\uffff\001\002\000\004\035\012\001\002\000\010" +
    "\020\022\023\014\077\013\001\002\000\010\003\u01c1\062" +
    "\u01c0\063\uff55\001\002\000\006\003\u0167\077\u0166\001\002" +
    "\000\014\003\uffe2\020\022\023\014\036\uffe2\077\013\001" +
    "\002\000\004\063\u0163\001\002\000\004\036\u015e\001\002" +
    "\000\014\003\uffe3\020\022\023\014\036\uffe3\077\013\001" +
    "\002\000\006\003\u015a\060\u015b\001\002\000\006\003\024" +
    "\077\023\001\002\000\006\003\365\056\366\001\002\000" +
    "\004\056\uffde\001\002\000\004\056\026\001\002\000\010" +
    "\057\uffa5\060\uffa5\077\013\001\002\000\004\063\342\001" +
    "\002\000\006\057\145\060\146\001\002\000\012\003\uff9c" +
    "\037\033\057\uff9c\060\uff9c\001\002\000\010\003\uffa7\057" +
    "\uffa7\060\uffa7\001\002\000\024\047\037\055\047\056\044" +
    "\077\046\100\034\102\051\103\035\104\036\105\043\001" +
    "\002\000\062\003\uff8b\025\uff8b\031\uff8b\035\uff8b\040\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\057\uff8b" +
    "\060\uff8b\061\uff8b\062\uff8b\065\uff8b\072\uff8b\073\uff8b\001" +
    "\002\000\062\003\uff8e\025\uff8e\031\uff8e\035\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\062\uff8e\065\uff8e\072\uff8e\073\uff8e\001" +
    "\002\000\062\003\uff8d\025\uff8d\031\uff8d\035\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\057\uff8d" +
    "\060\uff8d\061\uff8d\062\uff8d\065\uff8d\072\uff8d\073\uff8d\001" +
    "\002\000\026\003\144\047\037\055\047\056\044\077\046" +
    "\100\034\102\051\103\035\104\036\105\043\001\002\000" +
    "\062\003\uff91\025\uff91\031\uff91\035\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\057\uff91\060\uff91" +
    "\061\uff91\062\uff91\065\uff91\072\uff91\073\uff91\001\002\000" +
    "\062\003\uff90\025\uff90\031\uff90\035\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\057\uff90\060\uff90" +
    "\061\uff90\062\uff90\065\uff90\072\uff90\073\uff90\001\002\000" +
    "\062\003\uff95\025\uff95\031\uff95\035\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\052\uff95\053\uff95\054\uff95\057\uff95\060\uff95" +
    "\061\uff95\062\uff95\065\uff95\072\uff95\073\uff95\001\002\000" +
    "\062\003\uff8c\025\uff8c\031\uff8c\035\uff8c\040\uff8c\041\uff8c" +
    "\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\057\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\065\uff8c\072\uff8c\073\uff8c\001\002\000" +
    "\024\047\037\055\047\056\044\077\046\100\034\102\051" +
    "\103\035\104\036\105\043\001\002\000\044\003\uff9b\040" +
    "\071\041\057\042\061\043\065\044\066\045\056\046\067" +
    "\047\064\050\062\051\070\052\060\053\055\054\072\057" +
    "\uff9b\060\uff9b\073\063\001\002\000\064\003\uff96\025\uff96" +
    "\031\uff96\035\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044" +
    "\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\056\127\057\uff96\060\uff96\061\uff96\062" +
    "\uff96\065\uff96\072\uff96\073\uff96\001\002\000\026\003\054" +
    "\047\037\055\047\056\044\077\046\100\034\102\051\103" +
    "\035\104\036\105\043\001\002\000\062\003\uff92\025\uff92" +
    "\031\uff92\035\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\057\uff92\060\uff92\061\uff92\062\uff92\065" +
    "\uff92\072\uff92\073\uff92\001\002\000\062\003\uff8f\025\uff8f" +
    "\031\uff8f\035\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\057\uff8f\060\uff8f\061\uff8f\062\uff8f\065" +
    "\uff8f\072\uff8f\073\uff8f\001\002\000\062\003\uff97\025\uff97" +
    "\031\uff97\035\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052\uff97" +
    "\053\uff97\054\uff97\057\uff97\060\uff97\061\uff97\062\uff97\065" +
    "\uff97\072\uff97\073\uff97\001\002\000\062\003\uff6c\025\uff6c" +
    "\031\uff6c\035\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044" +
    "\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\060" +
    "\053\uff6c\054\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\065" +
    "\uff6c\072\uff6c\073\uff6c\001\002\000\062\003\uff6b\025\uff6b" +
    "\031\uff6b\035\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044" +
    "\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b" +
    "\053\uff6b\054\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\065" +
    "\uff6b\072\uff6b\073\uff6b\001\002\000\026\003\126\047\037" +
    "\055\047\056\044\077\046\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\026\003\124\047\037\055\047" +
    "\056\044\077\046\100\034\102\051\103\035\104\036\105" +
    "\043\001\002\000\026\003\122\047\037\055\047\056\044" +
    "\077\046\100\034\102\051\103\035\104\036\105\043\001" +
    "\002\000\026\003\120\047\037\055\047\056\044\077\046" +
    "\100\034\102\051\103\035\104\036\105\043\001\002\000" +
    "\026\003\116\047\037\055\047\056\044\077\046\100\034" +
    "\102\051\103\035\104\036\105\043\001\002\000\026\003" +
    "\114\047\037\055\047\056\044\077\046\100\034\102\051" +
    "\103\035\104\036\105\043\001\002\000\026\003\112\047" +
    "\037\055\047\056\044\077\046\100\034\102\051\103\035" +
    "\104\036\105\043\001\002\000\026\003\110\047\037\055" +
    "\047\056\044\077\046\100\034\102\051\103\035\104\036" +
    "\105\043\001\002\000\026\003\106\047\037\055\047\056" +
    "\044\077\046\100\034\102\051\103\035\104\036\105\043" +
    "\001\002\000\026\003\104\047\037\055\047\056\044\077" +
    "\046\100\034\102\051\103\035\104\036\105\043\001\002" +
    "\000\026\003\102\047\037\055\047\056\044\077\046\100" +
    "\034\102\051\103\035\104\036\105\043\001\002\000\026" +
    "\003\100\047\037\055\047\056\044\077\046\100\034\102" +
    "\051\103\035\104\036\105\043\001\002\000\026\003\076" +
    "\047\037\055\047\056\044\077\046\100\034\102\051\103" +
    "\035\104\036\105\043\001\002\000\026\003\074\047\037" +
    "\055\047\056\044\077\046\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\062\003\uff6e\025\uff6e\031\uff6e" +
    "\035\uff6e\040\071\041\057\042\061\043\065\044\066\045" +
    "\056\046\067\047\064\050\062\051\070\052\060\053\055" +
    "\054\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\065\uff6e\072" +
    "\uff6e\073\063\001\002\000\062\003\uff6d\025\uff6d\031\uff6d" +
    "\035\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045" +
    "\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d" +
    "\054\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\065\uff6d\072" +
    "\uff6d\073\uff6d\001\002\000\062\003\uff76\025\uff76\031\uff76" +
    "\035\uff76\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045" +
    "\uff76\046\067\047\064\050\062\051\070\052\060\053\uff76" +
    "\054\uff76\057\uff76\060\uff76\061\uff76\062\uff76\065\uff76\072" +
    "\uff76\073\063\001\002\000\062\003\uff75\025\uff75\031\uff75" +
    "\035\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045" +
    "\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75" +
    "\054\uff75\057\uff75\060\uff75\061\uff75\062\uff75\065\uff75\072" +
    "\uff75\073\uff75\001\002\000\062\003\uff86\025\uff86\031\uff86" +
    "\035\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\060\053\uff86" +
    "\054\uff86\057\uff86\060\uff86\061\uff86\062\uff86\065\uff86\072" +
    "\uff86\073\063\001\002\000\062\003\uff85\025\uff85\031\uff85" +
    "\035\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045" +
    "\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\054\uff85\057\uff85\060\uff85\061\uff85\062\uff85\065\uff85\072" +
    "\uff85\073\uff85\001\002\000\062\003\uff8a\025\uff8a\031\uff8a" +
    "\035\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045" +
    "\uff8a\046\uff8a\047\uff8a\050\062\051\070\052\060\053\uff8a" +
    "\054\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\065\uff8a\072" +
    "\uff8a\073\063\001\002\000\062\003\uff89\025\uff89\031\uff89" +
    "\035\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053\uff89" +
    "\054\uff89\057\uff89\060\uff89\061\uff89\062\uff89\065\uff89\072" +
    "\uff89\073\uff89\001\002\000\062\003\uff74\025\uff74\031\uff74" +
    "\035\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\045" +
    "\uff74\046\067\047\064\050\062\051\070\052\060\053\uff74" +
    "\054\uff74\057\uff74\060\uff74\061\uff74\062\uff74\065\uff74\072" +
    "\uff74\073\063\001\002\000\062\003\uff73\025\uff73\031\uff73" +
    "\035\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045" +
    "\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73" +
    "\054\uff73\057\uff73\060\uff73\061\uff73\062\uff73\065\uff73\072" +
    "\uff73\073\uff73\001\002\000\062\003\uff7a\025\uff7a\031\uff7a" +
    "\035\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045" +
    "\uff7a\046\067\047\064\050\062\051\070\052\060\053\uff7a" +
    "\054\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a\065\uff7a\072" +
    "\uff7a\073\063\001\002\000\062\003\uff79\025\uff79\031\uff79" +
    "\035\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045" +
    "\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79" +
    "\054\uff79\057\uff79\060\uff79\061\uff79\062\uff79\065\uff79\072" +
    "\uff79\073\uff79\001\002\000\062\003\uff88\025\uff88\031\uff88" +
    "\035\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\062\051\070\052\060\053\uff88" +
    "\054\uff88\057\uff88\060\uff88\061\uff88\062\uff88\065\uff88\072" +
    "\uff88\073\063\001\002\000\062\003\uff87\025\uff87\031\uff87" +
    "\035\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045" +
    "\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87" +
    "\054\uff87\057\uff87\060\uff87\061\uff87\062\uff87\065\uff87\072" +
    "\uff87\073\uff87\001\002\000\062\003\uff7e\025\uff7e\031\uff7e" +
    "\035\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\060\053\uff7e" +
    "\054\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\065\uff7e\072" +
    "\uff7e\073\uff7e\001\002\000\062\003\uff7d\025\uff7d\031\uff7d" +
    "\035\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\054\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\065\uff7d\072" +
    "\uff7d\073\uff7d\001\002\000\062\003\uff84\025\uff84\031\uff84" +
    "\035\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\060\053\uff84" +
    "\054\uff84\057\uff84\060\uff84\061\uff84\062\uff84\065\uff84\072" +
    "\uff84\073\063\001\002\000\062\003\uff83\025\uff83\031\uff83" +
    "\035\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83" +
    "\054\uff83\057\uff83\060\uff83\061\uff83\062\uff83\065\uff83\072" +
    "\uff83\073\uff83\001\002\000\062\003\uff7c\025\uff7c\031\uff7c" +
    "\035\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045" +
    "\uff7c\046\067\047\064\050\062\051\070\052\060\053\uff7c" +
    "\054\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\065\uff7c\072" +
    "\uff7c\073\063\001\002\000\062\003\uff7b\025\uff7b\031\uff7b" +
    "\035\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045" +
    "\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b" +
    "\054\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\065\uff7b\072" +
    "\uff7b\073\uff7b\001\002\000\062\003\uff82\025\uff82\031\uff82" +
    "\035\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\060\053\uff82" +
    "\054\uff82\057\uff82\060\uff82\061\uff82\062\uff82\065\uff82\072" +
    "\uff82\073\uff82\001\002\000\062\003\uff81\025\uff81\031\uff81" +
    "\035\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81" +
    "\054\uff81\057\uff81\060\uff81\061\uff81\062\uff81\065\uff81\072" +
    "\uff81\073\uff81\001\002\000\062\003\uff78\025\uff78\031\uff78" +
    "\035\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045" +
    "\uff78\046\067\047\064\050\062\051\070\052\060\053\uff78" +
    "\054\uff78\057\uff78\060\uff78\061\uff78\062\uff78\065\uff78\072" +
    "\uff78\073\063\001\002\000\062\003\uff77\025\uff77\031\uff77" +
    "\035\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045" +
    "\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77" +
    "\054\uff77\057\uff77\060\uff77\061\uff77\062\uff77\065\uff77\072" +
    "\uff77\073\uff77\001\002\000\062\003\uff72\025\uff72\031\uff72" +
    "\035\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044\uff72\045" +
    "\uff72\046\067\047\064\050\062\051\070\052\060\053\uff72" +
    "\054\uff72\057\uff72\060\uff72\061\uff72\062\uff72\065\uff72\072" +
    "\uff72\073\063\001\002\000\062\003\uff71\025\uff71\031\uff71" +
    "\035\uff71\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045" +
    "\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71" +
    "\054\uff71\057\uff71\060\uff71\061\uff71\062\uff71\065\uff71\072" +
    "\uff71\073\uff71\001\002\000\062\003\uff70\025\uff70\031\uff70" +
    "\035\uff70\040\071\041\057\042\061\043\065\044\066\045" +
    "\056\046\067\047\064\050\062\051\070\052\060\053\uff70" +
    "\054\uff70\057\uff70\060\uff70\061\uff70\062\uff70\065\uff70\072" +
    "\uff70\073\063\001\002\000\062\003\uff6f\025\uff6f\031\uff6f" +
    "\035\uff6f\040\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045" +
    "\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f" +
    "\054\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\065\uff6f\072" +
    "\uff6f\073\uff6f\001\002\000\030\003\133\047\037\055\047" +
    "\056\044\057\131\077\046\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\006\003\136\057\137\001\002" +
    "\000\062\003\uff66\025\uff66\031\uff66\035\uff66\040\uff66\041" +
    "\uff66\042\uff66\043\uff66\044\uff66\045\uff66\046\uff66\047\uff66" +
    "\050\uff66\051\uff66\052\uff66\053\uff66\054\uff66\057\uff66\060" +
    "\uff66\061\uff66\062\uff66\065\uff66\072\uff66\073\uff66\001\002" +
    "\000\044\003\uff6a\040\071\041\057\042\061\043\065\044" +
    "\066\045\056\046\067\047\064\050\062\051\070\052\060" +
    "\053\055\054\072\057\uff6a\062\134\073\063\001\002\000" +
    "\062\003\uff65\025\uff65\031\uff65\035\uff65\040\uff65\041\uff65" +
    "\042\uff65\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050" +
    "\uff65\051\uff65\052\uff65\053\uff65\054\uff65\057\uff65\060\uff65" +
    "\061\uff65\062\uff65\065\uff65\072\uff65\073\uff65\001\002\000" +
    "\024\047\037\055\047\056\044\077\046\100\034\102\051" +
    "\103\035\104\036\105\043\001\002\000\006\003\uff69\057" +
    "\uff69\001\002\000\062\003\uff67\025\uff67\031\uff67\035\uff67" +
    "\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046" +
    "\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054\uff67" +
    "\057\uff67\060\uff67\061\uff67\062\uff67\065\uff67\072\uff67\073" +
    "\uff67\001\002\000\062\003\uff68\025\uff68\031\uff68\035\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68" +
    "\057\uff68\060\uff68\061\uff68\062\uff68\065\uff68\072\uff68\073" +
    "\uff68\001\002\000\042\003\141\040\071\041\057\042\061" +
    "\043\065\044\066\045\056\046\067\047\064\050\062\051" +
    "\070\052\060\053\055\054\072\057\142\073\063\001\002" +
    "\000\062\003\uff93\025\uff93\031\uff93\035\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\065\uff93\072\uff93\073\uff93\001\002" +
    "\000\062\003\uff94\025\uff94\031\uff94\035\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\057\uff94\060" +
    "\uff94\061\uff94\062\uff94\065\uff94\072\uff94\073\uff94\001\002" +
    "\000\062\003\uff80\025\uff80\031\uff80\035\uff80\040\uff80\041" +
    "\uff80\042\uff80\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80" +
    "\050\uff80\051\uff80\052\060\053\uff80\054\uff80\057\uff80\060" +
    "\uff80\061\uff80\062\uff80\065\uff80\072\uff80\073\uff80\001\002" +
    "\000\062\003\uff7f\025\uff7f\031\uff7f\035\uff7f\040\uff7f\041" +
    "\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f" +
    "\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\057\uff7f\060" +
    "\uff7f\061\uff7f\062\uff7f\065\uff7f\072\uff7f\073\uff7f\001\002" +
    "\000\004\024\150\001\002\000\004\077\013\001\002\000" +
    "\010\003\uffa6\057\uffa6\060\uffa6\001\002\000\012\004\151" +
    "\005\154\006\155\010\152\001\002\000\014\003\uff51\035" +
    "\uff51\037\uff51\057\uff51\060\uff51\001\002\000\014\003\uff4e" +
    "\035\uff4e\037\uff4e\057\uff4e\060\uff4e\001\002\000\004\035" +
    "\156\001\002\000\014\003\uff50\035\uff50\037\uff50\057\uff50" +
    "\060\uff50\001\002\000\014\003\uff4f\035\uff4f\037\uff4f\057" +
    "\uff4f\060\uff4f\001\002\000\010\020\022\023\014\077\013" +
    "\001\002\000\004\036\160\001\002\000\050\011\175\014" +
    "\166\016\uff63\017\174\024\203\030\205\031\173\033\161" +
    "\034\171\047\037\055\047\056\044\076\164\077\176\100" +
    "\034\102\051\103\035\104\036\105\043\001\002\000\004" +
    "\056\336\001\002\000\004\016\333\001\002\000\060\003" +
    "\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c\016\uff5c\017\uff5c" +
    "\024\uff5c\026\uff5c\030\uff5c\031\uff5c\033\uff5c\034\uff5c\047" +
    "\uff5c\055\uff5c\056\uff5c\076\uff5c\077\uff5c\100\uff5c\102\uff5c" +
    "\103\uff5c\104\uff5c\105\uff5c\001\002\000\024\047\037\055" +
    "\047\056\044\077\046\100\034\102\051\103\035\104\036" +
    "\105\043\001\002\000\060\003\uff5a\011\uff5a\012\uff5a\013" +
    "\uff5a\014\uff5a\016\uff5a\017\uff5a\024\uff5a\026\uff5a\030\uff5a" +
    "\031\uff5a\033\uff5a\034\uff5a\047\uff5a\055\uff5a\056\uff5a\076" +
    "\uff5a\077\uff5a\100\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a" +
    "\001\002\000\004\077\274\001\002\000\060\003\uff5b\011" +
    "\uff5b\012\uff5b\013\uff5b\014\uff5b\016\uff5b\017\uff5b\024\uff5b" +
    "\026\uff5b\030\uff5b\031\uff5b\033\uff5b\034\uff5b\047\uff5b\055" +
    "\uff5b\056\uff5b\076\uff5b\077\uff5b\100\uff5b\102\uff5b\103\uff5b" +
    "\104\uff5b\105\uff5b\001\002\000\060\003\uff5d\011\uff5d\012" +
    "\uff5d\013\uff5d\014\uff5d\016\uff5d\017\uff5d\024\uff5d\026\uff5d" +
    "\030\uff5d\031\uff5d\033\uff5d\034\uff5d\047\uff5d\055\uff5d\056" +
    "\uff5d\076\uff5d\077\uff5d\100\uff5d\102\uff5d\103\uff5d\104\uff5d" +
    "\105\uff5d\001\002\000\004\056\270\001\002\000\060\003" +
    "\uff62\011\uff62\012\uff62\013\uff62\014\uff62\016\uff62\017\uff62" +
    "\024\uff62\026\uff62\030\uff62\031\uff62\033\uff62\034\uff62\047" +
    "\uff62\055\uff62\056\uff62\076\uff62\077\uff62\100\uff62\102\uff62" +
    "\103\uff62\104\uff62\105\uff62\001\002\000\050\011\175\014" +
    "\166\016\uff63\017\174\024\203\030\205\031\173\033\161" +
    "\034\171\047\037\055\047\056\044\076\164\077\176\100" +
    "\034\102\051\103\035\104\036\105\043\001\002\000\004" +
    "\026\261\001\002\000\024\047\037\055\047\056\044\077" +
    "\046\100\034\102\051\103\035\104\036\105\043\001\002" +
    "\000\046\003\uff96\037\224\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\054\uff96\056\127\060\uff96\073\uff96\001" +
    "\002\000\042\003\222\040\071\041\057\042\061\043\065" +
    "\044\066\045\056\046\067\047\064\050\062\051\070\052" +
    "\060\053\055\054\072\060\223\073\063\001\002\000\060" +
    "\003\uff58\011\uff58\012\uff58\013\uff58\014\uff58\016\uff58\017" +
    "\uff58\024\uff58\026\uff58\030\uff58\031\uff58\033\uff58\034\uff58" +
    "\047\uff58\055\uff58\056\uff58\076\uff58\077\uff58\100\uff58\102" +
    "\uff58\103\uff58\104\uff58\105\uff58\001\002\000\060\003\uff59" +
    "\011\uff59\012\uff59\013\uff59\014\uff59\016\uff59\017\uff59\024" +
    "\uff59\026\uff59\030\uff59\031\uff59\033\uff59\034\uff59\047\uff59" +
    "\055\uff59\056\uff59\076\uff59\077\uff59\100\uff59\102\uff59\103" +
    "\uff59\104\uff59\105\uff59\001\002\000\060\003\uff63\011\175" +
    "\012\uff63\013\uff63\014\166\016\uff63\017\174\024\203\026" +
    "\uff63\030\205\031\173\033\161\034\171\047\037\055\047" +
    "\056\044\076\164\077\176\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\026\003\217\047\037\055\047" +
    "\056\044\077\046\100\034\102\051\103\035\104\036\105" +
    "\043\001\002\000\060\003\uff57\011\uff57\012\uff57\013\uff57" +
    "\014\uff57\016\uff57\017\uff57\024\uff57\026\uff57\030\uff57\031" +
    "\uff57\033\uff57\034\uff57\047\uff57\055\uff57\056\uff57\076\uff57" +
    "\077\uff57\100\uff57\102\uff57\103\uff57\104\uff57\105\uff57\001" +
    "\002\000\024\047\037\055\047\056\044\077\046\100\034" +
    "\102\051\103\035\104\036\105\043\001\002\000\060\003" +
    "\uff5f\011\uff5f\012\uff5f\013\uff5f\014\uff5f\016\uff5f\017\uff5f" +
    "\024\uff5f\026\uff5f\030\uff5f\031\uff5f\033\uff5f\034\uff5f\047" +
    "\uff5f\055\uff5f\056\uff5f\076\uff5f\077\uff5f\100\uff5f\102\uff5f" +
    "\103\uff5f\104\uff5f\105\uff5f\001\002\000\060\003\uff5e\011" +
    "\uff5e\012\uff5e\013\uff5e\014\uff5e\016\uff5e\017\uff5e\024\uff5e" +
    "\026\uff5e\030\uff5e\031\uff5e\033\uff5e\034\uff5e\047\uff5e\055" +
    "\uff5e\056\uff5e\076\uff5e\077\uff5e\100\uff5e\102\uff5e\103\uff5e" +
    "\104\uff5e\105\uff5e\001\002\000\040\031\211\040\071\041" +
    "\057\042\061\043\065\044\066\045\056\046\067\047\064" +
    "\050\062\051\070\052\060\053\055\054\072\073\063\001" +
    "\002\000\050\011\175\014\166\016\uff63\017\174\024\203" +
    "\030\205\031\173\033\161\034\171\047\037\055\047\056" +
    "\044\076\164\077\176\100\034\102\051\103\035\104\036" +
    "\105\043\001\002\000\004\016\213\001\002\000\004\031" +
    "\214\001\002\000\004\060\215\001\002\000\060\003\uff41" +
    "\011\uff41\012\uff41\013\uff41\014\uff41\016\uff41\017\uff41\024" +
    "\uff41\026\uff41\030\uff41\031\uff41\033\uff41\034\uff41\047\uff41" +
    "\055\uff41\056\uff41\076\uff41\077\uff41\100\uff41\102\uff41\103" +
    "\uff41\104\uff41\105\uff41\001\002\000\040\040\071\041\057" +
    "\042\061\043\065\044\066\045\056\046\067\047\064\050" +
    "\062\051\070\052\060\053\055\054\072\060\220\073\063" +
    "\001\002\000\060\003\uff33\011\uff33\012\uff33\013\uff33\014" +
    "\uff33\016\uff33\017\uff33\024\uff33\026\uff33\030\uff33\031\uff33" +
    "\033\uff33\034\uff33\047\uff33\055\uff33\056\uff33\076\uff33\077" +
    "\uff33\100\uff33\102\uff33\103\uff33\104\uff33\105\uff33\001\002" +
    "\000\060\003\uff34\011\uff34\012\uff34\013\uff34\014\uff34\016" +
    "\uff34\017\uff34\024\uff34\026\uff34\030\uff34\031\uff34\033\uff34" +
    "\034\uff34\047\uff34\055\uff34\056\uff34\076\uff34\077\uff34\100" +
    "\uff34\102\uff34\103\uff34\104\uff34\105\uff34\001\002\000\014" +
    "\003\uff64\012\uff64\013\uff64\016\uff64\026\uff64\001\002\000" +
    "\060\003\uff60\011\uff60\012\uff60\013\uff60\014\uff60\016\uff60" +
    "\017\uff60\024\uff60\026\uff60\030\uff60\031\uff60\033\uff60\034" +
    "\uff60\047\uff60\055\uff60\056\uff60\076\uff60\077\uff60\100\uff60" +
    "\102\uff60\103\uff60\104\uff60\105\uff60\001\002\000\060\003" +
    "\uff61\011\uff61\012\uff61\013\uff61\014\uff61\016\uff61\017\uff61" +
    "\024\uff61\026\uff61\030\uff61\031\uff61\033\uff61\034\uff61\047" +
    "\uff61\055\uff61\056\uff61\076\uff61\077\uff61\100\uff61\102\uff61" +
    "\103\uff61\104\uff61\105\uff61\001\002\000\024\047\037\055" +
    "\047\056\044\077\046\100\034\102\051\103\035\104\036" +
    "\105\043\001\002\000\040\040\071\041\057\042\061\043" +
    "\065\044\066\045\056\046\067\047\064\050\062\051\070" +
    "\052\060\053\055\054\072\060\226\073\063\001\002\000" +
    "\060\003\uff4d\011\uff4d\012\uff4d\013\uff4d\014\uff4d\016\uff4d" +
    "\017\uff4d\024\uff4d\026\uff4d\030\uff4d\031\uff4d\033\uff4d\034" +
    "\uff4d\047\uff4d\055\uff4d\056\uff4d\076\uff4d\077\uff4d\100\uff4d" +
    "\102\uff4d\103\uff4d\104\uff4d\105\uff4d\001\002\000\040\025" +
    "\230\040\071\041\057\042\061\043\065\044\066\045\056" +
    "\046\067\047\064\050\062\051\070\052\060\053\055\054" +
    "\072\073\063\001\002\000\054\011\175\012\uff63\013\uff63" +
    "\014\166\016\uff63\017\174\024\203\030\205\031\173\033" +
    "\161\034\171\047\037\055\047\056\044\076\164\077\176" +
    "\100\034\102\051\103\035\104\036\105\043\001\002\000" +
    "\010\012\232\013\234\016\236\001\002\000\050\011\175" +
    "\014\166\016\uff63\017\174\024\203\030\205\031\173\033" +
    "\161\034\171\047\037\055\047\056\044\076\164\077\176" +
    "\100\034\102\051\103\035\104\036\105\043\001\002\000" +
    "\010\012\uff47\013\234\016\uff47\001\002\000\024\047\037" +
    "\055\047\056\044\077\046\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\006\012\241\016\242\001\002" +
    "\000\004\011\237\001\002\000\004\060\240\001\002\000" +
    "\060\003\uff45\011\uff45\012\uff45\013\uff45\014\uff45\016\uff45" +
    "\017\uff45\024\uff45\026\uff45\030\uff45\031\uff45\033\uff45\034" +
    "\uff45\047\uff45\055\uff45\056\uff45\076\uff45\077\uff45\100\uff45" +
    "\102\uff45\103\uff45\104\uff45\105\uff45\001\002\000\050\011" +
    "\175\014\166\016\uff63\017\174\024\203\030\205\031\173" +
    "\033\161\034\171\047\037\055\047\056\044\076\164\077" +
    "\176\100\034\102\051\103\035\104\036\105\043\001\002" +
    "\000\004\011\243\001\002\000\004\060\244\001\002\000" +
    "\060\003\uff43\011\uff43\012\uff43\013\uff43\014\uff43\016\uff43" +
    "\017\uff43\024\uff43\026\uff43\030\uff43\031\uff43\033\uff43\034" +
    "\uff43\047\uff43\055\uff43\056\uff43\076\uff43\077\uff43\100\uff43" +
    "\102\uff43\103\uff43\104\uff43\105\uff43\001\002\000\004\016" +
    "\246\001\002\000\004\011\247\001\002\000\004\060\250" +
    "\001\002\000\060\003\uff42\011\uff42\012\uff42\013\uff42\014" +
    "\uff42\016\uff42\017\uff42\024\uff42\026\uff42\030\uff42\031\uff42" +
    "\033\uff42\034\uff42\047\uff42\055\uff42\056\uff42\076\uff42\077" +
    "\uff42\100\uff42\102\uff42\103\uff42\104\uff42\105\uff42\001\002" +
    "\000\040\025\252\040\071\041\057\042\061\043\065\044" +
    "\066\045\056\046\067\047\064\050\062\051\070\052\060" +
    "\053\055\054\072\073\063\001\002\000\054\011\175\012" +
    "\uff63\013\uff63\014\166\016\uff63\017\174\024\203\030\205" +
    "\031\173\033\161\034\171\047\037\055\047\056\044\076" +
    "\164\077\176\100\034\102\051\103\035\104\036\105\043" +
    "\001\002\000\010\012\uff46\013\uff46\016\uff46\001\002\000" +
    "\006\012\uff48\016\uff48\001\002\000\004\016\256\001\002" +
    "\000\004\011\257\001\002\000\004\060\260\001\002\000" +
    "\060\003\uff44\011\uff44\012\uff44\013\uff44\014\uff44\016\uff44" +
    "\017\uff44\024\uff44\026\uff44\030\uff44\031\uff44\033\uff44\034" +
    "\uff44\047\uff44\055\uff44\056\uff44\076\uff44\077\uff44\100\uff44" +
    "\102\uff44\103\uff44\104\uff44\105\uff44\001\002\000\024\047" +
    "\037\055\047\056\044\077\046\100\034\102\051\103\035" +
    "\104\036\105\043\001\002\000\040\040\071\041\057\042" +
    "\061\043\065\044\066\045\056\046\067\047\064\050\062" +
    "\051\070\052\060\053\055\054\072\060\263\073\063\001" +
    "\002\000\060\003\uff3f\011\uff3f\012\uff3f\013\uff3f\014\uff3f" +
    "\016\uff3f\017\uff3f\024\uff3f\026\uff3f\030\uff3f\031\uff3f\033" +
    "\uff3f\034\uff3f\047\uff3f\055\uff3f\056\uff3f\076\uff3f\077\uff3f" +
    "\100\uff3f\102\uff3f\103\uff3f\104\uff3f\105\uff3f\001\002\000" +
    "\004\016\265\001\002\000\004\031\266\001\002\000\004" +
    "\060\267\001\002\000\060\003\uff3e\011\uff3e\012\uff3e\013" +
    "\uff3e\014\uff3e\016\uff3e\017\uff3e\024\uff3e\026\uff3e\030\uff3e" +
    "\031\uff3e\033\uff3e\034\uff3e\047\uff3e\055\uff3e\056\uff3e\076" +
    "\uff3e\077\uff3e\100\uff3e\102\uff3e\103\uff3e\104\uff3e\105\uff3e" +
    "\001\002\000\004\077\271\001\002\000\004\057\272\001" +
    "\002\000\004\060\273\001\002\000\060\003\uff4a\011\uff4a" +
    "\012\uff4a\013\uff4a\014\uff4a\016\uff4a\017\uff4a\024\uff4a\026" +
    "\uff4a\030\uff4a\031\uff4a\033\uff4a\034\uff4a\047\uff4a\055\uff4a" +
    "\056\uff4a\076\uff4a\077\uff4a\100\uff4a\102\uff4a\103\uff4a\104" +
    "\uff4a\105\uff4a\001\002\000\004\027\275\001\002\000\024" +
    "\047\037\055\047\056\044\077\046\100\034\102\051\103" +
    "\035\104\036\105\043\001\002\000\004\031\302\001\002" +
    "\000\040\040\071\041\057\042\061\043\065\044\066\045" +
    "\056\046\067\047\064\050\062\051\070\052\060\053\055" +
    "\054\072\061\300\073\063\001\002\000\024\047\037\055" +
    "\047\056\044\077\046\100\034\102\051\103\035\104\036" +
    "\105\043\001\002\000\044\031\uff56\040\071\041\057\042" +
    "\061\043\065\044\066\045\056\046\067\047\064\050\062" +
    "\051\070\052\060\053\055\054\072\065\uff56\072\uff56\073" +
    "\063\001\002\000\050\011\175\014\166\016\uff63\017\174" +
    "\024\203\030\205\031\173\033\161\034\171\047\037\055" +
    "\047\056\044\076\164\077\176\100\034\102\051\103\035" +
    "\104\036\105\043\001\002\000\004\016\304\001\002\000" +
    "\004\031\305\001\002\000\004\060\306\001\002\000\060" +
    "\003\uff40\011\uff40\012\uff40\013\uff40\014\uff40\016\uff40\017" +
    "\uff40\024\uff40\026\uff40\030\uff40\031\uff40\033\uff40\034\uff40" +
    "\047\uff40\055\uff40\056\uff40\076\uff40\077\uff40\100\uff40\102" +
    "\uff40\103\uff40\104\uff40\105\uff40\001\002\000\040\035\310" +
    "\040\071\041\057\042\061\043\065\044\066\045\056\046" +
    "\067\047\064\050\062\051\070\052\060\053\055\054\072" +
    "\073\063\001\002\000\004\026\311\001\002\000\026\047" +
    "\037\055\047\056\044\075\320\077\046\100\034\102\051" +
    "\103\035\104\036\105\043\001\002\000\004\016\315\001" +
    "\002\000\006\016\uff3c\026\311\001\002\000\004\016\uff3b" +
    "\001\002\000\004\076\316\001\002\000\004\060\317\001" +
    "\002\000\060\003\uff3d\011\uff3d\012\uff3d\013\uff3d\014\uff3d" +
    "\016\uff3d\017\uff3d\024\uff3d\026\uff3d\030\uff3d\031\uff3d\033" +
    "\uff3d\034\uff3d\047\uff3d\055\uff3d\056\uff3d\076\uff3d\077\uff3d" +
    "\100\uff3d\102\uff3d\103\uff3d\104\uff3d\105\uff3d\001\002\000" +
    "\004\072\331\001\002\000\044\040\071\041\057\042\061" +
    "\043\065\044\066\045\056\046\067\047\064\050\062\051" +
    "\070\052\060\053\055\054\072\061\300\065\uff36\072\uff36" +
    "\073\063\001\002\000\006\065\uff35\072\uff35\001\002\000" +
    "\006\065\327\072\uff38\001\002\000\004\072\325\001\002" +
    "\000\052\011\175\014\166\016\uff63\017\174\024\203\026" +
    "\uff63\030\205\031\173\033\161\034\171\047\037\055\047" +
    "\056\044\076\164\077\176\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\006\016\uff3a\026\uff3a\001\002" +
    "\000\024\047\037\055\047\056\044\077\046\100\034\102" +
    "\051\103\035\104\036\105\043\001\002\000\004\072\uff37" +
    "\001\002\000\052\011\175\014\166\016\uff63\017\174\024" +
    "\203\026\uff63\030\205\031\173\033\161\034\171\047\037" +
    "\055\047\056\044\076\164\077\176\100\034\102\051\103" +
    "\035\104\036\105\043\001\002\000\006\016\uff39\026\uff39" +
    "\001\002\000\004\077\334\001\002\000\004\060\335\001" +
    "\002\000\014\003\uffdd\020\uffdd\023\uffdd\036\uffdd\077\uffdd" +
    "\001\002\000\024\047\037\055\047\056\044\077\046\100" +
    "\034\102\051\103\035\104\036\105\043\001\002\000\040" +
    "\040\071\041\057\042\061\043\065\044\066\045\056\046" +
    "\067\047\064\050\062\051\070\052\060\053\055\054\072" +
    "\057\340\073\063\001\002\000\004\060\341\001\002\000" +
    "\060\003\uff49\011\uff49\012\uff49\013\uff49\014\uff49\016\uff49" +
    "\017\uff49\024\uff49\026\uff49\030\uff49\031\uff49\033\uff49\034" +
    "\uff49\047\uff49\055\uff49\056\uff49\076\uff49\077\uff49\100\uff49" +
    "\102\uff49\103\uff49\104\uff49\105\uff49\001\002\000\022\003" +
    "\346\004\151\005\154\006\155\010\152\022\350\027\343" +
    "\032\344\001\002\000\014\003\uff9a\004\uff9a\005\uff9a\006" +
    "\uff9a\010\uff9a\001\002\000\014\003\uff99\004\uff99\005\uff99" +
    "\006\uff99\010\uff99\001\002\000\014\003\355\004\151\005" +
    "\154\006\155\010\152\001\002\000\022\003\uff4b\004\uffa3" +
    "\005\uffa3\006\uffa3\010\uffa3\037\uff4b\057\uff4b\060\uff4b\001" +
    "\002\000\012\003\uff4c\037\uff4c\057\uff4c\060\uff4c\001\002" +
    "\000\014\003\uff98\004\uff98\005\uff98\006\uff98\010\uff98\001" +
    "\002\000\012\004\151\005\154\006\155\010\152\001\002" +
    "\000\004\037\353\001\002\000\024\047\037\055\047\056" +
    "\044\077\046\100\034\102\051\103\035\104\036\105\043" +
    "\001\002\000\044\003\uffa2\040\071\041\057\042\061\043" +
    "\065\044\066\045\056\046\067\047\064\050\062\051\070" +
    "\052\060\053\055\054\072\057\uffa2\060\uffa2\073\063\001" +
    "\002\000\012\003\uff9d\037\uffa1\057\uff9d\060\uff9d\001\002" +
    "\000\012\003\uff9e\037\357\057\uff9e\060\uff9e\001\002\000" +
    "\026\003\361\047\037\055\047\056\044\077\046\100\034" +
    "\102\051\103\035\104\036\105\043\001\002\000\044\003" +
    "\uffa4\040\071\041\057\042\061\043\065\044\066\045\056" +
    "\046\067\047\064\050\062\051\070\052\060\053\055\054" +
    "\072\057\uffa4\060\uffa4\073\063\001\002\000\010\003\uff9f" +
    "\057\uff9f\060\uff9f\001\002\000\004\037\363\001\002\000" +
    "\024\047\037\055\047\056\044\077\046\100\034\102\051" +
    "\103\035\104\036\105\043\001\002\000\044\003\uffa0\040" +
    "\071\041\057\042\061\043\065\044\066\045\056\046\067" +
    "\047\064\050\062\051\070\052\060\053\055\054\072\057" +
    "\uffa0\060\uffa0\073\063\001\002\000\010\057\uffdc\060\uffdc" +
    "\077\uffdc\001\002\000\012\003\uffa5\057\uffa5\060\uffa5\077" +
    "\013\001\002\000\010\003\370\057\371\060\146\001\002" +
    "\000\004\024\uffda\001\002\000\006\003\372\024\373\001" +
    "\002\000\012\004\uffd8\005\uffd8\006\uffd8\010\uffd8\001\002" +
    "\000\014\003\374\004\151\005\154\006\155\010\152\001" +
    "\002\000\004\035\uffcc\001\002\000\006\003\376\035\377" +
    "\001\002\000\012\020\uffd6\023\uffd6\036\uffca\077\uffd6\001" +
    "\002\000\014\003\u0101\020\022\023\014\036\u0102\077\013" +
    "\001\002\000\006\003\u0114\036\u0115\001\002\000\050\011" +
    "\uffc8\014\uffc8\016\uffc8\017\uffc8\024\uffc8\030\uffc8\031\uffc8" +
    "\033\uffc8\034\uffc8\047\uffc8\055\uffc8\056\uffc8\076\uffc8\077" +
    "\uffc8\100\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\001\002" +
    "\000\052\003\uff63\011\175\014\166\016\uff63\017\174\024" +
    "\203\030\205\031\173\033\161\034\171\047\037\055\047" +
    "\056\044\076\164\077\176\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\006\003\u0104\016\u0105\001\002" +
    "\000\004\077\uffc6\001\002\000\006\003\u0107\077\u0106\001" +
    "\002\000\006\003\u010a\060\u010b\001\002\000\004\060\uffc4" +
    "\001\002\000\004\060\u0109\001\002\000\014\003\uffc3\020" +
    "\uffc3\023\uffc3\036\uffc3\077\uffc3\001\002\000\014\003\uffc2" +
    "\020\uffc2\023\uffc2\036\uffc2\077\uffc2\001\002\000\014\003" +
    "\uffcd\020\uffcd\023\uffcd\036\uffcd\077\uffcd\001\002\000\004" +
    "\077\u010d\001\002\000\004\060\u010e\001\002\000\014\003" +
    "\uffc5\020\uffc5\023\uffc5\036\uffc5\077\uffc5\001\002\000\050" +
    "\011\175\014\166\016\uff63\017\174\024\203\030\205\031" +
    "\173\033\161\034\171\047\037\055\047\056\044\076\164" +
    "\077\176\100\034\102\051\103\035\104\036\105\043\001" +
    "\002\000\004\016\u0111\001\002\000\004\077\u0112\001\002" +
    "\000\004\060\u0113\001\002\000\014\003\uffc7\020\uffc7\023" +
    "\uffc7\036\uffc7\077\uffc7\001\002\000\050\011\uffd4\014\uffd4" +
    "\016\uffd4\017\uffd4\024\uffd4\030\uffd4\031\uffd4\033\uffd4\034" +
    "\uffd4\047\uffd4\055\uffd4\056\uffd4\076\uffd4\077\uffd4\100\uffd4" +
    "\102\uffd4\103\uffd4\104\uffd4\105\uffd4\001\002\000\052\003" +
    "\uff63\011\175\014\166\016\uff63\017\174\024\203\030\205" +
    "\031\173\033\161\034\171\047\037\055\047\056\044\076" +
    "\164\077\176\100\034\102\051\103\035\104\036\105\043" +
    "\001\002\000\006\003\u0117\016\u0118\001\002\000\004\077" +
    "\uffd2\001\002\000\006\003\u011a\077\u0119\001\002\000\006" +
    "\003\u011d\060\u011e\001\002\000\004\060\uffd0\001\002\000" +
    "\004\060\u011c\001\002\000\014\003\uffcf\020\uffcf\023\uffcf" +
    "\036\uffcf\077\uffcf\001\002\000\014\003\uffce\020\uffce\023" +
    "\uffce\036\uffce\077\uffce\001\002\000\014\003\uffdf\020\uffdf" +
    "\023\uffdf\036\uffdf\077\uffdf\001\002\000\004\077\u0120\001" +
    "\002\000\004\060\u0121\001\002\000\014\003\uffd1\020\uffd1" +
    "\023\uffd1\036\uffd1\077\uffd1\001\002\000\050\011\175\014" +
    "\166\016\uff63\017\174\024\203\030\205\031\173\033\161" +
    "\034\171\047\037\055\047\056\044\076\164\077\176\100" +
    "\034\102\051\103\035\104\036\105\043\001\002\000\004" +
    "\016\u0124\001\002\000\004\077\u0125\001\002\000\004\060" +
    "\u0126\001\002\000\014\003\uffd3\020\uffd3\023\uffd3\036\uffd3" +
    "\077\uffd3\001\002\000\004\036\u012f\001\002\000\010\020" +
    "\022\023\014\077\013\001\002\000\004\036\u012a\001\002" +
    "\000\050\011\175\014\166\016\uff63\017\174\024\203\030" +
    "\205\031\173\033\161\034\171\047\037\055\047\056\044" +
    "\076\164\077\176\100\034\102\051\103\035\104\036\105" +
    "\043\001\002\000\004\016\u012c\001\002\000\004\077\u012d" +
    "\001\002\000\004\060\u012e\001\002\000\014\003\uffd5\020" +
    "\uffd5\023\uffd5\036\uffd5\077\uffd5\001\002\000\050\011\175" +
    "\014\166\016\uff63\017\174\024\203\030\205\031\173\033" +
    "\161\034\171\047\037\055\047\056\044\076\164\077\176" +
    "\100\034\102\051\103\035\104\036\105\043\001\002\000" +
    "\004\016\u0131\001\002\000\004\077\u0132\001\002\000\004" +
    "\060\u0133\001\002\000\014\003\uffc9\020\uffc9\023\uffc9\036" +
    "\uffc9\077\uffc9\001\002\000\004\035\u0135\001\002\000\004" +
    "\036\u0136\001\002\000\050\011\175\014\166\016\uff63\017" +
    "\174\024\203\030\205\031\173\033\161\034\171\047\037" +
    "\055\047\056\044\076\164\077\176\100\034\102\051\103" +
    "\035\104\036\105\043\001\002\000\004\016\u0138\001\002" +
    "\000\004\077\u0139\001\002\000\004\060\u013a\001\002\000" +
    "\014\003\uffcb\020\uffcb\023\uffcb\036\uffcb\077\uffcb\001\002" +
    "\000\012\004\151\005\154\006\155\010\152\001\002\000" +
    "\004\035\u013d\001\002\000\010\020\022\023\014\077\013" +
    "\001\002\000\004\036\u013f\001\002\000\050\011\175\014" +
    "\166\016\uff63\017\174\024\203\030\205\031\173\033\161" +
    "\034\171\047\037\055\047\056\044\076\164\077\176\100" +
    "\034\102\051\103\035\104\036\105\043\001\002\000\004" +
    "\016\u0141\001\002\000\004\077\u0142\001\002\000\004\060" +
    "\u0143\001\002\000\014\003\uffd7\020\uffd7\023\uffd7\036\uffd7" +
    "\077\uffd7\001\002\000\004\024\u0145\001\002\000\012\004" +
    "\151\005\154\006\155\010\152\001\002\000\004\035\u0147" +
    "\001\002\000\010\020\022\023\014\077\013\001\002\000" +
    "\004\036\u0149\001\002\000\050\011\175\014\166\016\uff63" +
    "\017\174\024\203\030\205\031\173\033\161\034\171\047" +
    "\037\055\047\056\044\076\164\077\176\100\034\102\051" +
    "\103\035\104\036\105\043\001\002\000\004\016\u014b\001" +
    "\002\000\004\077\u014c\001\002\000\004\060\u014d\001\002" +
    "\000\014\003\uffd9\020\uffd9\023\uffd9\036\uffd9\077\uffd9\001" +
    "\002\000\010\057\uffa5\060\uffa5\077\013\001\002\000\006" +
    "\057\u0150\060\146\001\002\000\004\024\u0151\001\002\000" +
    "\012\004\151\005\154\006\155\010\152\001\002\000\004" +
    "\035\u0153\001\002\000\010\020\022\023\014\077\013\001" +
    "\002\000\004\036\u0155\001\002\000\050\011\175\014\166" +
    "\016\uff63\017\174\024\203\030\205\031\173\033\161\034" +
    "\171\047\037\055\047\056\044\076\164\077\176\100\034" +
    "\102\051\103\035\104\036\105\043\001\002\000\004\016" +
    "\u0157\001\002\000\004\077\u0158\001\002\000\004\060\u0159" +
    "\001\002\000\014\003\uffdb\020\uffdb\023\uffdb\036\uffdb\077" +
    "\uffdb\001\002\000\006\003\uffe0\036\uffe0\001\002\000\014" +
    "\003\uffe1\020\022\023\014\036\uffe1\077\013\001\002\000" +
    "\006\003\uffe6\036\uffe6\001\002\000\006\003\uffe5\036\uffe5" +
    "\001\002\000\050\011\175\014\166\016\uff63\017\174\024" +
    "\203\030\205\031\173\033\161\034\171\047\037\055\047" +
    "\056\044\076\164\077\176\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\004\016\u0160\001\002\000\004" +
    "\077\u0161\001\002\000\004\060\u0162\001\002\000\004\002" +
    "\ufffe\001\002\000\014\003\u0164\004\151\005\154\006\155" +
    "\010\152\001\002\000\006\003\uff4b\060\uff4b\001\002\000" +
    "\006\003\uffe4\036\uffe4\001\002\000\006\003\u0173\056\u0174" +
    "\001\002\000\004\056\uffc0\001\002\000\004\056\u0169\001" +
    "\002\000\010\057\uffa5\060\uffa5\077\013\001\002\000\006" +
    "\057\u016b\060\146\001\002\000\004\035\u016c\001\002\000" +
    "\010\020\022\023\014\077\013\001\002\000\004\036\u016e" +
    "\001\002\000\050\011\175\014\166\016\uff63\017\174\024" +
    "\203\030\205\031\173\033\161\034\171\047\037\055\047" +
    "\056\044\076\164\077\176\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\004\016\u0170\001\002\000\004" +
    "\077\u0171\001\002\000\004\060\u0172\001\002\000\014\003" +
    "\uffbf\020\uffbf\023\uffbf\036\uffbf\077\uffbf\001\002\000\010" +
    "\057\uffbe\060\uffbe\077\uffbe\001\002\000\012\003\uffa5\057" +
    "\uffa5\060\uffa5\077\013\001\002\000\010\003\u0176\057\u0177" +
    "\060\146\001\002\000\004\035\uffbc\001\002\000\006\003" +
    "\u0178\035\u0179\001\002\000\012\020\uffba\023\uffba\036\uffb0" +
    "\077\uffba\001\002\000\014\003\u017b\020\022\023\014\036" +
    "\u017c\077\013\001\002\000\006\003\u018e\036\u018f\001\002" +
    "\000\050\011\uffae\014\uffae\016\uffae\017\uffae\024\uffae\030" +
    "\uffae\031\uffae\033\uffae\034\uffae\047\uffae\055\uffae\056\uffae" +
    "\076\uffae\077\uffae\100\uffae\102\uffae\103\uffae\104\uffae\105" +
    "\uffae\001\002\000\052\003\uff63\011\175\014\166\016\uff63" +
    "\017\174\024\203\030\205\031\173\033\161\034\171\047" +
    "\037\055\047\056\044\076\164\077\176\100\034\102\051" +
    "\103\035\104\036\105\043\001\002\000\006\003\u017e\016" +
    "\u017f\001\002\000\004\077\uffac\001\002\000\006\003\u0181" +
    "\077\u0180\001\002\000\006\003\u0184\060\u0185\001\002\000" +
    "\004\060\uffaa\001\002\000\004\060\u0183\001\002\000\014" +
    "\003\uffa9\020\uffa9\023\uffa9\036\uffa9\077\uffa9\001\002\000" +
    "\014\003\uffa8\020\uffa8\023\uffa8\036\uffa8\077\uffa8\001\002" +
    "\000\014\003\uffb1\020\uffb1\023\uffb1\036\uffb1\077\uffb1\001" +
    "\002\000\004\077\u0187\001\002\000\004\060\u0188\001\002" +
    "\000\014\003\uffab\020\uffab\023\uffab\036\uffab\077\uffab\001" +
    "\002\000\050\011\175\014\166\016\uff63\017\174\024\203" +
    "\030\205\031\173\033\161\034\171\047\037\055\047\056" +
    "\044\076\164\077\176\100\034\102\051\103\035\104\036" +
    "\105\043\001\002\000\004\016\u018b\001\002\000\004\077" +
    "\u018c\001\002\000\004\060\u018d\001\002\000\014\003\uffad" +
    "\020\uffad\023\uffad\036\uffad\077\uffad\001\002\000\050\011" +
    "\uffb8\014\uffb8\016\uffb8\017\uffb8\024\uffb8\030\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\047\uffb8\055\uffb8\056\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\102\uffb8\103\uffb8\104\uffb8\105\uffb8\001\002" +
    "\000\052\003\uff63\011\175\014\166\016\uff63\017\174\024" +
    "\203\030\205\031\173\033\161\034\171\047\037\055\047" +
    "\056\044\076\164\077\176\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\006\003\u0191\016\u0192\001\002" +
    "\000\004\077\uffb6\001\002\000\006\003\u0194\077\u0193\001" +
    "\002\000\006\003\u0197\060\u0198\001\002\000\004\060\uffb4" +
    "\001\002\000\004\060\u0196\001\002\000\014\003\uffb3\020" +
    "\uffb3\023\uffb3\036\uffb3\077\uffb3\001\002\000\014\003\uffb2" +
    "\020\uffb2\023\uffb2\036\uffb2\077\uffb2\001\002\000\014\003" +
    "\uffc1\020\uffc1\023\uffc1\036\uffc1\077\uffc1\001\002\000\004" +
    "\077\u019a\001\002\000\004\060\u019b\001\002\000\014\003" +
    "\uffb5\020\uffb5\023\uffb5\036\uffb5\077\uffb5\001\002\000\050" +
    "\011\175\014\166\016\uff63\017\174\024\203\030\205\031" +
    "\173\033\161\034\171\047\037\055\047\056\044\076\164" +
    "\077\176\100\034\102\051\103\035\104\036\105\043\001" +
    "\002\000\004\016\u019e\001\002\000\004\077\u019f\001\002" +
    "\000\004\060\u01a0\001\002\000\014\003\uffb7\020\uffb7\023" +
    "\uffb7\036\uffb7\077\uffb7\001\002\000\004\036\u01a9\001\002" +
    "\000\010\020\022\023\014\077\013\001\002\000\004\036" +
    "\u01a4\001\002\000\050\011\175\014\166\016\uff63\017\174" +
    "\024\203\030\205\031\173\033\161\034\171\047\037\055" +
    "\047\056\044\076\164\077\176\100\034\102\051\103\035" +
    "\104\036\105\043\001\002\000\004\016\u01a6\001\002\000" +
    "\004\077\u01a7\001\002\000\004\060\u01a8\001\002\000\014" +
    "\003\uffb9\020\uffb9\023\uffb9\036\uffb9\077\uffb9\001\002\000" +
    "\050\011\175\014\166\016\uff63\017\174\024\203\030\205" +
    "\031\173\033\161\034\171\047\037\055\047\056\044\076" +
    "\164\077\176\100\034\102\051\103\035\104\036\105\043" +
    "\001\002\000\004\016\u01ab\001\002\000\004\077\u01ac\001" +
    "\002\000\004\060\u01ad\001\002\000\014\003\uffaf\020\uffaf" +
    "\023\uffaf\036\uffaf\077\uffaf\001\002\000\004\035\u01af\001" +
    "\002\000\010\020\022\023\014\077\013\001\002\000\004" +
    "\036\u01b1\001\002\000\050\011\175\014\166\016\uff63\017" +
    "\174\024\203\030\205\031\173\033\161\034\171\047\037" +
    "\055\047\056\044\076\164\077\176\100\034\102\051\103" +
    "\035\104\036\105\043\001\002\000\004\016\u01b3\001\002" +
    "\000\004\077\u01b4\001\002\000\004\060\u01b5\001\002\000" +
    "\014\003\uffbb\020\uffbb\023\uffbb\036\uffbb\077\uffbb\001\002" +
    "\000\010\057\uffa5\060\uffa5\077\013\001\002\000\006\057" +
    "\u01b8\060\146\001\002\000\004\035\u01b9\001\002\000\010" +
    "\020\022\023\014\077\013\001\002\000\004\036\u01bb\001" +
    "\002\000\050\011\175\014\166\016\uff63\017\174\024\203" +
    "\030\205\031\173\033\161\034\171\047\037\055\047\056" +
    "\044\076\164\077\176\100\034\102\051\103\035\104\036" +
    "\105\043\001\002\000\004\016\u01bd\001\002\000\004\077" +
    "\u01be\001\002\000\004\060\u01bf\001\002\000\014\003\uffbd" +
    "\020\uffbd\023\uffbd\036\uffbd\077\uffbd\001\002\000\004\077" +
    "\013\001\002\000\004\077\uff53\001\002\000\004\077\013" +
    "\001\002\000\004\063\uff52\001\002\000\004\063\uff54\001" +
    "\002\000\012\020\ufffd\023\ufffd\036\ufff0\077\ufffd\001\002" +
    "\000\014\003\u01c8\020\022\023\014\036\u01c9\077\013\001" +
    "\002\000\006\003\u01e1\036\u01e2\001\002\000\052\011\uffee" +
    "\014\uffee\016\uffee\017\uffee\024\uffee\030\uffee\031\uffee\033" +
    "\uffee\034\uffee\036\ufffb\047\uffee\055\uffee\056\uffee\076\uffee" +
    "\077\uffee\100\uffee\102\uffee\103\uffee\104\uffee\105\uffee\001" +
    "\002\000\052\003\uff63\011\175\014\166\016\uff63\017\174" +
    "\024\203\030\205\031\173\033\161\034\171\047\037\055" +
    "\047\056\044\076\164\077\176\100\034\102\051\103\035" +
    "\104\036\105\043\001\002\000\006\003\u01cb\016\u01cc\001" +
    "\002\000\004\077\uffec\001\002\000\006\003\u01ce\077\u01cd" +
    "\001\002\000\006\003\u01d1\060\u01d2\001\002\000\004\060" +
    "\uffea\001\002\000\004\060\u01d0\001\002\000\004\002\uffe9" +
    "\001\002\000\004\002\uffe8\001\002\000\004\002\ufff1\001" +
    "\002\000\004\077\u01d4\001\002\000\004\060\u01d5\001\002" +
    "\000\004\002\uffeb\001\002\000\004\036\u01dc\001\002\000" +
    "\050\011\175\014\166\016\uff63\017\174\024\203\030\205" +
    "\031\173\033\161\034\171\047\037\055\047\056\044\076" +
    "\164\077\176\100\034\102\051\103\035\104\036\105\043" +
    "\001\002\000\004\016\u01d9\001\002\000\004\077\u01da\001" +
    "\002\000\004\060\u01db\001\002\000\004\002\uffed\001\002" +
    "\000\050\011\175\014\166\016\uff63\017\174\024\203\030" +
    "\205\031\173\033\161\034\171\047\037\055\047\056\044" +
    "\076\164\077\176\100\034\102\051\103\035\104\036\105" +
    "\043\001\002\000\004\016\u01de\001\002\000\004\077\u01df" +
    "\001\002\000\004\060\u01e0\001\002\000\004\002\ufffa\001" +
    "\002\000\050\011\ufff9\014\ufff9\016\ufff9\017\ufff9\024\ufff9" +
    "\030\ufff9\031\ufff9\033\ufff9\034\ufff9\047\ufff9\055\ufff9\056" +
    "\ufff9\076\ufff9\077\ufff9\100\ufff9\102\ufff9\103\ufff9\104\ufff9" +
    "\105\ufff9\001\002\000\052\003\uff63\011\175\014\166\016" +
    "\uff63\017\174\024\203\030\205\031\173\033\161\034\171" +
    "\047\037\055\047\056\044\076\164\077\176\100\034\102" +
    "\051\103\035\104\036\105\043\001\002\000\006\003\u01e4" +
    "\016\u01e5\001\002\000\004\077\ufff7\001\002\000\006\003" +
    "\u01e7\077\u01e6\001\002\000\006\003\u01ea\060\u01eb\001\002" +
    "\000\004\060\ufff5\001\002\000\004\060\u01e9\001\002\000" +
    "\004\002\ufff4\001\002\000\004\002\ufff3\001\002\000\006" +
    "\002\001\003\u01ec\001\002\000\004\002\ufff2\001\002\000" +
    "\004\077\u01ee\001\002\000\004\060\u01ef\001\002\000\004" +
    "\002\ufff6\001\002\000\050\011\175\014\166\016\uff63\017" +
    "\174\024\203\030\205\031\173\033\161\034\171\047\037" +
    "\055\047\056\044\076\164\077\176\100\034\102\051\103" +
    "\035\104\036\105\043\001\002\000\004\016\u01f2\001\002" +
    "\000\004\077\u01f3\001\002\000\004\060\u01f4\001\002\000" +
    "\004\002\ufff8\001\002\000\010\020\022\023\014\077\013" +
    "\001\002\000\004\036\u01f7\001\002\000\050\011\175\014" +
    "\166\016\uff63\017\174\024\203\030\205\031\173\033\161" +
    "\034\171\047\037\055\047\056\044\076\164\077\176\100" +
    "\034\102\051\103\035\104\036\105\043\001\002\000\004" +
    "\016\u01f9\001\002\000\004\077\u01fa\001\002\000\004\060" +
    "\u01fb\001\002\000\004\002\uffef\001\002\000\004\036\u01fd" +
    "\001\002\000\050\011\175\014\166\016\uff63\017\174\024" +
    "\203\030\205\031\173\033\161\034\171\047\037\055\047" +
    "\056\044\076\164\077\176\100\034\102\051\103\035\104" +
    "\036\105\043\001\002\000\004\016\u01ff\001\002\000\004" +
    "\077\u0200\001\002\000\004\060\u0201\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0200\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\010\001\001\000\002\001\001\000\014\015\015\020" +
    "\020\037\016\040\017\041\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\015\020\020\037\u0164\040" +
    "\017\041\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\015\020\020\037\u015c\040\017\041\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\024\001\001\000\002\001\001\000\012\015" +
    "\026\020\030\042\027\043\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\044\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\142\004\051\005\041\006\047\007\037" +
    "\011\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\137\004\051" +
    "\005\041\006\047\007\037\011\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\052\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\124\004\051\005\041\006\047\007" +
    "\037\011\040\001\001\000\016\003\122\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\016\003\120\004" +
    "\051\005\041\006\047\007\037\011\040\001\001\000\016" +
    "\003\116\004\051\005\041\006\047\007\037\011\040\001" +
    "\001\000\016\003\114\004\051\005\041\006\047\007\037" +
    "\011\040\001\001\000\016\003\112\004\051\005\041\006" +
    "\047\007\037\011\040\001\001\000\016\003\110\004\051" +
    "\005\041\006\047\007\037\011\040\001\001\000\016\003" +
    "\106\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\016\003\104\004\051\005\041\006\047\007\037\011" +
    "\040\001\001\000\016\003\102\004\051\005\041\006\047" +
    "\007\037\011\040\001\001\000\016\003\100\004\051\005" +
    "\041\006\047\007\037\011\040\001\001\000\016\003\076" +
    "\004\051\005\041\006\047\007\037\011\040\001\001\000" +
    "\016\003\074\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\016\003\072\004\051\005\041\006\047\007" +
    "\037\011\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\131\004\051\005\041\006\047\007\037\010" +
    "\127\011\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\131\004" +
    "\051\005\041\006\047\007\037\010\134\011\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\026\020\030\043\146\001\001\000\002\001\001\000\004" +
    "\016\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\015\020\020\037\156\040\017\041\014\001\001\000" +
    "\002\001\001\000\046\003\176\004\051\005\041\006\047" +
    "\007\037\011\040\012\161\013\201\017\171\021\205\022" +
    "\206\025\167\026\162\027\166\030\164\031\200\032\177" +
    "\045\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\306\004\051\005\041\006\047" +
    "\007\037\011\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\176\004\051\005\041\006" +
    "\047\007\037\011\040\012\263\013\201\017\171\021\205" +
    "\022\206\025\167\026\162\027\166\030\164\031\200\032" +
    "\177\045\203\001\001\000\002\001\001\000\016\003\226" +
    "\004\051\005\041\006\047\007\037\011\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\176\004\051\005\041\006\047\007" +
    "\037\011\040\012\220\013\201\017\171\021\205\022\206" +
    "\025\167\026\162\027\166\030\164\031\200\032\177\045" +
    "\203\001\001\000\016\003\215\004\051\005\041\006\047" +
    "\007\037\011\040\001\001\000\002\001\001\000\016\003" +
    "\207\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\176\004\051\005\041\006\047\007\037\011\040" +
    "\012\211\013\201\017\171\021\205\022\206\025\167\026" +
    "\162\027\166\030\164\031\200\032\177\045\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\224\004\051\005\041\006\047\007\037" +
    "\011\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\176\004\051\005\041\006\047" +
    "\007\037\011\040\012\230\013\201\017\171\021\205\022" +
    "\206\025\167\026\162\027\166\030\164\031\200\032\177" +
    "\045\203\001\001\000\006\023\234\024\232\001\001\000" +
    "\046\003\176\004\051\005\041\006\047\007\037\011\040" +
    "\012\254\013\201\017\171\021\205\022\206\025\167\026" +
    "\162\027\166\030\164\031\200\032\177\045\203\001\001" +
    "\000\006\023\253\024\232\001\001\000\016\003\250\004" +
    "\051\005\041\006\047\007\037\011\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\176\004\051\005\041\006\047\007\037" +
    "\011\040\012\244\013\201\017\171\021\205\022\206\025" +
    "\167\026\162\027\166\030\164\031\200\032\177\045\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\176\004" +
    "\051\005\041\006\047\007\037\011\040\012\252\013\201" +
    "\017\171\021\205\022\206\025\167\026\162\027\166\030" +
    "\164\031\200\032\177\045\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\261\004\051" +
    "\005\041\006\047\007\037\011\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\276\004\051\005\041\006\047\007" +
    "\037\011\040\014\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\300\004\051\005\041\006\047\007" +
    "\037\011\040\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\302\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\312\034\311\001\001\000" +
    "\024\003\320\004\051\005\041\006\047\007\037\011\040" +
    "\014\321\035\323\036\322\001\001\000\002\001\001\000" +
    "\006\033\312\034\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\176\004\051\005\041\006" +
    "\047\007\037\011\040\012\325\013\201\017\171\021\205" +
    "\022\206\025\167\026\162\027\166\030\164\031\200\032" +
    "\177\045\203\001\001\000\002\001\001\000\024\003\320" +
    "\004\051\005\041\006\047\007\037\011\040\014\321\035" +
    "\327\036\322\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\331\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\336\004\051\005\041\006\047\007\037\011" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\346\044\344\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\355\001\001\000\004" +
    "\110\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\351\001\001\000\002\001\001\000\016\003\353" +
    "\004\051\005\041\006\047\007\037\011\040\001\001\000" +
    "\002\001\001\000\004\111\361\001\001\000\002\001\001" +
    "\000\016\003\357\004\051\005\041\006\047\007\037\011" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\363\004\051\005\041\006\047\007" +
    "\037\011\040\001\001\000\002\001\001\000\004\061\u014d" +
    "\001\001\000\012\015\026\020\030\042\366\043\031\001" +
    "\001\000\002\001\001\000\004\062\u0143\001\001\000\002" +
    "\001\001\000\004\063\u013a\001\001\000\004\016\374\001" +
    "\001\000\004\070\u0133\001\001\000\002\001\001\000\006" +
    "\064\u0127\071\u0126\001\001\000\014\015\015\020\020\037" +
    "\377\040\017\041\014\001\001\000\002\001\001\000\004" +
    "\072\u010e\001\001\000\046\003\176\004\051\005\041\006" +
    "\047\007\037\011\040\012\u0102\013\201\017\171\021\205" +
    "\022\206\025\167\026\162\027\166\030\164\031\200\032" +
    "\177\045\203\001\001\000\002\001\001\000\004\073\u010b" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\176\004\051\005\041" +
    "\006\047\007\037\011\040\012\u010f\013\201\017\171\021" +
    "\205\022\206\025\167\026\162\027\166\030\164\031\200" +
    "\032\177\045\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\u0121" +
    "\001\001\000\046\003\176\004\051\005\041\006\047\007" +
    "\037\011\040\012\u0115\013\201\017\171\021\205\022\206" +
    "\025\167\026\162\027\166\030\164\031\200\032\177\045" +
    "\203\001\001\000\002\001\001\000\004\066\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\176\004\051\005\041\006\047" +
    "\007\037\011\040\012\u0122\013\201\017\171\021\205\022" +
    "\206\025\167\026\162\027\166\030\164\031\200\032\177" +
    "\045\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\015\020\020\037\u0128\040\017\041\014\001\001\000" +
    "\002\001\001\000\046\003\176\004\051\005\041\006\047" +
    "\007\037\011\040\012\u012a\013\201\017\171\021\205\022" +
    "\206\025\167\026\162\027\166\030\164\031\200\032\177" +
    "\045\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\176\004\051" +
    "\005\041\006\047\007\037\011\040\012\u012f\013\201\017" +
    "\171\021\205\022\206\025\167\026\162\027\166\030\164" +
    "\031\200\032\177\045\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\176\004\051\005" +
    "\041\006\047\007\037\011\040\012\u0136\013\201\017\171" +
    "\021\205\022\206\025\167\026\162\027\166\030\164\031" +
    "\200\032\177\045\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\u013b\001\001\000\002\001\001\000\014\015\015\020\020" +
    "\037\u013d\040\017\041\014\001\001\000\002\001\001\000" +
    "\046\003\176\004\051\005\041\006\047\007\037\011\040" +
    "\012\u013f\013\201\017\171\021\205\022\206\025\167\026" +
    "\162\027\166\030\164\031\200\032\177\045\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u0145\001\001" +
    "\000\002\001\001\000\014\015\015\020\020\037\u0147\040" +
    "\017\041\014\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\u0149\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\026\020\030\042\u014e\043\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\u0151\001\001" +
    "\000\002\001\001\000\014\015\015\020\020\037\u0153\040" +
    "\017\041\014\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\u0155\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\015\020\020\037\u015b\040" +
    "\017\041\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\176\004\051\005\041\006\047\007\037\011" +
    "\040\012\u015e\013\201\017\171\021\205\022\206\025\167" +
    "\026\162\027\166\030\164\031\200\032\177\045\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u0167" +
    "\001\001\000\002\001\001\000\012\015\026\020\030\042" +
    "\u0169\043\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\015\020\020\037\u016c\040\017\041\014\001" +
    "\001\000\002\001\001\000\046\003\176\004\051\005\041" +
    "\006\047\007\037\011\040\012\u016e\013\201\017\171\021" +
    "\205\022\206\025\167\026\162\027\166\030\164\031\200" +
    "\032\177\045\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\u01b5" +
    "\001\001\000\012\015\026\020\030\042\u0174\043\031\001" +
    "\001\000\002\001\001\000\004\077\u01ad\001\001\000\002" +
    "\001\001\000\006\100\u01a1\104\u01a0\001\001\000\014\015" +
    "\015\020\020\037\u0179\040\017\041\014\001\001\000\002" +
    "\001\001\000\004\105\u0188\001\001\000\046\003\176\004" +
    "\051\005\041\006\047\007\037\011\040\012\u017c\013\201" +
    "\017\171\021\205\022\206\025\167\026\162\027\166\030" +
    "\164\031\200\032\177\045\203\001\001\000\002\001\001" +
    "\000\004\106\u0185\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\107\u0181\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\u0189\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\u019b\001\001\000\046\003\176\004\051\005" +
    "\041\006\047\007\037\011\040\012\u018f\013\201\017\171" +
    "\021\205\022\206\025\167\026\162\027\166\030\164\031" +
    "\200\032\177\045\203\001\001\000\002\001\001\000\004" +
    "\102\u0198\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\103\u0194\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\176\004\051" +
    "\005\041\006\047\007\037\011\040\012\u019c\013\201\017" +
    "\171\021\205\022\206\025\167\026\162\027\166\030\164" +
    "\031\200\032\177\045\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\015\020\020\037\u01a2\040\017\041" +
    "\014\001\001\000\002\001\001\000\046\003\176\004\051" +
    "\005\041\006\047\007\037\011\040\012\u01a4\013\201\017" +
    "\171\021\205\022\206\025\167\026\162\027\166\030\164" +
    "\031\200\032\177\045\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\176\004\051\005\041\006\047\007\037\011\040\012" +
    "\u01a9\013\201\017\171\021\205\022\206\025\167\026\162" +
    "\027\166\030\164\031\200\032\177\045\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\015\020\020\037" +
    "\u01af\040\017\041\014\001\001\000\002\001\001\000\046" +
    "\003\176\004\051\005\041\006\047\007\037\011\040\012" +
    "\u01b1\013\201\017\171\021\205\022\206\025\167\026\162" +
    "\027\166\030\164\031\200\032\177\045\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\026\020\030\042\u01b6\043\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\015" +
    "\020\020\037\u01b9\040\017\041\014\001\001\000\002\001" +
    "\001\000\046\003\176\004\051\005\041\006\047\007\037" +
    "\011\040\012\u01bb\013\201\017\171\021\205\022\206\025" +
    "\167\026\162\027\166\030\164\031\200\032\177\045\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u01c3\001\001\000\004" +
    "\112\u01c1\001\001\000\004\015\u01c2\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\047\u01f4\054\u01f5\001\001" +
    "\000\014\015\015\020\020\037\u01c6\040\017\041\014\001" +
    "\001\000\002\001\001\000\006\050\u01d5\055\u01d6\001\001" +
    "\000\046\003\176\004\051\005\041\006\047\007\037\011" +
    "\040\012\u01c9\013\201\017\171\021\205\022\206\025\167" +
    "\026\162\027\166\030\164\031\200\032\177\045\203\001" +
    "\001\000\002\001\001\000\004\056\u01d2\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\u01ce\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\176\004\051\005\041" +
    "\006\047\007\037\011\040\012\u01d7\013\201\017\171\021" +
    "\205\022\206\025\167\026\162\027\166\030\164\031\200" +
    "\032\177\045\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\u01dc\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u01ef\001\001\000\046\003\176\004\051\005" +
    "\041\006\047\007\037\011\040\012\u01e2\013\201\017\171" +
    "\021\205\022\206\025\167\026\162\027\166\030\164\031" +
    "\200\032\177\045\203\001\001\000\002\001\001\000\004" +
    "\052\u01ec\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\u01e7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\176\004\051\005\041\006\047\007\037\011\040\012" +
    "\u01f0\013\201\017\171\021\205\022\206\025\167\026\162" +
    "\027\166\030\164\031\200\032\177\045\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\015\020\020\037\u01fb\040\017\041" +
    "\014\001\001\000\002\001\001\000\046\003\176\004\051" +
    "\005\041\006\047\007\037\011\040\012\u01f7\013\201\017" +
    "\171\021\205\022\206\025\167\026\162\027\166\030\164" +
    "\031\200\032\177\045\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\176\004\051\005\041\006\047\007" +
    "\037\011\040\012\u01fd\013\201\017\171\021\205\022\206" +
    "\025\167\026\162\027\166\030\164\031\200\032\177\045" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/*	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line " + (s.left + 1));   
				if (s.right >= 0){
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}
*/
	@Override
	public void report_error(String message, Object info) {
		if (info instanceof String){
			//System.err.println("  " + info + " "+ message + "\n       Parsing resumed from 2nd token before" + s.current_lexeme() + "\n");
			System.err.println("  " + info + " "+ message + "\n");
		} else {
			StringBuffer m = new StringBuffer("Error");
			if (info instanceof java_cup.runtime.Symbol){
				m.append( "(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea " + (((Symbol)info).left+1) + ", columna" + (((Symbol)info).right+1) + ")" );     
			}
			m.append(" : " + message);
			System.err.println(m);
		}
	}
	@Override
	public void syntax_error(Symbol s){
		System.err.println( "(Se ha encontrado el token \"" + sym.terminalNames[s.sym] + "\" en la linea " + (s.left+1) + ", columna" + (s.right+1) + ")" ); 
                seEsperaba();
	}

	public void seEsperaba(){
		List<Integer> listaTokens = this.expected_token_ids();
		if (listaTokens.size() <= 0){
			listaTokens = this.expected_token_ids();
		}
		String cadenaTokensEsperados = "";
		for (int i = 0 ; i < listaTokens.size(); i++){
			int id = listaTokens.get(i);
			if (id == 1){
				continue;
			}
			String nombreTerminal = sym.terminalNames[id];
			if (i == listaTokens.size() - 1){
				cadenaTokensEsperados += nombreTerminal;
			}else{
				cadenaTokensEsperados += nombreTerminal + " or ";
			}
		}
		System.err.print("Se esperaba " + cadenaTokensEsperados);
	};

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,dp,s,identifier2);
											try {
												ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
												xmlConverter.toXML();
												System.out.println("Se ha generado el arbol");
											} catch(Exception e){
												System.out.println(e.getMessage());
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
parser.report_error("Programa principal: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROCEDURE error NT$0 IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROCEDURE ID error NT$1 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaban declaraciones","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program ::= PROCEDURE ID IS error NT$2 BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= PROCEDURE ID IS declaration_part error NT$3 statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= PROCEDURE ID IS declaration_part BEGIN statements error NT$4 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END error NT$5 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal: Se esperaba ;","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Programa principal: Simbolo no esperado","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // program ::= PROCEDURE ID IS BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,s,identifier2);
											try {
												ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
												xmlConverter.toXML();
												System.out.println("Se ha generado el arbol");
											} catch(Exception e){
												System.out.println(e.getMessage());
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$6 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // program ::= PROCEDURE ID error NT$6 BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$7 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // program ::= PROCEDURE ID IS error NT$7 statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba END","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // program ::= PROCEDURE ID IS BEGIN statements error NT$8 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // program ::= PROCEDURE ID IS BEGIN statements END error NT$9 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // program ::= PROCEDURE ID IS BEGIN statements END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal sin declaraciones: Se esperaba \";\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // program ::= error 
            {
              Object RESULT =null;
		parser.report_error("Programa principal: Se esperaba Procedure","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_part ::= variable_declaration PUNTOCOMA declaration_part 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											dp.add(vd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_part ::= function_declaration declaration_part 
            {
              DeclarationPart RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											dp.add(fd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration_part ::= procedure_declaration declaration_part 
            {
              DeclarationPart RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcedureDeclaration pd = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
											dp.add(pd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration_part ::= function_declaration 
            {
              DeclarationPart RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(fd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration_part ::= procedure_declaration 
            {
              DeclarationPart RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcedureDeclaration pd = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(pd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration_part ::= variable_declaration PUNTOCOMA 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(vd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration_part ::= variable_declaration error 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Se esperaba \";\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,dp,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$10 ::= 
            {
              FunctionDeclaration RESULT =null;
parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_declaration ::= FUNCTION error NT$10 PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$11 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba \"(\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_declaration ::= FUNCTION ID error NT$11 parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$12 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba\")\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations error NT$12 RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$13 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion: Se esperaba Return","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER error NT$13 variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$14 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type error NT$14 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$15 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part error NT$15 statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$16 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba End","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements error NT$16 ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$17 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END error NT$17 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$18 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba un tipo ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN error NT$18 IS BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$19 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba IS","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type error NT$19 BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$20 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS error NT$20 statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$21 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba END","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements error NT$21 ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$22 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END error NT$22 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,dp,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$23 ::= 
            {
              ProcedureDeclaration RESULT =null;
parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procedure_declaration ::= PROCEDURE error NT$23 PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$24 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba  \"(\"","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procedure_declaration ::= PROCEDURE ID error NT$24 parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$25 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba\")\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations error NT$25 IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$26 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Is","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER error NT$26 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$27 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part error NT$27 statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$28 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements error NT$28 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$29 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END error NT$29 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$30 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba IS","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER error NT$30 BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$31 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS error NT$31 statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$32 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba End","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements error NT$32 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$33 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END error NT$33 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameter_declarations ::= parameter 
            {
              ParameterDeclarations RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParameterDeclarations(); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter_declarations ::= parameter_declarations PUNTOCOMA parameter 
            {
              ParameterDeclarations RESULT =null;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											pds.add(p);
											RESULT = pds;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter_declarations ::= 
            {
              ParameterDeclarations RESULT =null;
		 RESULT = new ParameterDeclarations(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parameter ::= variable_ids DOSPUNTOS mode variable_type OPERASIG expression 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vids,m,vtype,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$34 ::= 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("parameter: Se esperaba un modo: IN,OUT,IN OUT ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parameter ::= variable_ids DOSPUNTOS error NT$34 variable_type OPERASIG expression 
            {
              Parameter RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Parameter) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$35 ::= 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("parameter: Se esperaba un tipo","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parameter ::= variable_ids DOSPUNTOS mode error NT$35 OPERASIG expression 
            {
              Parameter RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Parameter) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parameter ::= variable_ids DOSPUNTOS mode variable_type OPERASIG error 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("parameter: Se esperaba una expresion","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parameter ::= variable_ids DOSPUNTOS mode variable_type 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vids,m,vtype); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parameter ::= variable_ids DOSPUNTOS mode error 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("parameter: Se esperaba un tipo","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameter ::= variable_declaration 
            {
              Parameter RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vd.getVariables(),vd.getType()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameter ::= variable_declaration OPERASIG expression 
            {
              Parameter RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vd.getVariables(),vd.getType(),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mode ::= IN 
            {
              Mode RESULT =null;
		RESULT = new ModeIn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mode ::= INOUT 
            {
              Mode RESULT =null;
		RESULT = new ModeInOut(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // mode ::= OUT 
            {
              Mode RESULT =null;
		RESULT = new ModeOut(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= literal_expression 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpression le = (LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= arithmetic_expression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExpression ae = (ArithmeticExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= PARIZQ expression PARDER 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= PARIZQ expression error 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("expression: se esperaba\")\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= boolean_expression 
            {
              Expression RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BooleanExpression be = (BooleanExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = be; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= logical_expression 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicalExpression le = (LogicalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= function_call 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // literal_expression ::= NUMEROENTERO 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerNumber(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // literal_expression ::= NUMEROFLOAT 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatNumber(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // literal_expression ::= TRUE 
            {
              LiteralExpression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literal_expression ::= FALSE 
            {
              LiteralExpression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // literal_expression ::= CADENA 
            {
              LiteralExpression RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(cad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arithmetic_expression ::= expression OPERSUMA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Add(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arithmetic_expression ::= expression OPERSUMA error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arithmetic_expression ::= expression OPERRESTA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  Minus(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arithmetic_expression ::= expression OPERRESTA error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arithmetic_expression ::= expression OPERDIVISION expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arithmetic_expression ::= expression OPERDIVISION error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // arithmetic_expression ::= expression OPERMULTIPLICACION expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplication(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // arithmetic_expression ::= expression OPERMULTIPLICACION error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // arithmetic_expression ::= expression OPERPOTENCIA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pow(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // arithmetic_expression ::= expression OPERPOTENCIA error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arithmetic_expression ::= OPERRESTA expression 
            {
              ArithmeticExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Negative(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arithmetic_expression ::= OPERRESTA error 
            {
              ArithmeticExpression RESULT =null;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arithmetic_expression ::= expression MOD expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Module(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arithmetic_expression ::= expression MOD error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // boolean_expression ::= expression OPERIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equal(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // boolean_expression ::= expression OPERIGUAL error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // boolean_expression ::= expression OPERDISTINTO expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // boolean_expression ::= expression OPERDISTINTO error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // boolean_expression ::= expression OPERMAYOR expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Greater(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // boolean_expression ::= expression OPERMAYOR error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // boolean_expression ::= expression OPERMENOR expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Less(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // boolean_expression ::= expression OPERMENOR error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // boolean_expression ::= expression OPERMAYORIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterOrEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // boolean_expression ::= expression OPERMAYORIGUAL error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // boolean_expression ::= expression OPERMENORIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessOrEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // boolean_expression ::= expression OPERMENORIGUAL error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // logical_expression ::= expression AND expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // logical_expression ::= expression AND error 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("logical_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // logical_expression ::= expression OR expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // logical_expression ::= expression OR error 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("logical_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // logical_expression ::= NOT expression 
            {
              LogicalExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // logical_expression ::= NOT error 
            {
              LogicalExpression RESULT =null;
		parser.report_error("logical_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // function_parameters ::= expression 
            {
              FunctionParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new FunctionParameters();
											RESULT.add(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // function_parameters ::= expression COMA function_parameters 
            {
              FunctionParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											fp.add(e); 
											RESULT = fp; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // function_call ::= ID PARIZQ function_parameters PARDER 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier = new Identifier(id); 
											RESULT = new FunctionCall(identifier,fp); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // function_call ::= ID PARIZQ function_parameters error 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("function_call: se esperaba \")\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // function_call ::= ID PARIZQ PARDER 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
											Identifier identifier = new Identifier(id);  
											RESULT = new FunctionCall(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // function_call ::= ID PARIZQ error 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("function_call: se esperaba \")\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // statements ::= statement statements 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // statements ::= 
            {
              Statements RESULT =null;
		 RESULT = new Statements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // statement ::= assign_variable 
            {
              Statement RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignVariable av = (AssignVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = av; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // statement ::= expression PUNTOCOMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // statement ::= expression error 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("function_call: se esperaba \";\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // statement ::= get_value 
            {
              Statement RESULT =null;
		int gvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GetValue gv = (GetValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = gv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // statement ::= put_value 
            {
              Statement RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PutValue pv = (PutValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If is = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // statement ::= while_statemet 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While ws = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // statement ::= for_statement 
            {
              Statement RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For fs = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // statement ::= exit_statement 
            {
              Statement RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exit es = (Exit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // statement ::= loop_statement 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Loop ls = (Loop)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // statement ::= case_statement 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case cs = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // statement ::= return_statement 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Return rs = (Return)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // range ::= expression DOBLEPUNTO expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Range(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // variable_ids ::= ID 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // variable_ids ::= ID COMA variable_ids 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											Identifier identifier = new Identifier(id);
											vids.add(identifier);
											RESULT = vids;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$36 ::= 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("variable_ids: Se esperaba \",\" ","\t");
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // variable_ids ::= ID error NT$36 variable_ids 
            {
              VariableIDs RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (VariableIDs) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // variable_type ::= INTEGER 
            {
              VariableType RESULT =null;
		 RESULT = new TypeInteger(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // variable_type ::= BOOLEAN 
            {
              VariableType RESULT =null;
		 RESULT = new TypeBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // variable_type ::= FLOAT 
            {
              VariableType RESULT =null;
		 RESULT = new TypeFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // variable_type ::= STRING 
            {
              VariableType RESULT =null;
		 RESULT = new TypeString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // assign_variable ::= ID OPERASIG expression PUNTOCOMA 
            {
              AssignVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier = new Identifier(id); 
											RESULT = new AssignVariableSimple(identifier,e); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // variable_declaration ::= variable_ids DOSPUNTOS variable_type 
            {
              VariableDeclaration RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableType types = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableDeclaration(vids,types); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // variable_declaration ::= variable_ids DOSPUNTOS error 
            {
              VariableDeclaration RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
										parser.report_error("variable_declaration:Se esperaba un tipo ","\t");
										RESULT = new VariableDeclaration(vids,null); 
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // get_value ::= GET PARIZQ ID PARDER PUNTOCOMA 
            {
              GetValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // put_value ::= PUT PARIZQ expression PARDER PUNTOCOMA 
            {
              PutValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PutValue(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // elsif_statements ::= elsif_statement elsif_statements 
            {
              ElsIfList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElsIf es = (ElsIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int essleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int essright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElsIfList ess = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											ess.add(es); 
											RESULT = ess; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // elsif_statements ::= elsif_statement 
            {
              ElsIfList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElsIf es = (ElsIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new ElsIfList();
											RESULT.add(es); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // elsif_statement ::= ELSIF expression THEN statements 
            {
              ElsIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElsIf(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // if_statement ::= IF expression THEN statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfSimple(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // if_statement ::= IF expression THEN statements ELSE statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new  IfWithElse(e,s1,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // if_statement ::= IF expression THEN statements elsif_statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfWithElsIF(e,s,es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfWithElsIfAndElse(e,s1,es,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // while_statemet ::= WHILE expression LOOP statements END LOOP PUNTOCOMA 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new While(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // for_statement ::= FOR ID IN range LOOP statements END LOOP PUNTOCOMA 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // exit_statement ::= EXIT WHEN expression PUNTOCOMA 
            {
              Exit RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // loop_statement ::= LOOP statements END LOOP PUNTOCOMA 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Loop(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // case_statement ::= CASE expression IS when_list END CASE PUNTOCOMA 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
											//recorrer wl para ver si tiene algun elemento Others
											boolean hasOthers=false;
											Statements othersStatements=null;
											int othersCount = 0;
											for(int i=0;i<wl.size();i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size()-1 ){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount>1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
													RESULT = new CaseOthers(e,wl,othersStatements);													
											}else{
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // when_list ::= when_element 
            {
              WhenList RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int weright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenElement we = (WhenElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenList(); RESULT.add(we); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // when_list ::= when_element when_list 
            {
              WhenList RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int weright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhenElement we = (WhenElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											wl.add(we); 
											RESULT = wl; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // when_element ::= WHEN when_options OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenOptions w = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenElement(w,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // when_element ::= WHEN OTHERS OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenElement(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // when_options ::= option_when 
            {
              WhenOptions RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenOption opt = (WhenOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new WhenOptions();
											RESULT.add(opt); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // when_options ::= option_when PIPE when_options 
            {
              WhenOptions RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenOption opt = (WhenOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenOptions opts = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											opts.add(opt);
											RESULT = opts;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // option_when ::= expression 
            {
              WhenOption RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenOption(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // option_when ::= range 
            {
              WhenOption RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenOption(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // return_statement ::= RETURN expression PUNTOCOMA 
            {
              Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // return_statement ::= RETURN error 
            {
              Return RESULT =null;
		 parser.report_error("Se esperaba un valor de retorno", "ERROR: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
