
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 17 07:36:00 CST 2016
//----------------------------------------------------

package mainPackage;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 17 07:36:00 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\005\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\007\003\000\002\007" +
    "\005\000\002\010\006\000\002\010\005\000\002\011\004" +
    "\000\002\011\002\000\002\012\003\000\002\012\004\000" +
    "\002\012\004\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\005\000\002\014\003" +
    "\000\002\014\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\006\000\002\016\006\000\002" +
    "\017\005\000\002\020\007\000\002\021\007\000\002\022" +
    "\004\000\002\022\003\000\002\023\006\000\002\024\011" +
    "\000\002\024\013\000\002\024\012\000\002\024\014\000" +
    "\002\025\011\000\002\026\013\000\002\027\006\000\002" +
    "\030\007\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\022\022\010\050\006\056\016\057\013\066" +
    "\015\067\004\070\017\071\005\001\002\000\042\002\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7" +
    "\060\ufff7\063\ufff7\001\002\000\042\002\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\060\ufff8\063" +
    "\ufff8\001\002\000\022\022\010\050\006\056\016\057\013" +
    "\066\015\067\004\070\017\071\005\001\002\000\042\002" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\060\ufffb\063\ufffb\001\002\000\042\002\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\060\ufff6" +
    "\063\ufff6\001\002\000\042\002\ufffa\041\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\055\ufffa\060\ufffa\063\ufffa\001" +
    "\002\000\042\002\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053" +
    "\ufffe\054\ufffe\055\ufffe\060\ufffe\063\ufffe\001\002\000\022" +
    "\022\010\050\006\056\016\057\013\066\015\067\004\070" +
    "\017\071\005\001\002\000\036\002\064\041\036\042\025" +
    "\043\027\044\032\045\034\046\023\047\033\050\031\051" +
    "\030\052\035\053\026\054\024\055\037\001\002\000\044" +
    "\002\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff" +
    "\055\uffff\057\055\060\uffff\063\uffff\001\002\000\022\022" +
    "\010\050\006\056\016\057\013\066\015\067\004\070\017" +
    "\071\005\001\002\000\042\002\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\052\ufff9\053\ufff9\054\ufff9\055\ufff9\060\ufff9\063\ufff9\001" +
    "\002\000\042\002\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\060\ufffc\063\ufffc\001\002\000\042" +
    "\002\001\041\001\042\001\043\001\044\001\045\001\046" +
    "\001\047\001\050\001\051\001\052\001\053\001\054\001" +
    "\055\001\060\001\063\001\001\002\000\042\002\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\026\054\uffe7\055\uffe7\060" +
    "\uffe7\063\uffe7\001\002\000\022\022\010\050\006\056\016" +
    "\057\013\066\015\067\004\070\017\071\005\001\002\000" +
    "\022\022\010\050\006\056\016\057\013\066\015\067\004" +
    "\070\017\071\005\001\002\000\022\022\010\050\006\056" +
    "\016\057\013\066\015\067\004\070\017\071\005\001\002" +
    "\000\022\022\010\050\006\056\016\057\013\066\015\067" +
    "\004\070\017\071\005\001\002\000\022\022\010\050\006" +
    "\056\016\057\013\066\015\067\004\070\017\071\005\001" +
    "\002\000\022\022\010\050\006\056\016\057\013\066\015" +
    "\067\004\070\017\071\005\001\002\000\022\022\010\050" +
    "\006\056\016\057\013\066\015\067\004\070\017\071\005" +
    "\001\002\000\022\022\010\050\006\056\016\057\013\066" +
    "\015\067\004\070\017\071\005\001\002\000\022\022\010" +
    "\050\006\056\016\057\013\066\015\067\004\070\017\071" +
    "\005\001\002\000\022\022\010\050\006\056\016\057\013" +
    "\066\015\067\004\070\017\071\005\001\002\000\022\022" +
    "\010\050\006\056\016\057\013\066\015\067\004\070\017" +
    "\071\005\001\002\000\022\022\010\050\006\056\016\057" +
    "\013\066\015\067\004\070\017\071\005\001\002\000\022" +
    "\022\010\050\006\056\016\057\013\066\015\067\004\070" +
    "\017\071\005\001\002\000\042\002\uffe8\041\036\042\025" +
    "\043\027\044\032\045\034\046\023\047\033\050\031\051" +
    "\030\052\035\053\026\054\024\055\uffe8\060\uffe8\063\uffe8" +
    "\001\002\000\042\002\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\033\050\031\051\030\052\035" +
    "\053\026\054\uffec\055\uffec\060\uffec\063\uffec\001\002\000" +
    "\042\002\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\026\054" +
    "\ufff3\055\ufff3\060\ufff3\063\ufff3\001\002\000\042\002\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\033\050\031\051\030\052\035\053\026\054\uffeb\055\uffeb" +
    "\060\uffeb\063\uffeb\001\002\000\042\002\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\030\052\035\053\026\054\ufff5\055\ufff5\060\ufff5\063" +
    "\ufff5\001\002\000\042\002\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\033\050\031\051\030\052" +
    "\035\053\026\054\uffee\055\uffee\060\uffee\063\uffee\001\002" +
    "\000\042\002\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\051\030\052\035\053\026" +
    "\054\ufff4\055\ufff4\060\ufff4\063\ufff4\001\002\000\042\002" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\051\ufff2\052\ufff2\053\026\054\ufff2\055" +
    "\ufff2\060\ufff2\063\ufff2\001\002\000\042\002\uffef\041\uffef" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\033\050" +
    "\031\051\030\052\035\053\026\054\uffef\055\uffef\060\uffef" +
    "\063\uffef\001\002\000\042\002\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\052\ufff1\053\026\054\ufff1\055\ufff1\060\ufff1\063\ufff1\001" +
    "\002\000\042\002\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\033\050\031\051\030\052\035\053" +
    "\026\054\uffed\055\uffed\060\uffed\063\uffed\001\002\000\042" +
    "\002\uffe9\041\036\042\025\043\027\044\032\045\034\046" +
    "\023\047\033\050\031\051\030\052\035\053\026\054\uffe9" +
    "\055\uffe9\060\uffe9\063\uffe9\001\002\000\042\002\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\033" +
    "\050\031\051\030\052\035\053\026\054\uffea\055\uffea\060" +
    "\uffea\063\uffea\001\002\000\024\022\010\050\006\056\016" +
    "\057\013\060\057\066\015\067\004\070\017\071\005\001" +
    "\002\000\040\041\036\042\025\043\027\044\032\045\034" +
    "\046\023\047\033\050\031\051\030\052\035\053\026\054" +
    "\024\055\037\060\uffe6\063\062\001\002\000\042\002\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\060\uffe3\063\uffe3\001\002\000\004\060\061\001\002\000" +
    "\042\002\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\060\uffe4\063\uffe4\001\002\000\022\022\010" +
    "\050\006\056\016\057\013\066\015\067\004\070\017\071" +
    "\005\001\002\000\004\060\uffe5\001\002\000\004\002\000" +
    "\001\002\000\036\041\036\042\025\043\027\044\032\045" +
    "\034\046\023\047\033\050\031\051\030\052\035\053\026" +
    "\054\024\055\037\060\066\001\002\000\042\002\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\060" +
    "\ufffd\063\ufffd\001\002\000\042\002\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\026\054\ufff0\055\ufff0\060\ufff0\063\ufff0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\016\002\013\003\020\004\011\005\017\006" +
    "\006\010\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\002\066\003\020\004\011\005\017\006\006\010" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\002\064\003\020\004" +
    "\011\005\017\006\006\010\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\021\003\020\004\011\005" +
    "\017\006\006\010\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\002" +
    "\053\003\020\004\011\005\017\006\006\010\010\001\001" +
    "\000\016\002\052\003\020\004\011\005\017\006\006\010" +
    "\010\001\001\000\016\002\051\003\020\004\011\005\017" +
    "\006\006\010\010\001\001\000\016\002\050\003\020\004" +
    "\011\005\017\006\006\010\010\001\001\000\016\002\047" +
    "\003\020\004\011\005\017\006\006\010\010\001\001\000" +
    "\016\002\046\003\020\004\011\005\017\006\006\010\010" +
    "\001\001\000\016\002\045\003\020\004\011\005\017\006" +
    "\006\010\010\001\001\000\016\002\044\003\020\004\011" +
    "\005\017\006\006\010\010\001\001\000\016\002\043\003" +
    "\020\004\011\005\017\006\006\010\010\001\001\000\016" +
    "\002\042\003\020\004\011\005\017\006\006\010\010\001" +
    "\001\000\016\002\041\003\020\004\011\005\017\006\006" +
    "\010\010\001\001\000\016\002\040\003\020\004\011\005" +
    "\017\006\006\010\010\001\001\000\016\002\037\003\020" +
    "\004\011\005\017\006\006\010\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\055\003\020\004\011\005\017\006\006\007\057\010\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\055\003\020\004\011" +
    "\005\017\006\006\007\062\010\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line " + (s.left + 1));   
				if (s.right >= 0){
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		//System.exit(1);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaration_part ::= variable_declaration 
            {
              Object RESULT =null;
		System.out.println("variable_declaration");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // loop_statement ::= LOOP statements END LOOP PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exit_statement ::= EXIT WHEN expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("exit when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for_statement ::= FOR ID IN range LOOP statements END LOOP PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // while_statemet ::= WHILE expression LOOP statements END LOOP PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If con elsif con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_statement ::= IF expression THEN statements elsif_statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If con elsif sin else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // if_statement ::= IF expression THEN statements ELSE statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If Sencillo con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // if_statement ::= IF expression THEN statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If Sencillo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elsif_statement ::= ELSIF expression THEN statements 
            {
              Object RESULT =null;
		 System.out.println("elsif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // elsif_statements ::= elsif_statement 
            {
              Object RESULT =null;
		 System.out.println("elsif statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elsif_statements ::= elsif_statement elsif_statements 
            {
              Object RESULT =null;
		 System.out.println("elsif statements"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // put_value ::= PUT PARIZQ expression PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Put"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // get_value ::= GET PARIZQ ID PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Get"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_declaration ::= variable_ids DOSPUNTOS variable_type 
            {
              Object RESULT =null;
		 System.out.println("Declaracion de variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assign_variable ::= variable_declaration OPERASIG expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("declaracion y Asignacion de variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign_variable ::= ID OPERASIG expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a Variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_type ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("Tipo Float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_type ::= BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println("Tipo Boolean"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable_type ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("Tipo Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable_ids ::= ID COMA variable_ids 
            {
              Object RESULT =null;
		 System.out.println("Ids"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable_ids ::= ID 
            {
              Object RESULT =null;
		 System.out.println("Id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // range ::= expression DOBLEPUNTO expression 
            {
              Object RESULT =null;
		 System.out.println("rango"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= loop_statement 
            {
              Object RESULT =null;
		 System.out.println("statement loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= exit_statement 
            {
              Object RESULT =null;
		 System.out.println("statement exit when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= for_statement 
            {
              Object RESULT =null;
		 System.out.println("statement for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= while_statemet 
            {
              Object RESULT =null;
		 System.out.println("statement while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= if_statement 
            {
              Object RESULT =null;
		 System.out.println("statement if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= put_value 
            {
              Object RESULT =null;
		 System.out.println("statement put value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= get_value 
            {
              Object RESULT =null;
		 System.out.println("statement get value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("statement expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= variable_declaration PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("statement Declaracion Variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= assign_variable 
            {
              Object RESULT =null;
		 System.out.println("statement asignacion de variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statements ::= statement statements 
            {
              Object RESULT =null;
		 System.out.println("statements"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_call ::= ID PARIZQ PARDER 
            {
              Object RESULT =null;
		 System.out.println("llamado a funcion o procedimiento sin parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_call ::= ID PARIZQ function_parameters PARDER 
            {
              Object RESULT =null;
		 System.out.println("llamado a funcion o procedimiento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_parameters ::= expression COMA function_parameters 
            {
              Object RESULT =null;
		 System.out.println("parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_parameters ::= expression 
            {
              Object RESULT =null;
		 System.out.println("parametro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logical_expression ::= NOT expression 
            {
              Object RESULT =null;
		 System.out.println("not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logical_expression ::= expression OR expression 
            {
              Object RESULT =null;
		 System.out.println("or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logical_expression ::= expression AND expression 
            {
              Object RESULT =null;
		 System.out.println("and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolean_expression ::= expression OPERMENORIGUAL expression 
            {
              Object RESULT =null;
		 System.out.println("Menor o Igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolean_expression ::= expression OPERMAYORIGUAL expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor o Igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolean_expression ::= expression OPERMENOR expression 
            {
              Object RESULT =null;
		 System.out.println("Menor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolean_expression ::= expression OPERMAYOR expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolean_expression ::= expression OPERDISTINTO expression 
            {
              Object RESULT =null;
		 System.out.println("Distinto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolean_expression ::= expression OPERIGUAL expression 
            {
              Object RESULT =null;
		 System.out.println("Igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arithmetic_expression ::= OPERRESTA expression 
            {
              Object RESULT =null;
		 System.out.println("Negativo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arithmetic_expression ::= expression OPERPOTENCIA expression 
            {
              Object RESULT =null;
		 System.out.println("Potencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arithmetic_expression ::= expression OPERMULTIPLICACION expression 
            {
              Object RESULT =null;
		 System.out.println("Multiplicacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arithmetic_expression ::= expression OPERDIVISION expression 
            {
              Object RESULT =null;
		 System.out.println("Division"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arithmetic_expression ::= expression OPERRESTA expression 
            {
              Object RESULT =null;
		 System.out.println("Resta"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arithmetic_expression ::= expression OPERSUMA expression 
            {
              Object RESULT =null;
		 System.out.println("Suma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literal_expression ::= NULL 
            {
              Object RESULT =null;
		 System.out.println("null"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literal_expression ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(cad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literal_expression ::= NUMEROFLOAT 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literal_expression ::= NUMEROENTERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= function_call 
            {
              Object RESULT =null;
		 System.out.println("Expresion Llamado a Funcion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= logical_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion Logica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression ::= boolean_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion Booleana"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= PARIZQ expression PARDER 
            {
              Object RESULT =null;
		 System.out.println("Expresion con parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion aritmetica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expression ::= literal_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion literal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

