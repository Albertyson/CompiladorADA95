
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package mainPackage;

import java_cup.runtime.*;
import abstractSyntaxTree.*;
import java.io.File;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\002\002\013\000\002\002\004\000\002\046" +
    "\002\000\002\002\014\000\002\047\002\000\002\002\014" +
    "\000\002\050\002\000\002\002\014\000\002\051\002\000" +
    "\002\002\014\000\002\052\002\000\002\002\014\000\002" +
    "\053\002\000\002\002\014\000\002\002\013\000\002\002" +
    "\014\000\002\002\012\000\002\054\002\000\002\002\013" +
    "\000\002\055\002\000\002\002\013\000\002\056\002\000" +
    "\002\002\013\000\002\057\002\000\002\002\013\000\002" +
    "\002\012\000\002\002\003\000\002\037\005\000\002\037" +
    "\004\000\002\037\004\000\002\037\003\000\002\037\003" +
    "\000\002\037\004\000\002\037\004\000\002\040\020\000" +
    "\002\060\002\000\002\040\021\000\002\061\002\000\002" +
    "\040\021\000\002\062\002\000\002\040\021\000\002\063" +
    "\002\000\002\040\021\000\002\064\002\000\002\040\021" +
    "\000\002\065\002\000\002\040\021\000\002\066\002\000" +
    "\002\040\021\000\002\067\002\000\002\040\021\000\002" +
    "\040\020\000\002\040\017\000\002\070\002\000\002\040" +
    "\020\000\002\071\002\000\002\040\020\000\002\072\002" +
    "\000\002\040\020\000\002\073\002\000\002\040\020\000" +
    "\002\074\002\000\002\040\020\000\002\040\017\000\002" +
    "\041\016\000\002\075\002\000\002\041\017\000\002\076" +
    "\002\000\002\041\017\000\002\077\002\000\002\041\017" +
    "\000\002\100\002\000\002\041\017\000\002\101\002\000" +
    "\002\041\017\000\002\102\002\000\002\041\017\000\002" +
    "\103\002\000\002\041\017\000\002\041\016\000\002\041" +
    "\015\000\002\104\002\000\002\041\016\000\002\105\002" +
    "\000\002\041\016\000\002\106\002\000\002\041\016\000" +
    "\002\107\002\000\002\041\016\000\002\041\015\000\002" +
    "\042\003\000\002\042\005\000\002\042\002\000\002\043" +
    "\010\000\002\110\002\000\002\043\011\000\002\111\002" +
    "\000\002\043\011\000\002\043\010\000\002\043\006\000" +
    "\002\043\006\000\002\043\003\000\002\043\005\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\005\005\000\002\005" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\004\000\002\007\004\000\002\010\003\000" +
    "\002\010\005\000\002\011\006\000\002\011\006\000\002" +
    "\011\005\000\002\011\005\000\002\012\004\000\002\012" +
    "\002\000\002\013\003\000\002\013\004\000\002\013\004" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\005\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\006\000\002\112\002\000\002" +
    "\017\007\000\002\017\006\000\002\020\006\000\002\113" +
    "\002\000\002\020\007\000\002\020\005\000\002\021\007" +
    "\000\002\114\002\000\002\021\010\000\002\115\002\000" +
    "\002\021\010\000\002\116\002\000\002\021\010\000\002" +
    "\021\007\000\002\022\007\000\002\117\002\000\002\022" +
    "\010\000\002\120\002\000\002\022\010\000\002\121\002" +
    "\000\002\022\010\000\002\022\007\000\002\023\004\000" +
    "\002\023\003\000\002\024\006\000\002\122\002\000\002" +
    "\024\007\000\002\123\002\000\002\024\007\000\002\025" +
    "\011\000\002\124\002\000\002\025\012\000\002\125\002" +
    "\000\002\025\012\000\002\126\002\000\002\025\012\000" +
    "\002\025\011\000\002\025\013\000\002\127\002\000\002" +
    "\025\014\000\002\130\002\000\002\025\014\000\002\025" +
    "\013\000\002\025\012\000\002\131\002\000\002\025\013" +
    "\000\002\132\002\000\002\025\013\000\002\025\012\000" +
    "\002\025\014\000\002\133\002\000\002\025\015\000\002" +
    "\134\002\000\002\025\015\000\002\025\014\000\002\026" +
    "\011\000\002\135\002\000\002\026\012\000\002\136\002" +
    "\000\002\026\012\000\002\137\002\000\002\026\012\000" +
    "\002\026\011\000\002\140\002\000\002\141\002\000\002" +
    "\142\002\000\002\143\002\000\002\144\002\000\002\027" +
    "\075\000\002\030\006\000\002\145\002\000\002\030\007" +
    "\000\002\030\006\000\002\031\007\000\002\146\002\000" +
    "\002\031\010\000\002\147\002\000\002\031\010\000\002" +
    "\031\007\000\002\032\011\000\002\150\002\000\002\032" +
    "\012\000\002\151\002\000\002\032\012\000\002\152\002" +
    "\000\002\032\012\000\002\032\011\000\002\034\003\000" +
    "\002\034\004\000\002\033\006\000\002\153\002\000\002" +
    "\033\007\000\002\033\006\000\002\154\002\000\002\033" +
    "\007\000\002\155\002\000\002\033\007\000\002\035\003" +
    "\000\002\035\005\000\002\036\003\000\002\036\003\000" +
    "\002\045\005\000\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02b3\000\006\003\006\020\005\001\002\000\004\002" +
    "\u02b5\001\002\000\006\003\010\067\007\001\002\000\004" +
    "\002\uffe7\001\002\000\006\003\u0278\032\u0279\001\002\000" +
    "\004\032\uffff\001\002\000\004\032\012\001\002\000\010" +
    "\016\022\020\014\067\013\001\002\000\010\003\uff55\057" +
    "\u0275\060\uff55\001\002\000\006\003\u021c\067\u021b\001\002" +
    "\000\014\003\uffe2\016\022\020\014\033\uffe2\067\013\001" +
    "\002\000\006\003\u0192\060\u0218\001\002\000\004\033\u0213" +
    "\001\002\000\014\003\uffe3\016\022\020\014\033\uffe3\067" +
    "\013\001\002\000\006\003\u020f\055\u0210\001\002\000\006" +
    "\003\024\067\023\001\002\000\006\003\u01aa\053\u01ab\001" +
    "\002\000\004\053\uffde\001\002\000\004\053\026\001\002" +
    "\000\010\054\uffa5\055\uffa5\067\013\001\002\000\006\003" +
    "\u0192\060\u0193\001\002\000\006\054\145\055\146\001\002" +
    "\000\012\003\uff9c\034\033\054\uff9c\055\uff9c\001\002\000" +
    "\010\003\uffa7\054\uffa7\055\uffa7\001\002\000\024\044\037" +
    "\052\047\053\044\067\046\070\034\071\051\072\035\073" +
    "\036\074\043\001\002\000\062\003\uff8b\022\uff8b\026\uff8b" +
    "\032\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\001\002\000\062\003\uff8e\022\uff8e\026\uff8e" +
    "\032\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042" +
    "\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\051\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\062\uff8e\063" +
    "\uff8e\064\uff8e\001\002\000\062\003\uff8d\022\uff8d\026\uff8d" +
    "\032\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d" +
    "\051\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\062\uff8d\063" +
    "\uff8d\064\uff8d\001\002\000\026\003\144\044\037\052\047" +
    "\053\044\067\046\070\034\071\051\072\035\073\036\074" +
    "\043\001\002\000\062\003\uff91\022\uff91\026\uff91\032\uff91" +
    "\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\054\uff91\055\uff91\056\uff91\057\uff91\062\uff91\063\uff91\064" +
    "\uff91\001\002\000\062\003\uff90\022\uff90\026\uff90\032\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90" +
    "\054\uff90\055\uff90\056\uff90\057\uff90\062\uff90\063\uff90\064" +
    "\uff90\001\002\000\062\003\uff95\022\uff95\026\uff95\032\uff95" +
    "\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043" +
    "\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95" +
    "\054\uff95\055\uff95\056\uff95\057\uff95\062\uff95\063\uff95\064" +
    "\uff95\001\002\000\062\003\uff8c\022\uff8c\026\uff8c\032\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\054\uff8c\055\uff8c\056\uff8c\057\uff8c\062\uff8c\063\uff8c\064" +
    "\uff8c\001\002\000\024\044\037\052\047\053\044\067\046" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\044\003\uff9b\035\071\036\057\037\061\040\065\041\066" +
    "\042\056\043\067\044\064\045\062\046\070\047\060\050" +
    "\055\051\072\054\uff9b\055\uff9b\064\063\001\002\000\064" +
    "\003\uff96\022\uff96\026\uff96\032\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96" +
    "\046\uff96\047\uff96\050\uff96\051\uff96\053\127\054\uff96\055" +
    "\uff96\056\uff96\057\uff96\062\uff96\063\uff96\064\uff96\001\002" +
    "\000\026\003\054\044\037\052\047\053\044\067\046\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\062" +
    "\003\uff92\022\uff92\026\uff92\032\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92" +
    "\046\uff92\047\uff92\050\uff92\051\uff92\054\uff92\055\uff92\056" +
    "\uff92\057\uff92\062\uff92\063\uff92\064\uff92\001\002\000\062" +
    "\003\uff8f\022\uff8f\026\uff8f\032\uff8f\035\uff8f\036\uff8f\037" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f" +
    "\046\uff8f\047\uff8f\050\uff8f\051\uff8f\054\uff8f\055\uff8f\056" +
    "\uff8f\057\uff8f\062\uff8f\063\uff8f\064\uff8f\001\002\000\062" +
    "\003\uff97\022\uff97\026\uff97\032\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\054\uff97\055\uff97\056" +
    "\uff97\057\uff97\062\uff97\063\uff97\064\uff97\001\002\000\062" +
    "\003\uff6c\022\uff6c\026\uff6c\032\uff6c\035\uff6c\036\uff6c\037" +
    "\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c" +
    "\046\uff6c\047\060\050\uff6c\051\uff6c\054\uff6c\055\uff6c\056" +
    "\uff6c\057\uff6c\062\uff6c\063\uff6c\064\uff6c\001\002\000\062" +
    "\003\uff6b\022\uff6b\026\uff6b\032\uff6b\035\uff6b\036\uff6b\037" +
    "\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045\uff6b" +
    "\046\uff6b\047\uff6b\050\uff6b\051\uff6b\054\uff6b\055\uff6b\056" +
    "\uff6b\057\uff6b\062\uff6b\063\uff6b\064\uff6b\001\002\000\026" +
    "\003\126\044\037\052\047\053\044\067\046\070\034\071" +
    "\051\072\035\073\036\074\043\001\002\000\026\003\124" +
    "\044\037\052\047\053\044\067\046\070\034\071\051\072" +
    "\035\073\036\074\043\001\002\000\026\003\122\044\037" +
    "\052\047\053\044\067\046\070\034\071\051\072\035\073" +
    "\036\074\043\001\002\000\026\003\120\044\037\052\047" +
    "\053\044\067\046\070\034\071\051\072\035\073\036\074" +
    "\043\001\002\000\026\003\116\044\037\052\047\053\044" +
    "\067\046\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\026\003\114\044\037\052\047\053\044\067\046" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\026\003\112\044\037\052\047\053\044\067\046\070\034" +
    "\071\051\072\035\073\036\074\043\001\002\000\026\003" +
    "\110\044\037\052\047\053\044\067\046\070\034\071\051" +
    "\072\035\073\036\074\043\001\002\000\026\003\106\044" +
    "\037\052\047\053\044\067\046\070\034\071\051\072\035" +
    "\073\036\074\043\001\002\000\026\003\104\044\037\052" +
    "\047\053\044\067\046\070\034\071\051\072\035\073\036" +
    "\074\043\001\002\000\026\003\102\044\037\052\047\053" +
    "\044\067\046\070\034\071\051\072\035\073\036\074\043" +
    "\001\002\000\026\003\100\044\037\052\047\053\044\067" +
    "\046\070\034\071\051\072\035\073\036\074\043\001\002" +
    "\000\026\003\076\044\037\052\047\053\044\067\046\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\026" +
    "\003\074\044\037\052\047\053\044\067\046\070\034\071" +
    "\051\072\035\073\036\074\043\001\002\000\062\003\uff6e" +
    "\022\uff6e\026\uff6e\032\uff6e\035\071\036\057\037\061\040" +
    "\065\041\066\042\056\043\067\044\064\045\062\046\070" +
    "\047\060\050\055\051\uff6e\054\uff6e\055\uff6e\056\uff6e\057" +
    "\uff6e\062\uff6e\063\uff6e\064\063\001\002\000\062\003\uff6d" +
    "\022\uff6d\026\uff6d\032\uff6d\035\uff6d\036\uff6d\037\uff6d\040" +
    "\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d" +
    "\047\uff6d\050\uff6d\051\uff6d\054\uff6d\055\uff6d\056\uff6d\057" +
    "\uff6d\062\uff6d\063\uff6d\064\uff6d\001\002\000\062\003\uff76" +
    "\022\uff76\026\uff76\032\uff76\035\uff76\036\uff76\037\uff76\040" +
    "\uff76\041\uff76\042\uff76\043\067\044\064\045\062\046\070" +
    "\047\060\050\uff76\051\uff76\054\uff76\055\uff76\056\uff76\057" +
    "\uff76\062\uff76\063\uff76\064\063\001\002\000\062\003\uff75" +
    "\022\uff75\026\uff75\032\uff75\035\uff75\036\uff75\037\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75" +
    "\047\uff75\050\uff75\051\uff75\054\uff75\055\uff75\056\uff75\057" +
    "\uff75\062\uff75\063\uff75\064\uff75\001\002\000\062\003\uff86" +
    "\022\uff86\026\uff86\032\uff86\035\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86" +
    "\047\060\050\uff86\051\uff86\054\uff86\055\uff86\056\uff86\057" +
    "\uff86\062\uff86\063\uff86\064\063\001\002\000\062\003\uff85" +
    "\022\uff85\026\uff85\032\uff85\035\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\054\uff85\055\uff85\056\uff85\057" +
    "\uff85\062\uff85\063\uff85\064\uff85\001\002\000\062\003\uff8a" +
    "\022\uff8a\026\uff8a\032\uff8a\035\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\062\046\070" +
    "\047\060\050\uff8a\051\uff8a\054\uff8a\055\uff8a\056\uff8a\057" +
    "\uff8a\062\uff8a\063\uff8a\064\063\001\002\000\062\003\uff89" +
    "\022\uff89\026\uff89\032\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89" +
    "\047\uff89\050\uff89\051\uff89\054\uff89\055\uff89\056\uff89\057" +
    "\uff89\062\uff89\063\uff89\064\uff89\001\002\000\062\003\uff74" +
    "\022\uff74\026\uff74\032\uff74\035\uff74\036\uff74\037\uff74\040" +
    "\uff74\041\uff74\042\uff74\043\067\044\064\045\062\046\070" +
    "\047\060\050\uff74\051\uff74\054\uff74\055\uff74\056\uff74\057" +
    "\uff74\062\uff74\063\uff74\064\063\001\002\000\062\003\uff73" +
    "\022\uff73\026\uff73\032\uff73\035\uff73\036\uff73\037\uff73\040" +
    "\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046\uff73" +
    "\047\uff73\050\uff73\051\uff73\054\uff73\055\uff73\056\uff73\057" +
    "\uff73\062\uff73\063\uff73\064\uff73\001\002\000\062\003\uff7a" +
    "\022\uff7a\026\uff7a\032\uff7a\035\uff7a\036\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\043\067\044\064\045\062\046\070" +
    "\047\060\050\uff7a\051\uff7a\054\uff7a\055\uff7a\056\uff7a\057" +
    "\uff7a\062\uff7a\063\uff7a\064\063\001\002\000\062\003\uff79" +
    "\022\uff79\026\uff79\032\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\054\uff79\055\uff79\056\uff79\057" +
    "\uff79\062\uff79\063\uff79\064\uff79\001\002\000\062\003\uff88" +
    "\022\uff88\026\uff88\032\uff88\035\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\062\046\070" +
    "\047\060\050\uff88\051\uff88\054\uff88\055\uff88\056\uff88\057" +
    "\uff88\062\uff88\063\uff88\064\063\001\002\000\062\003\uff87" +
    "\022\uff87\026\uff87\032\uff87\035\uff87\036\uff87\037\uff87\040" +
    "\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87" +
    "\047\uff87\050\uff87\051\uff87\054\uff87\055\uff87\056\uff87\057" +
    "\uff87\062\uff87\063\uff87\064\uff87\001\002\000\062\003\uff7e" +
    "\022\uff7e\026\uff7e\032\uff7e\035\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\047\060\050\uff7e\051\uff7e\054\uff7e\055\uff7e\056\uff7e\057" +
    "\uff7e\062\uff7e\063\uff7e\064\uff7e\001\002\000\062\003\uff7d" +
    "\022\uff7d\026\uff7d\032\uff7d\035\uff7d\036\uff7d\037\uff7d\040" +
    "\uff7d\041\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d" +
    "\047\uff7d\050\uff7d\051\uff7d\054\uff7d\055\uff7d\056\uff7d\057" +
    "\uff7d\062\uff7d\063\uff7d\064\uff7d\001\002\000\062\003\uff84" +
    "\022\uff84\026\uff84\032\uff84\035\uff84\036\uff84\037\uff84\040" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\047\060\050\uff84\051\uff84\054\uff84\055\uff84\056\uff84\057" +
    "\uff84\062\uff84\063\uff84\064\063\001\002\000\062\003\uff83" +
    "\022\uff83\026\uff83\032\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83" +
    "\047\uff83\050\uff83\051\uff83\054\uff83\055\uff83\056\uff83\057" +
    "\uff83\062\uff83\063\uff83\064\uff83\001\002\000\062\003\uff7c" +
    "\022\uff7c\026\uff7c\032\uff7c\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\067\044\064\045\062\046\070" +
    "\047\060\050\uff7c\051\uff7c\054\uff7c\055\uff7c\056\uff7c\057" +
    "\uff7c\062\uff7c\063\uff7c\064\063\001\002\000\062\003\uff7b" +
    "\022\uff7b\026\uff7b\032\uff7b\035\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\050\uff7b\051\uff7b\054\uff7b\055\uff7b\056\uff7b\057" +
    "\uff7b\062\uff7b\063\uff7b\064\uff7b\001\002\000\062\003\uff82" +
    "\022\uff82\026\uff82\032\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82" +
    "\047\060\050\uff82\051\uff82\054\uff82\055\uff82\056\uff82\057" +
    "\uff82\062\uff82\063\uff82\064\uff82\001\002\000\062\003\uff81" +
    "\022\uff81\026\uff81\032\uff81\035\uff81\036\uff81\037\uff81\040" +
    "\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81" +
    "\047\uff81\050\uff81\051\uff81\054\uff81\055\uff81\056\uff81\057" +
    "\uff81\062\uff81\063\uff81\064\uff81\001\002\000\062\003\uff78" +
    "\022\uff78\026\uff78\032\uff78\035\uff78\036\uff78\037\uff78\040" +
    "\uff78\041\uff78\042\uff78\043\067\044\064\045\062\046\070" +
    "\047\060\050\uff78\051\uff78\054\uff78\055\uff78\056\uff78\057" +
    "\uff78\062\uff78\063\uff78\064\063\001\002\000\062\003\uff77" +
    "\022\uff77\026\uff77\032\uff77\035\uff77\036\uff77\037\uff77\040" +
    "\uff77\041\uff77\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77" +
    "\047\uff77\050\uff77\051\uff77\054\uff77\055\uff77\056\uff77\057" +
    "\uff77\062\uff77\063\uff77\064\uff77\001\002\000\062\003\uff72" +
    "\022\uff72\026\uff72\032\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\042\uff72\043\067\044\064\045\062\046\070" +
    "\047\060\050\uff72\051\uff72\054\uff72\055\uff72\056\uff72\057" +
    "\uff72\062\uff72\063\uff72\064\063\001\002\000\062\003\uff71" +
    "\022\uff71\026\uff71\032\uff71\035\uff71\036\uff71\037\uff71\040" +
    "\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71" +
    "\047\uff71\050\uff71\051\uff71\054\uff71\055\uff71\056\uff71\057" +
    "\uff71\062\uff71\063\uff71\064\uff71\001\002\000\062\003\uff70" +
    "\022\uff70\026\uff70\032\uff70\035\071\036\057\037\061\040" +
    "\065\041\066\042\056\043\067\044\064\045\062\046\070" +
    "\047\060\050\uff70\051\uff70\054\uff70\055\uff70\056\uff70\057" +
    "\uff70\062\uff70\063\uff70\064\063\001\002\000\062\003\uff6f" +
    "\022\uff6f\026\uff6f\032\uff6f\035\uff6f\036\uff6f\037\uff6f\040" +
    "\uff6f\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f" +
    "\047\uff6f\050\uff6f\051\uff6f\054\uff6f\055\uff6f\056\uff6f\057" +
    "\uff6f\062\uff6f\063\uff6f\064\uff6f\001\002\000\030\003\133" +
    "\044\037\052\047\053\044\054\131\067\046\070\034\071" +
    "\051\072\035\073\036\074\043\001\002\000\006\003\136" +
    "\054\137\001\002\000\062\003\uff66\022\uff66\026\uff66\032" +
    "\uff66\035\uff66\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66" +
    "\043\uff66\044\uff66\045\uff66\046\uff66\047\uff66\050\uff66\051" +
    "\uff66\054\uff66\055\uff66\056\uff66\057\uff66\062\uff66\063\uff66" +
    "\064\uff66\001\002\000\044\003\uff6a\035\071\036\057\037" +
    "\061\040\065\041\066\042\056\043\067\044\064\045\062" +
    "\046\070\047\060\050\055\051\072\054\uff6a\057\134\064" +
    "\063\001\002\000\062\003\uff65\022\uff65\026\uff65\032\uff65" +
    "\035\uff65\036\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043" +
    "\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65" +
    "\054\uff65\055\uff65\056\uff65\057\uff65\062\uff65\063\uff65\064" +
    "\uff65\001\002\000\024\044\037\052\047\053\044\067\046" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\006\003\uff69\054\uff69\001\002\000\062\003\uff67\022\uff67" +
    "\026\uff67\032\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041" +
    "\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67" +
    "\050\uff67\051\uff67\054\uff67\055\uff67\056\uff67\057\uff67\062" +
    "\uff67\063\uff67\064\uff67\001\002\000\062\003\uff68\022\uff68" +
    "\026\uff68\032\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041" +
    "\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047\uff68" +
    "\050\uff68\051\uff68\054\uff68\055\uff68\056\uff68\057\uff68\062" +
    "\uff68\063\uff68\064\uff68\001\002\000\042\003\141\035\071" +
    "\036\057\037\061\040\065\041\066\042\056\043\067\044" +
    "\064\045\062\046\070\047\060\050\055\051\072\054\142" +
    "\064\063\001\002\000\062\003\uff93\022\uff93\026\uff93\032" +
    "\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051" +
    "\uff93\054\uff93\055\uff93\056\uff93\057\uff93\062\uff93\063\uff93" +
    "\064\uff93\001\002\000\062\003\uff94\022\uff94\026\uff94\032" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051" +
    "\uff94\054\uff94\055\uff94\056\uff94\057\uff94\062\uff94\063\uff94" +
    "\064\uff94\001\002\000\062\003\uff80\022\uff80\026\uff80\032" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\047\060\050\uff80\051" +
    "\uff80\054\uff80\055\uff80\056\uff80\057\uff80\062\uff80\063\uff80" +
    "\064\uff80\001\002\000\062\003\uff7f\022\uff7f\026\uff7f\032" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051" +
    "\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f\062\uff7f\063\uff7f" +
    "\064\uff7f\001\002\000\004\021\150\001\002\000\004\067" +
    "\013\001\002\000\010\003\uffa6\054\uffa6\055\uffa6\001\002" +
    "\000\012\004\151\005\154\006\155\007\152\001\002\000" +
    "\014\003\uff52\032\uff52\034\uff52\054\uff52\055\uff52\001\002" +
    "\000\014\003\uff4f\032\uff4f\034\uff4f\054\uff4f\055\uff4f\001" +
    "\002\000\004\032\156\001\002\000\014\003\uff51\032\uff51" +
    "\034\uff51\054\uff51\055\uff51\001\002\000\014\003\uff50\032" +
    "\uff50\034\uff50\054\uff50\055\uff50\001\002\000\010\016\022" +
    "\020\014\067\013\001\002\000\004\033\160\001\002\000" +
    "\050\010\175\013\166\014\uff63\015\174\021\203\025\205" +
    "\026\173\030\161\031\171\044\037\052\047\053\044\066" +
    "\164\067\176\070\034\071\051\072\035\073\036\074\043" +
    "\001\002\000\006\003\u0181\053\u0182\001\002\000\004\014" +
    "\u017e\001\002\000\060\003\uff5c\010\uff5c\011\uff5c\012\uff5c" +
    "\013\uff5c\014\uff5c\015\uff5c\021\uff5c\023\uff5c\025\uff5c\026" +
    "\uff5c\030\uff5c\031\uff5c\044\uff5c\052\uff5c\053\uff5c\066\uff5c" +
    "\067\uff5c\070\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c\001" +
    "\002\000\024\044\037\052\047\053\044\067\046\070\034" +
    "\071\051\072\035\073\036\074\043\001\002\000\060\003" +
    "\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014\uff5a\015\uff5a" +
    "\021\uff5a\023\uff5a\025\uff5a\026\uff5a\030\uff5a\031\uff5a\044" +
    "\uff5a\052\uff5a\053\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a" +
    "\072\uff5a\073\uff5a\074\uff5a\001\002\000\004\067\u0115\001" +
    "\002\000\060\003\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b" +
    "\014\uff5b\015\uff5b\021\uff5b\023\uff5b\025\uff5b\026\uff5b\030" +
    "\uff5b\031\uff5b\044\uff5b\052\uff5b\053\uff5b\066\uff5b\067\uff5b" +
    "\070\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b\001\002\000" +
    "\060\003\uff5d\010\uff5d\011\uff5d\012\uff5d\013\uff5d\014\uff5d" +
    "\015\uff5d\021\uff5d\023\uff5d\025\uff5d\026\uff5d\030\uff5d\031" +
    "\uff5d\044\uff5d\052\uff5d\053\uff5d\066\uff5d\067\uff5d\070\uff5d" +
    "\071\uff5d\072\uff5d\073\uff5d\074\uff5d\001\002\000\006\003" +
    "\u0104\053\u0105\001\002\000\060\003\uff62\010\uff62\011\uff62" +
    "\012\uff62\013\uff62\014\uff62\015\uff62\021\uff62\023\uff62\025" +
    "\uff62\026\uff62\030\uff62\031\uff62\044\uff62\052\uff62\053\uff62" +
    "\066\uff62\067\uff62\070\uff62\071\uff62\072\uff62\073\uff62\074" +
    "\uff62\001\002\000\052\003\uff63\010\175\013\166\014\uff63" +
    "\015\174\021\203\025\205\026\173\030\161\031\171\044" +
    "\037\052\047\053\044\066\164\067\176\070\034\071\051" +
    "\072\035\073\036\074\043\001\002\000\006\003\360\023" +
    "\361\001\002\000\024\044\037\052\047\053\044\067\046" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\046\003\uff96\034\242\035\uff96\036\uff96\037\uff96\040\uff96" +
    "\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047" +
    "\uff96\050\uff96\051\uff96\053\127\055\uff96\064\uff96\001\002" +
    "\000\042\003\240\035\071\036\057\037\061\040\065\041" +
    "\066\042\056\043\067\044\064\045\062\046\070\047\060" +
    "\050\055\051\072\055\241\064\063\001\002\000\060\003" +
    "\uff58\010\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58" +
    "\021\uff58\023\uff58\025\uff58\026\uff58\030\uff58\031\uff58\044" +
    "\uff58\052\uff58\053\uff58\066\uff58\067\uff58\070\uff58\071\uff58" +
    "\072\uff58\073\uff58\074\uff58\001\002\000\060\003\uff59\010" +
    "\uff59\011\uff59\012\uff59\013\uff59\014\uff59\015\uff59\021\uff59" +
    "\023\uff59\025\uff59\026\uff59\030\uff59\031\uff59\044\uff59\052" +
    "\uff59\053\uff59\066\uff59\067\uff59\070\uff59\071\uff59\072\uff59" +
    "\073\uff59\074\uff59\001\002\000\060\003\uff63\010\175\011" +
    "\uff63\012\uff63\013\166\014\uff63\015\174\021\203\023\uff63" +
    "\025\205\026\173\030\161\031\171\044\037\052\047\053" +
    "\044\066\164\067\176\070\034\071\051\072\035\073\036" +
    "\074\043\001\002\000\024\044\037\052\047\053\044\067" +
    "\046\070\034\071\051\072\035\073\036\074\043\001\002" +
    "\000\060\003\uff57\010\uff57\011\uff57\012\uff57\013\uff57\014" +
    "\uff57\015\uff57\021\uff57\023\uff57\025\uff57\026\uff57\030\uff57" +
    "\031\uff57\044\uff57\052\uff57\053\uff57\066\uff57\067\uff57\070" +
    "\uff57\071\uff57\072\uff57\073\uff57\074\uff57\001\002\000\024" +
    "\044\037\052\047\053\044\067\046\070\034\071\051\072" +
    "\035\073\036\074\043\001\002\000\060\003\uff5f\010\uff5f" +
    "\011\uff5f\012\uff5f\013\uff5f\014\uff5f\015\uff5f\021\uff5f\023" +
    "\uff5f\025\uff5f\026\uff5f\030\uff5f\031\uff5f\044\uff5f\052\uff5f" +
    "\053\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073" +
    "\uff5f\074\uff5f\001\002\000\060\003\uff5e\010\uff5e\011\uff5e" +
    "\012\uff5e\013\uff5e\014\uff5e\015\uff5e\021\uff5e\023\uff5e\025" +
    "\uff5e\026\uff5e\030\uff5e\031\uff5e\044\uff5e\052\uff5e\053\uff5e" +
    "\066\uff5e\067\uff5e\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074" +
    "\uff5e\001\002\000\042\003\212\026\211\035\071\036\057" +
    "\037\061\040\065\041\066\042\056\043\067\044\064\045" +
    "\062\046\070\047\060\050\055\051\072\064\063\001\002" +
    "\000\052\003\uff63\010\175\013\166\014\uff63\015\174\021" +
    "\203\025\205\026\173\030\161\031\171\044\037\052\047" +
    "\053\044\066\164\067\176\070\034\071\051\072\035\073" +
    "\036\074\043\001\002\000\050\010\uff14\013\uff14\014\uff14" +
    "\015\uff14\021\uff14\025\uff14\026\uff14\030\uff14\031\uff14\044" +
    "\uff14\052\uff14\053\uff14\066\uff14\067\uff14\070\uff14\071\uff14" +
    "\072\uff14\073\uff14\074\uff14\001\002\000\050\010\175\013" +
    "\166\014\uff63\015\174\021\203\025\205\026\173\030\161" +
    "\031\171\044\037\052\047\053\044\066\164\067\176\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\004" +
    "\014\215\001\002\000\004\026\216\001\002\000\004\055" +
    "\217\001\002\000\060\003\uff13\010\uff13\011\uff13\012\uff13" +
    "\013\uff13\014\uff13\015\uff13\021\uff13\023\uff13\025\uff13\026" +
    "\uff13\030\uff13\031\uff13\044\uff13\052\uff13\053\uff13\066\uff13" +
    "\067\uff13\070\uff13\071\uff13\072\uff13\073\uff13\074\uff13\001" +
    "\002\000\006\003\221\014\222\001\002\000\004\026\uff12" +
    "\001\002\000\006\003\223\026\224\001\002\000\004\055" +
    "\uff10\001\002\000\006\003\225\055\226\001\002\000\060" +
    "\003\uff0e\010\uff0e\011\uff0e\012\uff0e\013\uff0e\014\uff0e\015" +
    "\uff0e\021\uff0e\023\uff0e\025\uff0e\026\uff0e\030\uff0e\031\uff0e" +
    "\044\uff0e\052\uff0e\053\uff0e\066\uff0e\067\uff0e\070\uff0e\071" +
    "\uff0e\072\uff0e\073\uff0e\074\uff0e\001\002\000\060\003\uff15" +
    "\010\uff15\011\uff15\012\uff15\013\uff15\014\uff15\015\uff15\021" +
    "\uff15\023\uff15\025\uff15\026\uff15\030\uff15\031\uff15\044\uff15" +
    "\052\uff15\053\uff15\066\uff15\067\uff15\070\uff15\071\uff15\072" +
    "\uff15\073\uff15\074\uff15\001\002\000\004\055\230\001\002" +
    "\000\060\003\uff0f\010\uff0f\011\uff0f\012\uff0f\013\uff0f\014" +
    "\uff0f\015\uff0f\021\uff0f\023\uff0f\025\uff0f\026\uff0f\030\uff0f" +
    "\031\uff0f\044\uff0f\052\uff0f\053\uff0f\066\uff0f\067\uff0f\070" +
    "\uff0f\071\uff0f\072\uff0f\073\uff0f\074\uff0f\001\002\000\004" +
    "\026\232\001\002\000\004\055\233\001\002\000\060\003" +
    "\uff11\010\uff11\011\uff11\012\uff11\013\uff11\014\uff11\015\uff11" +
    "\021\uff11\023\uff11\025\uff11\026\uff11\030\uff11\031\uff11\044" +
    "\uff11\052\uff11\053\uff11\066\uff11\067\uff11\070\uff11\071\uff11" +
    "\072\uff11\073\uff11\074\uff11\001\002\000\042\003\235\035" +
    "\071\036\057\037\061\040\065\041\066\042\056\043\067" +
    "\044\064\045\062\046\070\047\060\050\055\051\072\055" +
    "\236\064\063\001\002\000\060\003\ufee6\010\ufee6\011\ufee6" +
    "\012\ufee6\013\ufee6\014\ufee6\015\ufee6\021\ufee6\023\ufee6\025" +
    "\ufee6\026\ufee6\030\ufee6\031\ufee6\044\ufee6\052\ufee6\053\ufee6" +
    "\066\ufee6\067\ufee6\070\ufee6\071\ufee6\072\ufee6\073\ufee6\074" +
    "\ufee6\001\002\000\060\003\ufee7\010\ufee7\011\ufee7\012\ufee7" +
    "\013\ufee7\014\ufee7\015\ufee7\021\ufee7\023\ufee7\025\ufee7\026" +
    "\ufee7\030\ufee7\031\ufee7\044\ufee7\052\ufee7\053\ufee7\066\ufee7" +
    "\067\ufee7\070\ufee7\071\ufee7\072\ufee7\073\ufee7\074\ufee7\001" +
    "\002\000\014\003\uff64\011\uff64\012\uff64\014\uff64\023\uff64" +
    "\001\002\000\060\003\uff60\010\uff60\011\uff60\012\uff60\013" +
    "\uff60\014\uff60\015\uff60\021\uff60\023\uff60\025\uff60\026\uff60" +
    "\030\uff60\031\uff60\044\uff60\052\uff60\053\uff60\066\uff60\067" +
    "\uff60\070\uff60\071\uff60\072\uff60\073\uff60\074\uff60\001\002" +
    "\000\060\003\uff61\010\uff61\011\uff61\012\uff61\013\uff61\014" +
    "\uff61\015\uff61\021\uff61\023\uff61\025\uff61\026\uff61\030\uff61" +
    "\031\uff61\044\uff61\052\uff61\053\uff61\066\uff61\067\uff61\070" +
    "\uff61\071\uff61\072\uff61\073\uff61\074\uff61\001\002\000\026" +
    "\003\244\044\037\052\047\053\044\067\046\070\034\071" +
    "\051\072\035\073\036\074\043\001\002\000\042\003\247" +
    "\035\071\036\057\037\061\040\065\041\066\042\056\043" +
    "\067\044\064\045\062\046\070\047\060\050\055\051\072" +
    "\055\250\064\063\001\002\000\004\055\uff4d\001\002\000" +
    "\004\055\246\001\002\000\060\003\uff4c\010\uff4c\011\uff4c" +
    "\012\uff4c\013\uff4c\014\uff4c\015\uff4c\021\uff4c\023\uff4c\025" +
    "\uff4c\026\uff4c\030\uff4c\031\uff4c\044\uff4c\052\uff4c\053\uff4c" +
    "\066\uff4c\067\uff4c\070\uff4c\071\uff4c\072\uff4c\073\uff4c\074" +
    "\uff4c\001\002\000\060\003\uff4b\010\uff4b\011\uff4b\012\uff4b" +
    "\013\uff4b\014\uff4b\015\uff4b\021\uff4b\023\uff4b\025\uff4b\026" +
    "\uff4b\030\uff4b\031\uff4b\044\uff4b\052\uff4b\053\uff4b\066\uff4b" +
    "\067\uff4b\070\uff4b\071\uff4b\072\uff4b\073\uff4b\074\uff4b\001" +
    "\002\000\060\003\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e" +
    "\014\uff4e\015\uff4e\021\uff4e\023\uff4e\025\uff4e\026\uff4e\030" +
    "\uff4e\031\uff4e\044\uff4e\052\uff4e\053\uff4e\066\uff4e\067\uff4e" +
    "\070\uff4e\071\uff4e\072\uff4e\073\uff4e\074\uff4e\001\002\000" +
    "\042\003\253\022\252\035\071\036\057\037\061\040\065" +
    "\041\066\042\056\043\067\044\064\045\062\046\070\047" +
    "\060\050\055\051\072\064\063\001\002\000\056\003\uff63" +
    "\010\175\011\uff63\012\uff63\013\166\014\uff63\015\174\021" +
    "\203\025\205\026\173\030\161\031\171\044\037\052\047" +
    "\053\044\066\164\067\176\070\034\071\051\072\035\073" +
    "\036\074\043\001\002\000\050\010\uff2e\013\uff2e\014\uff2e" +
    "\015\uff2e\021\uff2e\025\uff2e\026\uff2e\030\uff2e\031\uff2e\044" +
    "\uff2e\052\uff2e\053\uff2e\066\uff2e\067\uff2e\070\uff2e\071\uff2e" +
    "\072\uff2e\073\uff2e\074\uff2e\001\002\000\050\010\175\013" +
    "\166\014\uff63\015\174\021\203\025\205\026\173\030\161" +
    "\031\171\044\037\052\047\053\044\066\164\067\176\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\004" +
    "\014\256\001\002\000\004\010\257\001\002\000\004\055" +
    "\260\001\002\000\060\003\uff2d\010\uff2d\011\uff2d\012\uff2d" +
    "\013\uff2d\014\uff2d\015\uff2d\021\uff2d\023\uff2d\025\uff2d\026" +
    "\uff2d\030\uff2d\031\uff2d\044\uff2d\052\uff2d\053\uff2d\066\uff2d" +
    "\067\uff2d\070\uff2d\071\uff2d\072\uff2d\073\uff2d\074\uff2d\001" +
    "\002\000\012\003\262\011\263\012\265\014\267\001\002" +
    "\000\004\010\uff2c\001\002\000\052\003\uff63\010\175\013" +
    "\166\014\uff63\015\174\021\203\025\205\026\173\030\161" +
    "\031\171\044\037\052\047\053\044\066\164\067\176\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\012" +
    "\003\uff35\011\uff35\012\265\014\uff35\001\002\000\026\003" +
    "\327\044\037\052\047\053\044\067\046\070\034\071\051" +
    "\072\035\073\036\074\043\001\002\000\010\003\276\011" +
    "\277\014\300\001\002\000\006\003\270\010\271\001\002" +
    "\000\004\055\uff2a\001\002\000\006\003\272\055\273\001" +
    "\002\000\060\003\uff28\010\uff28\011\uff28\012\uff28\013\uff28" +
    "\014\uff28\015\uff28\021\uff28\023\uff28\025\uff28\026\uff28\030" +
    "\uff28\031\uff28\044\uff28\052\uff28\053\uff28\066\uff28\067\uff28" +
    "\070\uff28\071\uff28\072\uff28\073\uff28\074\uff28\001\002\000" +
    "\060\003\uff2f\010\uff2f\011\uff2f\012\uff2f\013\uff2f\014\uff2f" +
    "\015\uff2f\021\uff2f\023\uff2f\025\uff2f\026\uff2f\030\uff2f\031" +
    "\uff2f\044\uff2f\052\uff2f\053\uff2f\066\uff2f\067\uff2f\070\uff2f" +
    "\071\uff2f\072\uff2f\073\uff2f\074\uff2f\001\002\000\004\055" +
    "\275\001\002\000\060\003\uff29\010\uff29\011\uff29\012\uff29" +
    "\013\uff29\014\uff29\015\uff29\021\uff29\023\uff29\025\uff29\026" +
    "\uff29\030\uff29\031\uff29\044\uff29\052\uff29\053\uff29\066\uff29" +
    "\067\uff29\070\uff29\071\uff29\072\uff29\073\uff29\074\uff29\001" +
    "\002\000\004\010\uff20\001\002\000\052\003\uff63\010\175" +
    "\013\166\014\uff63\015\174\021\203\025\205\026\173\030" +
    "\161\031\171\044\037\052\047\053\044\066\164\067\176" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\006\003\301\010\302\001\002\000\004\055\uff1e\001\002" +
    "\000\006\003\303\055\304\001\002\000\060\003\uff1c\010" +
    "\uff1c\011\uff1c\012\uff1c\013\uff1c\014\uff1c\015\uff1c\021\uff1c" +
    "\023\uff1c\025\uff1c\026\uff1c\030\uff1c\031\uff1c\044\uff1c\052" +
    "\uff1c\053\uff1c\066\uff1c\067\uff1c\070\uff1c\071\uff1c\072\uff1c" +
    "\073\uff1c\074\uff1c\001\002\000\060\003\uff21\010\uff21\011" +
    "\uff21\012\uff21\013\uff21\014\uff21\015\uff21\021\uff21\023\uff21" +
    "\025\uff21\026\uff21\030\uff21\031\uff21\044\uff21\052\uff21\053" +
    "\uff21\066\uff21\067\uff21\070\uff21\071\uff21\072\uff21\073\uff21" +
    "\074\uff21\001\002\000\004\055\306\001\002\000\060\003" +
    "\uff1d\010\uff1d\011\uff1d\012\uff1d\013\uff1d\014\uff1d\015\uff1d" +
    "\021\uff1d\023\uff1d\025\uff1d\026\uff1d\030\uff1d\031\uff1d\044" +
    "\uff1d\052\uff1d\053\uff1d\066\uff1d\067\uff1d\070\uff1d\071\uff1d" +
    "\072\uff1d\073\uff1d\074\uff1d\001\002\000\006\003\310\014" +
    "\311\001\002\000\004\010\uff1a\001\002\000\006\003\312" +
    "\010\313\001\002\000\004\055\uff18\001\002\000\006\003" +
    "\314\055\315\001\002\000\060\003\uff16\010\uff16\011\uff16" +
    "\012\uff16\013\uff16\014\uff16\015\uff16\021\uff16\023\uff16\025" +
    "\uff16\026\uff16\030\uff16\031\uff16\044\uff16\052\uff16\053\uff16" +
    "\066\uff16\067\uff16\070\uff16\071\uff16\072\uff16\073\uff16\074" +
    "\uff16\001\002\000\060\003\uff1b\010\uff1b\011\uff1b\012\uff1b" +
    "\013\uff1b\014\uff1b\015\uff1b\021\uff1b\023\uff1b\025\uff1b\026" +
    "\uff1b\030\uff1b\031\uff1b\044\uff1b\052\uff1b\053\uff1b\066\uff1b" +
    "\067\uff1b\070\uff1b\071\uff1b\072\uff1b\073\uff1b\074\uff1b\001" +
    "\002\000\004\055\317\001\002\000\060\003\uff17\010\uff17" +
    "\011\uff17\012\uff17\013\uff17\014\uff17\015\uff17\021\uff17\023" +
    "\uff17\025\uff17\026\uff17\030\uff17\031\uff17\044\uff17\052\uff17" +
    "\053\uff17\066\uff17\067\uff17\070\uff17\071\uff17\072\uff17\073" +
    "\uff17\074\uff17\001\002\000\004\010\321\001\002\000\004" +
    "\055\322\001\002\000\060\003\uff19\010\uff19\011\uff19\012" +
    "\uff19\013\uff19\014\uff19\015\uff19\021\uff19\023\uff19\025\uff19" +
    "\026\uff19\030\uff19\031\uff19\044\uff19\052\uff19\053\uff19\066" +
    "\uff19\067\uff19\070\uff19\071\uff19\072\uff19\073\uff19\074\uff19" +
    "\001\002\000\004\010\324\001\002\000\004\055\325\001" +
    "\002\000\060\003\uff1f\010\uff1f\011\uff1f\012\uff1f\013\uff1f" +
    "\014\uff1f\015\uff1f\021\uff1f\023\uff1f\025\uff1f\026\uff1f\030" +
    "\uff1f\031\uff1f\044\uff1f\052\uff1f\053\uff1f\066\uff1f\067\uff1f" +
    "\070\uff1f\071\uff1f\072\uff1f\073\uff1f\074\uff1f\001\002\000" +
    "\042\003\334\022\333\035\071\036\057\037\061\040\065" +
    "\041\066\042\056\043\067\044\064\045\062\046\070\047" +
    "\060\050\055\051\072\064\063\001\002\000\004\022\uff33" +
    "\001\002\000\004\022\331\001\002\000\056\003\uff63\010" +
    "\175\011\uff63\012\uff63\013\166\014\uff63\015\174\021\203" +
    "\025\205\026\173\030\161\031\171\044\037\052\047\053" +
    "\044\066\164\067\176\070\034\071\051\072\035\073\036" +
    "\074\043\001\002\000\012\003\uff32\011\uff32\012\uff32\014" +
    "\uff32\001\002\000\056\003\uff63\010\175\011\uff63\012\uff63" +
    "\013\166\014\uff63\015\174\021\203\025\205\026\173\030" +
    "\161\031\171\044\037\052\047\053\044\066\164\067\176" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\056\003\uff31\010\uff31\011\uff31\012\uff31\013\uff31\014\uff31" +
    "\015\uff31\021\uff31\025\uff31\026\uff31\030\uff31\031\uff31\044" +
    "\uff31\052\uff31\053\uff31\066\uff31\067\uff31\070\uff31\071\uff31" +
    "\072\uff31\073\uff31\074\uff31\001\002\000\056\003\uff63\010" +
    "\175\011\uff63\012\uff63\013\166\014\uff63\015\174\021\203" +
    "\025\205\026\173\030\161\031\171\044\037\052\047\053" +
    "\044\066\164\067\176\070\034\071\051\072\035\073\036" +
    "\074\043\001\002\000\012\003\uff30\011\uff30\012\uff30\014" +
    "\uff30\001\002\000\012\003\uff34\011\uff34\012\uff34\014\uff34" +
    "\001\002\000\010\003\uff36\011\uff36\014\uff36\001\002\000" +
    "\006\003\342\014\343\001\002\000\004\010\uff26\001\002" +
    "\000\006\003\344\010\345\001\002\000\004\055\uff24\001" +
    "\002\000\006\003\346\055\347\001\002\000\060\003\uff22" +
    "\010\uff22\011\uff22\012\uff22\013\uff22\014\uff22\015\uff22\021" +
    "\uff22\023\uff22\025\uff22\026\uff22\030\uff22\031\uff22\044\uff22" +
    "\052\uff22\053\uff22\066\uff22\067\uff22\070\uff22\071\uff22\072" +
    "\uff22\073\uff22\074\uff22\001\002\000\060\003\uff27\010\uff27" +
    "\011\uff27\012\uff27\013\uff27\014\uff27\015\uff27\021\uff27\023" +
    "\uff27\025\uff27\026\uff27\030\uff27\031\uff27\044\uff27\052\uff27" +
    "\053\uff27\066\uff27\067\uff27\070\uff27\071\uff27\072\uff27\073" +
    "\uff27\074\uff27\001\002\000\004\055\351\001\002\000\060" +
    "\003\uff23\010\uff23\011\uff23\012\uff23\013\uff23\014\uff23\015" +
    "\uff23\021\uff23\023\uff23\025\uff23\026\uff23\030\uff23\031\uff23" +
    "\044\uff23\052\uff23\053\uff23\066\uff23\067\uff23\070\uff23\071" +
    "\uff23\072\uff23\073\uff23\074\uff23\001\002\000\004\010\353" +
    "\001\002\000\004\055\354\001\002\000\060\003\uff25\010" +
    "\uff25\011\uff25\012\uff25\013\uff25\014\uff25\015\uff25\021\uff25" +
    "\023\uff25\025\uff25\026\uff25\030\uff25\031\uff25\044\uff25\052" +
    "\uff25\053\uff25\066\uff25\067\uff25\070\uff25\071\uff25\072\uff25" +
    "\073\uff25\074\uff25\001\002\000\004\010\356\001\002\000" +
    "\004\055\357\001\002\000\060\003\uff2b\010\uff2b\011\uff2b" +
    "\012\uff2b\013\uff2b\014\uff2b\015\uff2b\021\uff2b\023\uff2b\025" +
    "\uff2b\026\uff2b\030\uff2b\031\uff2b\044\uff2b\052\uff2b\053\uff2b" +
    "\066\uff2b\067\uff2b\070\uff2b\071\uff2b\072\uff2b\073\uff2b\074" +
    "\uff2b\001\002\000\024\044\uff06\052\uff06\053\uff06\067\uff06" +
    "\070\uff06\071\uff06\072\uff06\073\uff06\074\uff06\001\002\000" +
    "\024\044\037\052\047\053\044\067\046\070\034\071\051" +
    "\072\035\073\036\074\043\001\002\000\042\003\363\035" +
    "\071\036\057\037\061\040\065\041\066\042\056\043\067" +
    "\044\064\045\062\046\070\047\060\050\055\051\072\055" +
    "\364\064\063\001\002\000\060\003\uff04\010\uff04\011\uff04" +
    "\012\uff04\013\uff04\014\uff04\015\uff04\021\uff04\023\uff04\025" +
    "\uff04\026\uff04\030\uff04\031\uff04\044\uff04\052\uff04\053\uff04" +
    "\066\uff04\067\uff04\070\uff04\071\uff04\072\uff04\073\uff04\074" +
    "\uff04\001\002\000\060\003\uff07\010\uff07\011\uff07\012\uff07" +
    "\013\uff07\014\uff07\015\uff07\021\uff07\023\uff07\025\uff07\026" +
    "\uff07\030\uff07\031\uff07\044\uff07\052\uff07\053\uff07\066\uff07" +
    "\067\uff07\070\uff07\071\uff07\072\uff07\073\uff07\074\uff07\001" +
    "\002\000\024\044\037\052\047\053\044\067\046\070\034" +
    "\071\051\072\035\073\036\074\043\001\002\000\040\035" +
    "\071\036\057\037\061\040\065\041\066\042\056\043\067" +
    "\044\064\045\062\046\070\047\060\050\055\051\072\055" +
    "\367\064\063\001\002\000\060\003\uff05\010\uff05\011\uff05" +
    "\012\uff05\013\uff05\014\uff05\015\uff05\021\uff05\023\uff05\025" +
    "\uff05\026\uff05\030\uff05\031\uff05\044\uff05\052\uff05\053\uff05" +
    "\066\uff05\067\uff05\070\uff05\071\uff05\072\uff05\073\uff05\074" +
    "\uff05\001\002\000\006\003\371\014\372\001\002\000\004" +
    "\026\uff02\001\002\000\006\003\373\026\374\001\002\000" +
    "\004\055\uff00\001\002\000\006\003\375\055\376\001\002" +
    "\000\060\003\ufefe\010\ufefe\011\ufefe\012\ufefe\013\ufefe\014" +
    "\ufefe\015\ufefe\021\ufefe\023\ufefe\025\ufefe\026\ufefe\030\ufefe" +
    "\031\ufefe\044\ufefe\052\ufefe\053\ufefe\066\ufefe\067\ufefe\070" +
    "\ufefe\071\ufefe\072\ufefe\073\ufefe\074\ufefe\001\002\000\060" +
    "\003\uff03\010\uff03\011\uff03\012\uff03\013\uff03\014\uff03\015" +
    "\uff03\021\uff03\023\uff03\025\uff03\026\uff03\030\uff03\031\uff03" +
    "\044\uff03\052\uff03\053\uff03\066\uff03\067\uff03\070\uff03\071" +
    "\uff03\072\uff03\073\uff03\074\uff03\001\002\000\004\055\u0100" +
    "\001\002\000\060\003\ufeff\010\ufeff\011\ufeff\012\ufeff\013" +
    "\ufeff\014\ufeff\015\ufeff\021\ufeff\023\ufeff\025\ufeff\026\ufeff" +
    "\030\ufeff\031\ufeff\044\ufeff\052\ufeff\053\ufeff\066\ufeff\067" +
    "\ufeff\070\ufeff\071\ufeff\072\ufeff\073\ufeff\074\ufeff\001\002" +
    "\000\004\026\u0102\001\002\000\004\055\u0103\001\002\000" +
    "\060\003\uff01\010\uff01\011\uff01\012\uff01\013\uff01\014\uff01" +
    "\015\uff01\021\uff01\023\uff01\025\uff01\026\uff01\030\uff01\031" +
    "\uff01\044\uff01\052\uff01\053\uff01\066\uff01\067\uff01\070\uff01" +
    "\071\uff01\072\uff01\073\uff01\074\uff01\001\002\000\004\067" +
    "\uff45\001\002\000\006\003\u0107\067\u0106\001\002\000\006" +
    "\003\u010b\054\u010c\001\002\000\004\054\uff43\001\002\000" +
    "\004\054\u0109\001\002\000\004\055\u010a\001\002\000\060" +
    "\003\uff42\010\uff42\011\uff42\012\uff42\013\uff42\014\uff42\015" +
    "\uff42\021\uff42\023\uff42\025\uff42\026\uff42\030\uff42\031\uff42" +
    "\044\uff42\052\uff42\053\uff42\066\uff42\067\uff42\070\uff42\071" +
    "\uff42\072\uff42\073\uff42\074\uff42\001\002\000\004\055\uff41" +
    "\001\002\000\006\003\u010d\055\u010e\001\002\000\060\003" +
    "\uff3f\010\uff3f\011\uff3f\012\uff3f\013\uff3f\014\uff3f\015\uff3f" +
    "\021\uff3f\023\uff3f\025\uff3f\026\uff3f\030\uff3f\031\uff3f\044" +
    "\uff3f\052\uff3f\053\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f" +
    "\072\uff3f\073\uff3f\074\uff3f\001\002\000\060\003\uff46\010" +
    "\uff46\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46\021\uff46" +
    "\023\uff46\025\uff46\026\uff46\030\uff46\031\uff46\044\uff46\052" +
    "\uff46\053\uff46\066\uff46\067\uff46\070\uff46\071\uff46\072\uff46" +
    "\073\uff46\074\uff46\001\002\000\004\055\u0110\001\002\000" +
    "\060\003\uff40\010\uff40\011\uff40\012\uff40\013\uff40\014\uff40" +
    "\015\uff40\021\uff40\023\uff40\025\uff40\026\uff40\030\uff40\031" +
    "\uff40\044\uff40\052\uff40\053\uff40\066\uff40\067\uff40\070\uff40" +
    "\071\uff40\072\uff40\073\uff40\074\uff40\001\002\000\004\067" +
    "\u0112\001\002\000\004\054\u0113\001\002\000\004\055\u0114" +
    "\001\002\000\060\003\uff44\010\uff44\011\uff44\012\uff44\013" +
    "\uff44\014\uff44\015\uff44\021\uff44\023\uff44\025\uff44\026\uff44" +
    "\030\uff44\031\uff44\044\uff44\052\uff44\053\uff44\066\uff44\067" +
    "\uff44\070\uff44\071\uff44\072\uff44\073\uff44\074\uff44\001\002" +
    "\000\004\024\u0116\001\002\000\024\044\037\052\047\053" +
    "\044\067\046\070\034\071\051\072\035\073\036\074\043" +
    "\001\002\000\004\026\u011b\001\002\000\040\035\071\036" +
    "\057\037\061\040\065\041\066\042\056\043\067\044\064" +
    "\045\062\046\070\047\060\050\055\051\072\056\u0119\064" +
    "\063\001\002\000\024\044\037\052\047\053\044\067\046" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\046\003\uff56\026\uff56\035\071\036\057\037\061\040\065" +
    "\041\066\042\056\043\067\044\064\045\062\046\070\047" +
    "\060\050\055\051\072\062\uff56\063\uff56\064\063\001\002" +
    "\000\050\010\175\013\166\014\uff63\015\174\021\203\025" +
    "\205\026\173\030\161\031\171\044\037\052\047\053\044" +
    "\066\164\067\176\070\034\071\051\072\035\073\036\074" +
    "\043\001\002\000\004\014\u011d\001\002\000\004\026\u011e" +
    "\001\002\000\004\055\u011f\001\002\000\004\013\uff0d\001" +
    "\002\000\004\013\u0121\001\002\000\004\067\u0122\001\002" +
    "\000\004\003\u0123\001\002\000\024\044\uff0c\052\uff0c\053" +
    "\uff0c\067\uff0c\070\uff0c\071\uff0c\072\uff0c\073\uff0c\074\uff0c" +
    "\001\002\000\024\044\037\052\047\053\044\067\046\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\004" +
    "\026\u0126\001\002\000\050\010\175\013\166\014\uff63\015" +
    "\174\021\203\025\205\026\173\030\161\031\171\044\037" +
    "\052\047\053\044\066\164\067\176\070\034\071\051\072" +
    "\035\073\036\074\043\001\002\000\004\014\u0128\001\002" +
    "\000\004\026\u0129\001\002\000\004\055\u012a\001\002\000" +
    "\004\013\u012b\001\002\000\004\067\u012c\001\002\000\004" +
    "\024\u012d\001\002\000\024\044\037\052\047\053\044\067" +
    "\046\070\034\071\051\072\035\073\036\074\043\001\002" +
    "\000\004\003\u012f\001\002\000\050\010\uff0b\013\uff0b\014" +
    "\uff0b\015\uff0b\021\uff0b\025\uff0b\026\uff0b\030\uff0b\031\uff0b" +
    "\044\uff0b\052\uff0b\053\uff0b\066\uff0b\067\uff0b\070\uff0b\071" +
    "\uff0b\072\uff0b\073\uff0b\074\uff0b\001\002\000\050\010\175" +
    "\013\166\014\uff63\015\174\021\203\025\205\026\173\030" +
    "\161\031\171\044\037\052\047\053\044\066\164\067\176" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\004\014\u0132\001\002\000\004\026\u0133\001\002\000\004" +
    "\055\u0134\001\002\000\004\013\u0135\001\002\000\004\067" +
    "\u0136\001\002\000\004\024\u0137\001\002\000\024\044\037" +
    "\052\047\053\044\067\046\070\034\071\051\072\035\073" +
    "\036\074\043\001\002\000\004\026\u0139\001\002\000\050" +
    "\003\uff63\010\175\013\166\015\174\021\203\025\205\026" +
    "\173\030\161\031\171\044\037\052\047\053\044\066\164" +
    "\067\176\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\004\003\u013b\001\002\000\004\026\uff0a\001\002" +
    "\000\004\026\u013d\001\002\000\004\055\u013e\001\002\000" +
    "\004\013\u013f\001\002\000\004\067\u0140\001\002\000\004" +
    "\024\u0141\001\002\000\024\044\037\052\047\053\044\067" +
    "\046\070\034\071\051\072\035\073\036\074\043\001\002" +
    "\000\004\026\u0143\001\002\000\050\010\175\013\166\014" +
    "\uff63\015\174\021\203\025\205\026\173\030\161\031\171" +
    "\044\037\052\047\053\044\066\164\067\176\070\034\071" +
    "\051\072\035\073\036\074\043\001\002\000\004\014\u0145" +
    "\001\002\000\004\003\u0146\001\002\000\004\055\uff09\001" +
    "\002\000\004\055\u0148\001\002\000\004\013\u0149\001\002" +
    "\000\004\067\u014a\001\002\000\004\024\u014b\001\002\000" +
    "\024\044\037\052\047\053\044\067\046\070\034\071\051" +
    "\072\035\073\036\074\043\001\002\000\004\026\u014d\001" +
    "\002\000\050\010\175\013\166\014\uff63\015\174\021\203" +
    "\025\205\026\173\030\161\031\171\044\037\052\047\053" +
    "\044\066\164\067\176\070\034\071\051\072\035\073\036" +
    "\074\043\001\002\000\004\014\u014f\001\002\000\004\026" +
    "\u0150\001\002\000\004\003\u0151\001\002\000\060\003\uff08" +
    "\010\uff08\011\uff08\012\uff08\013\uff08\014\uff08\015\uff08\021" +
    "\uff08\023\uff08\025\uff08\026\uff08\030\uff08\031\uff08\044\uff08" +
    "\052\uff08\053\uff08\066\uff08\067\uff08\070\uff08\071\uff08\072" +
    "\uff08\073\uff08\074\uff08\001\002\000\042\003\u0153\032\u0154" +
    "\035\071\036\057\037\061\040\065\041\066\042\056\043" +
    "\067\044\064\045\062\046\070\047\060\050\055\051\072" +
    "\064\063\001\002\000\004\023\ufefc\001\002\000\004\023" +
    "\u0155\001\002\000\030\003\u0168\044\037\052\047\053\044" +
    "\065\u0164\067\046\070\034\071\051\072\035\073\036\074" +
    "\043\001\002\000\006\003\u0159\014\u015a\001\002\000\010" +
    "\003\ufef5\014\ufef5\023\u0155\001\002\000\006\003\ufef4\014" +
    "\ufef4\001\002\000\004\066\ufefa\001\002\000\006\003\u015b" +
    "\066\u015c\001\002\000\004\055\ufef8\001\002\000\006\003" +
    "\u015d\055\u015e\001\002\000\060\003\ufef6\010\ufef6\011\ufef6" +
    "\012\ufef6\013\ufef6\014\ufef6\015\ufef6\021\ufef6\023\ufef6\025" +
    "\ufef6\026\ufef6\030\ufef6\031\ufef6\044\ufef6\052\ufef6\053\ufef6" +
    "\066\ufef6\067\ufef6\070\ufef6\071\ufef6\072\ufef6\073\ufef6\074" +
    "\ufef6\001\002\000\060\003\ufefd\010\ufefd\011\ufefd\012\ufefd" +
    "\013\ufefd\014\ufefd\015\ufefd\021\ufefd\023\ufefd\025\ufefd\026" +
    "\ufefd\030\ufefd\031\ufefd\044\ufefd\052\ufefd\053\ufefd\066\ufefd" +
    "\067\ufefd\070\ufefd\071\ufefd\072\ufefd\073\ufefd\074\ufefd\001" +
    "\002\000\004\055\u0160\001\002\000\060\003\ufef7\010\ufef7" +
    "\011\ufef7\012\ufef7\013\ufef7\014\ufef7\015\ufef7\021\ufef7\023" +
    "\ufef7\025\ufef7\026\ufef7\030\ufef7\031\ufef7\044\ufef7\052\ufef7" +
    "\053\ufef7\066\ufef7\067\ufef7\070\ufef7\071\ufef7\072\ufef7\073" +
    "\ufef7\074\ufef7\001\002\000\004\066\u0162\001\002\000\004" +
    "\055\u0163\001\002\000\060\003\ufef9\010\ufef9\011\ufef9\012" +
    "\ufef9\013\ufef9\014\ufef9\015\ufef9\021\ufef9\023\ufef9\025\ufef9" +
    "\026\ufef9\030\ufef9\031\ufef9\044\ufef9\052\ufef9\053\ufef9\066" +
    "\ufef9\067\ufef9\070\ufef9\071\ufef9\072\ufef9\073\ufef9\074\ufef9" +
    "\001\002\000\006\003\u0174\063\u0175\001\002\000\046\003" +
    "\ufee9\035\071\036\057\037\061\040\065\041\066\042\056" +
    "\043\067\044\064\045\062\046\070\047\060\050\055\051" +
    "\072\056\u0119\062\ufee9\063\ufee9\064\063\001\002\000\010" +
    "\003\ufee8\062\ufee8\063\ufee8\001\002\000\010\003\ufeeb\062" +
    "\u0172\063\ufeeb\001\002\000\004\063\ufeef\001\002\000\006" +
    "\003\u016a\063\u016b\001\002\000\054\003\ufef2\010\ufef2\013" +
    "\ufef2\014\ufef2\015\ufef2\021\ufef2\023\ufef2\025\ufef2\026\ufef2" +
    "\030\ufef2\031\ufef2\044\ufef2\052\ufef2\053\ufef2\066\ufef2\067" +
    "\ufef2\070\ufef2\071\ufef2\072\ufef2\073\ufef2\074\ufef2\001\002" +
    "\000\054\003\uff63\010\175\013\166\014\uff63\015\174\021" +
    "\203\023\uff63\025\205\026\173\030\161\031\171\044\037" +
    "\052\047\053\044\066\164\067\176\070\034\071\051\072" +
    "\035\073\036\074\043\001\002\000\010\003\ufef3\014\ufef3" +
    "\023\ufef3\001\002\000\054\003\uff63\010\175\013\166\014" +
    "\uff63\015\174\021\203\023\uff63\025\205\026\173\030\161" +
    "\031\171\044\037\052\047\053\044\066\164\067\176\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\010" +
    "\003\ufef1\014\ufef1\023\ufef1\001\002\000\004\063\u0170\001" +
    "\002\000\054\003\uff63\010\175\013\166\014\uff63\015\174" +
    "\021\203\023\uff63\025\205\026\173\030\161\031\171\044" +
    "\037\052\047\053\044\066\164\067\176\070\034\071\051" +
    "\072\035\073\036\074\043\001\002\000\010\003\ufeee\014" +
    "\ufeee\023\ufeee\001\002\000\024\044\037\052\047\053\044" +
    "\067\046\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\006\003\ufeea\063\ufeea\001\002\000\054\003\ufeed" +
    "\010\ufeed\013\ufeed\014\ufeed\015\ufeed\021\ufeed\023\ufeed\025" +
    "\ufeed\026\ufeed\030\ufeed\031\ufeed\044\ufeed\052\ufeed\053\ufeed" +
    "\066\ufeed\067\ufeed\070\ufeed\071\ufeed\072\ufeed\073\ufeed\074" +
    "\ufeed\001\002\000\054\003\uff63\010\175\013\166\014\uff63" +
    "\015\174\021\203\023\uff63\025\205\026\173\030\161\031" +
    "\171\044\037\052\047\053\044\066\164\067\176\070\034" +
    "\071\051\072\035\073\036\074\043\001\002\000\010\003" +
    "\ufef0\014\ufef0\023\ufef0\001\002\000\054\003\uff63\010\175" +
    "\013\166\014\uff63\015\174\021\203\023\uff63\025\205\026" +
    "\173\030\161\031\171\044\037\052\047\053\044\066\164" +
    "\067\176\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\010\003\ufeec\014\ufeec\023\ufeec\001\002\000\004" +
    "\023\u0155\001\002\000\004\014\u017b\001\002\000\004\066" +
    "\u017c\001\002\000\004\055\u017d\001\002\000\060\003\ufefb" +
    "\010\ufefb\011\ufefb\012\ufefb\013\ufefb\014\ufefb\015\ufefb\021" +
    "\ufefb\023\ufefb\025\ufefb\026\ufefb\030\ufefb\031\ufefb\044\ufefb" +
    "\052\ufefb\053\ufefb\066\ufefb\067\ufefb\070\ufefb\071\ufefb\072" +
    "\ufefb\073\ufefb\074\ufefb\001\002\000\004\067\u017f\001\002" +
    "\000\004\055\u0180\001\002\000\014\003\uffdd\016\uffdd\020" +
    "\uffdd\033\uffdd\067\uffdd\001\002\000\024\044\uff3d\052\uff3d" +
    "\053\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d\073\uff3d\074" +
    "\uff3d\001\002\000\026\003\u0184\044\037\052\047\053\044" +
    "\067\046\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\042\003\u0188\035\071\036\057\037\061\040\065" +
    "\041\066\042\056\043\067\044\064\045\062\046\070\047" +
    "\060\050\055\051\072\054\u0189\064\063\001\002\000\004" +
    "\054\uff3b\001\002\000\004\054\u0186\001\002\000\004\055" +
    "\u0187\001\002\000\060\003\uff3a\010\uff3a\011\uff3a\012\uff3a" +
    "\013\uff3a\014\uff3a\015\uff3a\021\uff3a\023\uff3a\025\uff3a\026" +
    "\uff3a\030\uff3a\031\uff3a\044\uff3a\052\uff3a\053\uff3a\066\uff3a" +
    "\067\uff3a\070\uff3a\071\uff3a\072\uff3a\073\uff3a\074\uff3a\001" +
    "\002\000\004\055\uff39\001\002\000\006\003\u018a\055\u018b" +
    "\001\002\000\060\003\uff37\010\uff37\011\uff37\012\uff37\013" +
    "\uff37\014\uff37\015\uff37\021\uff37\023\uff37\025\uff37\026\uff37" +
    "\030\uff37\031\uff37\044\uff37\052\uff37\053\uff37\066\uff37\067" +
    "\uff37\070\uff37\071\uff37\072\uff37\073\uff37\074\uff37\001\002" +
    "\000\060\003\uff3e\010\uff3e\011\uff3e\012\uff3e\013\uff3e\014" +
    "\uff3e\015\uff3e\021\uff3e\023\uff3e\025\uff3e\026\uff3e\030\uff3e" +
    "\031\uff3e\044\uff3e\052\uff3e\053\uff3e\066\uff3e\067\uff3e\070" +
    "\uff3e\071\uff3e\072\uff3e\073\uff3e\074\uff3e\001\002\000\004" +
    "\055\u018d\001\002\000\060\003\uff38\010\uff38\011\uff38\012" +
    "\uff38\013\uff38\014\uff38\015\uff38\021\uff38\023\uff38\025\uff38" +
    "\026\uff38\030\uff38\031\uff38\044\uff38\052\uff38\053\uff38\066" +
    "\uff38\067\uff38\070\uff38\071\uff38\072\uff38\073\uff38\074\uff38" +
    "\001\002\000\024\044\037\052\047\053\044\067\046\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\040" +
    "\035\071\036\057\037\061\040\065\041\066\042\056\043" +
    "\067\044\064\045\062\046\070\047\060\050\055\051\072" +
    "\054\u0190\064\063\001\002\000\004\055\u0191\001\002\000" +
    "\060\003\uff3c\010\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c" +
    "\015\uff3c\021\uff3c\023\uff3c\025\uff3c\026\uff3c\030\uff3c\031" +
    "\uff3c\044\uff3c\052\uff3c\053\uff3c\066\uff3c\067\uff3c\070\uff3c" +
    "\071\uff3c\072\uff3c\073\uff3c\074\uff3c\001\002\000\012\004" +
    "\uff49\005\uff49\006\uff49\007\uff49\001\002\000\022\003\u0197" +
    "\004\151\005\154\006\155\007\152\017\u0199\024\u0194\027" +
    "\u0195\001\002\000\014\003\uff9a\004\uff9a\005\uff9a\006\uff9a" +
    "\007\uff9a\001\002\000\014\003\uff99\004\uff99\005\uff99\006" +
    "\uff99\007\uff99\001\002\000\014\003\u019f\004\151\005\154" +
    "\006\155\007\152\001\002\000\022\003\uff47\004\uffa3\005" +
    "\uffa3\006\uffa3\007\uffa3\034\uff47\054\uff47\055\uff47\001\002" +
    "\000\004\055\u019a\001\002\000\014\003\uff98\004\uff98\005" +
    "\uff98\006\uff98\007\uff98\001\002\000\012\003\uff4a\034\uff4a" +
    "\054\uff4a\055\uff4a\001\002\000\012\004\151\005\154\006" +
    "\155\007\152\001\002\000\004\034\u019d\001\002\000\024" +
    "\044\037\052\047\053\044\067\046\070\034\071\051\072" +
    "\035\073\036\074\043\001\002\000\044\003\uffa2\035\071" +
    "\036\057\037\061\040\065\041\066\042\056\043\067\044" +
    "\064\045\062\046\070\047\060\050\055\051\072\054\uffa2" +
    "\055\uffa2\064\063\001\002\000\012\003\uff9d\034\uffa1\054" +
    "\uff9d\055\uff9d\001\002\000\012\003\uff9e\034\u01a1\054\uff9e" +
    "\055\uff9e\001\002\000\026\003\u01a3\044\037\052\047\053" +
    "\044\067\046\070\034\071\051\072\035\073\036\074\043" +
    "\001\002\000\044\003\uffa4\035\071\036\057\037\061\040" +
    "\065\041\066\042\056\043\067\044\064\045\062\046\070" +
    "\047\060\050\055\051\072\054\uffa4\055\uffa4\064\063\001" +
    "\002\000\010\003\uff9f\054\uff9f\055\uff9f\001\002\000\004" +
    "\034\u01a5\001\002\000\024\044\037\052\047\053\044\067" +
    "\046\070\034\071\051\072\035\073\036\074\043\001\002" +
    "\000\044\003\uffa0\035\071\036\057\037\061\040\065\041" +
    "\066\042\056\043\067\044\064\045\062\046\070\047\060" +
    "\050\055\051\072\054\uffa0\055\uffa0\064\063\001\002\000" +
    "\012\004\151\005\154\006\155\007\152\001\002\000\004" +
    "\055\u01a9\001\002\000\012\003\uff48\034\uff48\054\uff48\055" +
    "\uff48\001\002\000\010\054\uffdc\055\uffdc\067\uffdc\001\002" +
    "\000\012\003\uffa5\054\uffa5\055\uffa5\067\013\001\002\000" +
    "\010\003\u01ad\054\u01ae\055\146\001\002\000\004\021\uffda" +
    "\001\002\000\006\003\u01af\021\u01b0\001\002\000\012\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\001\002\000\014\003\u01b1" +
    "\004\151\005\154\006\155\007\152\001\002\000\004\032" +
    "\uffcc\001\002\000\006\003\u01b3\032\u01b4\001\002\000\012" +
    "\016\uffd6\020\uffd6\033\uffca\067\uffd6\001\002\000\014\003" +
    "\u01b6\016\022\020\014\033\u01b7\067\013\001\002\000\006" +
    "\003\u01c9\033\u01ca\001\002\000\050\010\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\021\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8" +
    "\044\uffc8\052\uffc8\053\uffc8\066\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\001\002\000\052\003\uff63" +
    "\010\175\013\166\014\uff63\015\174\021\203\025\205\026" +
    "\173\030\161\031\171\044\037\052\047\053\044\066\164" +
    "\067\176\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\006\003\u01b9\014\u01ba\001\002\000\004\067\uffc6" +
    "\001\002\000\006\003\u01bc\067\u01bb\001\002\000\006\003" +
    "\u01bf\055\u01c0\001\002\000\004\055\uffc4\001\002\000\004" +
    "\055\u01be\001\002\000\014\003\uffc3\016\uffc3\020\uffc3\033" +
    "\uffc3\067\uffc3\001\002\000\014\003\uffc2\016\uffc2\020\uffc2" +
    "\033\uffc2\067\uffc2\001\002\000\014\003\uffcd\016\uffcd\020" +
    "\uffcd\033\uffcd\067\uffcd\001\002\000\004\067\u01c2\001\002" +
    "\000\004\055\u01c3\001\002\000\014\003\uffc5\016\uffc5\020" +
    "\uffc5\033\uffc5\067\uffc5\001\002\000\050\010\175\013\166" +
    "\014\uff63\015\174\021\203\025\205\026\173\030\161\031" +
    "\171\044\037\052\047\053\044\066\164\067\176\070\034" +
    "\071\051\072\035\073\036\074\043\001\002\000\004\014" +
    "\u01c6\001\002\000\004\067\u01c7\001\002\000\004\055\u01c8" +
    "\001\002\000\014\003\uffc7\016\uffc7\020\uffc7\033\uffc7\067" +
    "\uffc7\001\002\000\050\010\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\021\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4\044\uffd4\052" +
    "\uffd4\053\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\073\uffd4\074\uffd4\001\002\000\052\003\uff63\010\175\013" +
    "\166\014\uff63\015\174\021\203\025\205\026\173\030\161" +
    "\031\171\044\037\052\047\053\044\066\164\067\176\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\006" +
    "\003\u01cc\014\u01cd\001\002\000\004\067\uffd2\001\002\000" +
    "\006\003\u01cf\067\u01ce\001\002\000\006\003\u01d2\055\u01d3" +
    "\001\002\000\004\055\uffd0\001\002\000\004\055\u01d1\001" +
    "\002\000\014\003\uffcf\016\uffcf\020\uffcf\033\uffcf\067\uffcf" +
    "\001\002\000\014\003\uffce\016\uffce\020\uffce\033\uffce\067" +
    "\uffce\001\002\000\014\003\uffdf\016\uffdf\020\uffdf\033\uffdf" +
    "\067\uffdf\001\002\000\004\067\u01d5\001\002\000\004\055" +
    "\u01d6\001\002\000\014\003\uffd1\016\uffd1\020\uffd1\033\uffd1" +
    "\067\uffd1\001\002\000\050\010\175\013\166\014\uff63\015" +
    "\174\021\203\025\205\026\173\030\161\031\171\044\037" +
    "\052\047\053\044\066\164\067\176\070\034\071\051\072" +
    "\035\073\036\074\043\001\002\000\004\014\u01d9\001\002" +
    "\000\004\067\u01da\001\002\000\004\055\u01db\001\002\000" +
    "\014\003\uffd3\016\uffd3\020\uffd3\033\uffd3\067\uffd3\001\002" +
    "\000\004\033\u01e4\001\002\000\010\016\022\020\014\067" +
    "\013\001\002\000\004\033\u01df\001\002\000\050\010\175" +
    "\013\166\014\uff63\015\174\021\203\025\205\026\173\030" +
    "\161\031\171\044\037\052\047\053\044\066\164\067\176" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\004\014\u01e1\001\002\000\004\067\u01e2\001\002\000\004" +
    "\055\u01e3\001\002\000\014\003\uffd5\016\uffd5\020\uffd5\033" +
    "\uffd5\067\uffd5\001\002\000\050\010\175\013\166\014\uff63" +
    "\015\174\021\203\025\205\026\173\030\161\031\171\044" +
    "\037\052\047\053\044\066\164\067\176\070\034\071\051" +
    "\072\035\073\036\074\043\001\002\000\004\014\u01e6\001" +
    "\002\000\004\067\u01e7\001\002\000\004\055\u01e8\001\002" +
    "\000\014\003\uffc9\016\uffc9\020\uffc9\033\uffc9\067\uffc9\001" +
    "\002\000\004\032\u01ea\001\002\000\004\033\u01eb\001\002" +
    "\000\050\010\175\013\166\014\uff63\015\174\021\203\025" +
    "\205\026\173\030\161\031\171\044\037\052\047\053\044" +
    "\066\164\067\176\070\034\071\051\072\035\073\036\074" +
    "\043\001\002\000\004\014\u01ed\001\002\000\004\067\u01ee" +
    "\001\002\000\004\055\u01ef\001\002\000\014\003\uffcb\016" +
    "\uffcb\020\uffcb\033\uffcb\067\uffcb\001\002\000\012\004\151" +
    "\005\154\006\155\007\152\001\002\000\004\032\u01f2\001" +
    "\002\000\010\016\022\020\014\067\013\001\002\000\004" +
    "\033\u01f4\001\002\000\050\010\175\013\166\014\uff63\015" +
    "\174\021\203\025\205\026\173\030\161\031\171\044\037" +
    "\052\047\053\044\066\164\067\176\070\034\071\051\072" +
    "\035\073\036\074\043\001\002\000\004\014\u01f6\001\002" +
    "\000\004\067\u01f7\001\002\000\004\055\u01f8\001\002\000" +
    "\014\003\uffd7\016\uffd7\020\uffd7\033\uffd7\067\uffd7\001\002" +
    "\000\004\021\u01fa\001\002\000\012\004\151\005\154\006" +
    "\155\007\152\001\002\000\004\032\u01fc\001\002\000\010" +
    "\016\022\020\014\067\013\001\002\000\004\033\u01fe\001" +
    "\002\000\050\010\175\013\166\014\uff63\015\174\021\203" +
    "\025\205\026\173\030\161\031\171\044\037\052\047\053" +
    "\044\066\164\067\176\070\034\071\051\072\035\073\036" +
    "\074\043\001\002\000\004\014\u0200\001\002\000\004\067" +
    "\u0201\001\002\000\004\055\u0202\001\002\000\014\003\uffd9" +
    "\016\uffd9\020\uffd9\033\uffd9\067\uffd9\001\002\000\010\054" +
    "\uffa5\055\uffa5\067\013\001\002\000\006\054\u0205\055\146" +
    "\001\002\000\004\021\u0206\001\002\000\012\004\151\005" +
    "\154\006\155\007\152\001\002\000\004\032\u0208\001\002" +
    "\000\010\016\022\020\014\067\013\001\002\000\004\033" +
    "\u020a\001\002\000\050\010\175\013\166\014\uff63\015\174" +
    "\021\203\025\205\026\173\030\161\031\171\044\037\052" +
    "\047\053\044\066\164\067\176\070\034\071\051\072\035" +
    "\073\036\074\043\001\002\000\004\014\u020c\001\002\000" +
    "\004\067\u020d\001\002\000\004\055\u020e\001\002\000\014" +
    "\003\uffdb\016\uffdb\020\uffdb\033\uffdb\067\uffdb\001\002\000" +
    "\006\003\uffe0\033\uffe0\001\002\000\014\003\uffe1\016\022" +
    "\020\014\033\uffe1\067\013\001\002\000\006\003\uffe6\033" +
    "\uffe6\001\002\000\006\003\uffe5\033\uffe5\001\002\000\050" +
    "\010\175\013\166\014\uff63\015\174\021\203\025\205\026" +
    "\173\030\161\031\171\044\037\052\047\053\044\066\164" +
    "\067\176\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\004\014\u0215\001\002\000\004\067\u0216\001\002" +
    "\000\004\055\u0217\001\002\000\004\002\ufffe\001\002\000" +
    "\014\003\u0219\004\151\005\154\006\155\007\152\001\002" +
    "\000\006\003\uff47\055\uff47\001\002\000\006\003\uffe4\033" +
    "\uffe4\001\002\000\006\003\u0228\053\u0229\001\002\000\004" +
    "\053\uffc0\001\002\000\004\053\u021e\001\002\000\010\054" +
    "\uffa5\055\uffa5\067\013\001\002\000\006\054\u0220\055\146" +
    "\001\002\000\004\032\u0221\001\002\000\010\016\022\020" +
    "\014\067\013\001\002\000\004\033\u0223\001\002\000\050" +
    "\010\175\013\166\014\uff63\015\174\021\203\025\205\026" +
    "\173\030\161\031\171\044\037\052\047\053\044\066\164" +
    "\067\176\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\004\014\u0225\001\002\000\004\067\u0226\001\002" +
    "\000\004\055\u0227\001\002\000\014\003\uffbf\016\uffbf\020" +
    "\uffbf\033\uffbf\067\uffbf\001\002\000\010\054\uffbe\055\uffbe" +
    "\067\uffbe\001\002\000\012\003\uffa5\054\uffa5\055\uffa5\067" +
    "\013\001\002\000\010\003\u022b\054\u022c\055\146\001\002" +
    "\000\004\032\uffbc\001\002\000\006\003\u022d\032\u022e\001" +
    "\002\000\012\016\uffba\020\uffba\033\uffb0\067\uffba\001\002" +
    "\000\014\003\u0230\016\022\020\014\033\u0231\067\013\001" +
    "\002\000\006\003\u0243\033\u0244\001\002\000\050\010\uffae" +
    "\013\uffae\014\uffae\015\uffae\021\uffae\025\uffae\026\uffae\030" +
    "\uffae\031\uffae\044\uffae\052\uffae\053\uffae\066\uffae\067\uffae" +
    "\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\001\002\000" +
    "\052\003\uff63\010\175\013\166\014\uff63\015\174\021\203" +
    "\025\205\026\173\030\161\031\171\044\037\052\047\053" +
    "\044\066\164\067\176\070\034\071\051\072\035\073\036" +
    "\074\043\001\002\000\006\003\u0233\014\u0234\001\002\000" +
    "\004\067\uffac\001\002\000\006\003\u0236\067\u0235\001\002" +
    "\000\006\003\u0239\055\u023a\001\002\000\004\055\uffaa\001" +
    "\002\000\004\055\u0238\001\002\000\014\003\uffa9\016\uffa9" +
    "\020\uffa9\033\uffa9\067\uffa9\001\002\000\014\003\uffa8\016" +
    "\uffa8\020\uffa8\033\uffa8\067\uffa8\001\002\000\014\003\uffb1" +
    "\016\uffb1\020\uffb1\033\uffb1\067\uffb1\001\002\000\004\067" +
    "\u023c\001\002\000\004\055\u023d\001\002\000\014\003\uffab" +
    "\016\uffab\020\uffab\033\uffab\067\uffab\001\002\000\050\010" +
    "\175\013\166\014\uff63\015\174\021\203\025\205\026\173" +
    "\030\161\031\171\044\037\052\047\053\044\066\164\067" +
    "\176\070\034\071\051\072\035\073\036\074\043\001\002" +
    "\000\004\014\u0240\001\002\000\004\067\u0241\001\002\000" +
    "\004\055\u0242\001\002\000\014\003\uffad\016\uffad\020\uffad" +
    "\033\uffad\067\uffad\001\002\000\050\010\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\021\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8" +
    "\044\uffb8\052\uffb8\053\uffb8\066\uffb8\067\uffb8\070\uffb8\071" +
    "\uffb8\072\uffb8\073\uffb8\074\uffb8\001\002\000\052\003\uff63" +
    "\010\175\013\166\014\uff63\015\174\021\203\025\205\026" +
    "\173\030\161\031\171\044\037\052\047\053\044\066\164" +
    "\067\176\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\006\003\u0246\014\u0247\001\002\000\004\067\uffb6" +
    "\001\002\000\006\003\u0249\067\u0248\001\002\000\006\003" +
    "\u024c\055\u024d\001\002\000\004\055\uffb4\001\002\000\004" +
    "\055\u024b\001\002\000\014\003\uffb3\016\uffb3\020\uffb3\033" +
    "\uffb3\067\uffb3\001\002\000\014\003\uffb2\016\uffb2\020\uffb2" +
    "\033\uffb2\067\uffb2\001\002\000\014\003\uffc1\016\uffc1\020" +
    "\uffc1\033\uffc1\067\uffc1\001\002\000\004\067\u024f\001\002" +
    "\000\004\055\u0250\001\002\000\014\003\uffb5\016\uffb5\020" +
    "\uffb5\033\uffb5\067\uffb5\001\002\000\050\010\175\013\166" +
    "\014\uff63\015\174\021\203\025\205\026\173\030\161\031" +
    "\171\044\037\052\047\053\044\066\164\067\176\070\034" +
    "\071\051\072\035\073\036\074\043\001\002\000\004\014" +
    "\u0253\001\002\000\004\067\u0254\001\002\000\004\055\u0255" +
    "\001\002\000\014\003\uffb7\016\uffb7\020\uffb7\033\uffb7\067" +
    "\uffb7\001\002\000\004\033\u025e\001\002\000\010\016\022" +
    "\020\014\067\013\001\002\000\004\033\u0259\001\002\000" +
    "\050\010\175\013\166\014\uff63\015\174\021\203\025\205" +
    "\026\173\030\161\031\171\044\037\052\047\053\044\066" +
    "\164\067\176\070\034\071\051\072\035\073\036\074\043" +
    "\001\002\000\004\014\u025b\001\002\000\004\067\u025c\001" +
    "\002\000\004\055\u025d\001\002\000\014\003\uffb9\016\uffb9" +
    "\020\uffb9\033\uffb9\067\uffb9\001\002\000\050\010\175\013" +
    "\166\014\uff63\015\174\021\203\025\205\026\173\030\161" +
    "\031\171\044\037\052\047\053\044\066\164\067\176\070" +
    "\034\071\051\072\035\073\036\074\043\001\002\000\004" +
    "\014\u0260\001\002\000\004\067\u0261\001\002\000\004\055" +
    "\u0262\001\002\000\014\003\uffaf\016\uffaf\020\uffaf\033\uffaf" +
    "\067\uffaf\001\002\000\004\032\u0264\001\002\000\010\016" +
    "\022\020\014\067\013\001\002\000\004\033\u0266\001\002" +
    "\000\050\010\175\013\166\014\uff63\015\174\021\203\025" +
    "\205\026\173\030\161\031\171\044\037\052\047\053\044" +
    "\066\164\067\176\070\034\071\051\072\035\073\036\074" +
    "\043\001\002\000\004\014\u0268\001\002\000\004\067\u0269" +
    "\001\002\000\004\055\u026a\001\002\000\014\003\uffbb\016" +
    "\uffbb\020\uffbb\033\uffbb\067\uffbb\001\002\000\010\054\uffa5" +
    "\055\uffa5\067\013\001\002\000\006\054\u026d\055\146\001" +
    "\002\000\004\032\u026e\001\002\000\010\016\022\020\014" +
    "\067\013\001\002\000\004\033\u0270\001\002\000\050\010" +
    "\175\013\166\014\uff63\015\174\021\203\025\205\026\173" +
    "\030\161\031\171\044\037\052\047\053\044\066\164\067" +
    "\176\070\034\071\051\072\035\073\036\074\043\001\002" +
    "\000\004\014\u0272\001\002\000\004\067\u0273\001\002\000" +
    "\004\055\u0274\001\002\000\014\003\uffbd\016\uffbd\020\uffbd" +
    "\033\uffbd\067\uffbd\001\002\000\006\003\u0277\067\013\001" +
    "\002\000\006\003\uff54\060\uff54\001\002\000\006\003\uff53" +
    "\060\uff53\001\002\000\012\016\ufffd\020\ufffd\033\ufff0\067" +
    "\ufffd\001\002\000\014\003\u027b\016\022\020\014\033\u027c" +
    "\067\013\001\002\000\006\003\u0294\033\u0295\001\002\000" +
    "\052\010\uffee\013\uffee\014\uffee\015\uffee\021\uffee\025\uffee" +
    "\026\uffee\030\uffee\031\uffee\033\ufffb\044\uffee\052\uffee\053" +
    "\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\001\002\000\052\003\uff63\010\175\013\166\014" +
    "\uff63\015\174\021\203\025\205\026\173\030\161\031\171" +
    "\044\037\052\047\053\044\066\164\067\176\070\034\071" +
    "\051\072\035\073\036\074\043\001\002\000\006\003\u027e" +
    "\014\u027f\001\002\000\004\067\uffec\001\002\000\006\003" +
    "\u0281\067\u0280\001\002\000\006\003\u0284\055\u0285\001\002" +
    "\000\004\055\uffea\001\002\000\004\055\u0283\001\002\000" +
    "\004\002\uffe9\001\002\000\004\002\uffe8\001\002\000\004" +
    "\002\ufff1\001\002\000\004\067\u0287\001\002\000\004\055" +
    "\u0288\001\002\000\004\002\uffeb\001\002\000\004\033\u028f" +
    "\001\002\000\050\010\175\013\166\014\uff63\015\174\021" +
    "\203\025\205\026\173\030\161\031\171\044\037\052\047" +
    "\053\044\066\164\067\176\070\034\071\051\072\035\073" +
    "\036\074\043\001\002\000\004\014\u028c\001\002\000\004" +
    "\067\u028d\001\002\000\004\055\u028e\001\002\000\004\002" +
    "\uffed\001\002\000\050\010\175\013\166\014\uff63\015\174" +
    "\021\203\025\205\026\173\030\161\031\171\044\037\052" +
    "\047\053\044\066\164\067\176\070\034\071\051\072\035" +
    "\073\036\074\043\001\002\000\004\014\u0291\001\002\000" +
    "\004\067\u0292\001\002\000\004\055\u0293\001\002\000\004" +
    "\002\ufffa\001\002\000\050\010\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\021\ufff9\025\ufff9\026\ufff9\030\ufff9\031\ufff9\044\ufff9" +
    "\052\ufff9\053\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\001\002\000\052\003\uff63\010\175" +
    "\013\166\014\uff63\015\174\021\203\025\205\026\173\030" +
    "\161\031\171\044\037\052\047\053\044\066\164\067\176" +
    "\070\034\071\051\072\035\073\036\074\043\001\002\000" +
    "\006\003\u0297\014\u0298\001\002\000\004\067\ufff7\001\002" +
    "\000\006\003\u029a\067\u0299\001\002\000\006\003\u029d\055" +
    "\u029e\001\002\000\004\055\ufff5\001\002\000\004\055\u029c" +
    "\001\002\000\004\002\ufff4\001\002\000\004\002\ufff3\001" +
    "\002\000\006\002\001\003\u029f\001\002\000\004\002\ufff2" +
    "\001\002\000\004\067\u02a1\001\002\000\004\055\u02a2\001" +
    "\002\000\004\002\ufff6\001\002\000\050\010\175\013\166" +
    "\014\uff63\015\174\021\203\025\205\026\173\030\161\031" +
    "\171\044\037\052\047\053\044\066\164\067\176\070\034" +
    "\071\051\072\035\073\036\074\043\001\002\000\004\014" +
    "\u02a5\001\002\000\004\067\u02a6\001\002\000\004\055\u02a7" +
    "\001\002\000\004\002\ufff8\001\002\000\010\016\022\020" +
    "\014\067\013\001\002\000\004\033\u02aa\001\002\000\050" +
    "\010\175\013\166\014\uff63\015\174\021\203\025\205\026" +
    "\173\030\161\031\171\044\037\052\047\053\044\066\164" +
    "\067\176\070\034\071\051\072\035\073\036\074\043\001" +
    "\002\000\004\014\u02ac\001\002\000\004\067\u02ad\001\002" +
    "\000\004\055\u02ae\001\002\000\004\002\uffef\001\002\000" +
    "\004\033\u02b0\001\002\000\050\010\175\013\166\014\uff63" +
    "\015\174\021\203\025\205\026\173\030\161\031\171\044" +
    "\037\052\047\053\044\066\164\067\176\070\034\071\051" +
    "\072\035\073\036\074\043\001\002\000\004\014\u02b2\001" +
    "\002\000\004\067\u02b3\001\002\000\004\055\u02b4\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02b3\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\010\001\001\000\002\001\001\000\014\015\015\020" +
    "\020\037\016\040\017\041\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\015\020\020\037\u0219\040" +
    "\017\041\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\015\020\020\037\u0211\040\017\041\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\024\001\001\000\002\001\001\000\012\015" +
    "\026\020\030\042\027\043\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\044\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\142\004\051\005\041\006\047\007\037" +
    "\011\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\137\004\051" +
    "\005\041\006\047\007\037\011\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\052\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\124\004\051\005\041\006\047\007" +
    "\037\011\040\001\001\000\016\003\122\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\016\003\120\004" +
    "\051\005\041\006\047\007\037\011\040\001\001\000\016" +
    "\003\116\004\051\005\041\006\047\007\037\011\040\001" +
    "\001\000\016\003\114\004\051\005\041\006\047\007\037" +
    "\011\040\001\001\000\016\003\112\004\051\005\041\006" +
    "\047\007\037\011\040\001\001\000\016\003\110\004\051" +
    "\005\041\006\047\007\037\011\040\001\001\000\016\003" +
    "\106\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\016\003\104\004\051\005\041\006\047\007\037\011" +
    "\040\001\001\000\016\003\102\004\051\005\041\006\047" +
    "\007\037\011\040\001\001\000\016\003\100\004\051\005" +
    "\041\006\047\007\037\011\040\001\001\000\016\003\076" +
    "\004\051\005\041\006\047\007\037\011\040\001\001\000" +
    "\016\003\074\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\016\003\072\004\051\005\041\006\047\007" +
    "\037\011\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\131\004\051\005\041\006\047\007\037\010" +
    "\127\011\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\131\004" +
    "\051\005\041\006\047\007\037\010\134\011\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\026\020\030\043\146\001\001\000\002\001\001\000\004" +
    "\016\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\015\020\020\037\156\040\017\041\014\001\001\000" +
    "\002\001\001\000\046\003\176\004\051\005\041\006\047" +
    "\007\037\011\040\012\161\013\201\017\171\021\205\022" +
    "\206\025\167\026\162\027\166\030\164\031\200\032\177" +
    "\045\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\u0151\004\051\005\041\006\047" +
    "\007\037\011\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\176\004\051\005\041\006" +
    "\047\007\037\011\040\012\367\013\201\017\171\021\205" +
    "\022\206\025\167\026\162\027\166\030\164\031\200\032" +
    "\177\045\203\001\001\000\002\001\001\000\016\003\250" +
    "\004\051\005\041\006\047\007\037\011\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\176\004\051\005\041\006\047\007" +
    "\037\011\040\012\236\013\201\017\171\021\205\022\206" +
    "\025\167\026\162\027\166\030\164\031\200\032\177\045" +
    "\203\001\001\000\016\003\233\004\051\005\041\006\047" +
    "\007\037\011\040\001\001\000\002\001\001\000\016\003" +
    "\207\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\176\004\051\005\041\006\047\007\037\011\040" +
    "\012\217\013\201\017\171\021\205\022\206\025\167\026" +
    "\162\027\166\030\164\031\200\032\177\045\203\001\001" +
    "\000\004\135\212\001\001\000\046\003\176\004\051\005" +
    "\041\006\047\007\037\011\040\012\213\013\201\017\171" +
    "\021\205\022\206\025\167\026\162\027\166\030\164\031" +
    "\200\032\177\045\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\136\230\001\001\000\002\001\001\000\004" +
    "\137\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\242\004" +
    "\051\005\041\006\047\007\037\011\040\001\001\000\002" +
    "\001\001\000\004\112\244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\176\004\051\005\041\006\047\007" +
    "\037\011\040\012\260\013\201\017\171\021\205\022\206" +
    "\025\167\026\162\027\166\030\164\031\200\032\177\045" +
    "\203\001\001\000\004\124\253\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\254\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\265\024\263\001\001\000\004\125\354\001" +
    "\001\000\046\003\176\004\051\005\041\006\047\007\037" +
    "\011\040\012\340\013\201\017\171\021\205\022\206\025" +
    "\167\026\162\027\166\030\164\031\200\032\177\045\203" +
    "\001\001\000\006\023\337\024\263\001\001\000\016\003" +
    "\325\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\126\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\131\322\001" +
    "\001\000\046\003\176\004\051\005\041\006\047\007\037" +
    "\011\040\012\306\013\201\017\171\021\205\022\206\025" +
    "\167\026\162\027\166\030\164\031\200\032\177\045\203" +
    "\001\001\000\002\001\001\000\004\132\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\133" +
    "\317\001\001\000\002\001\001\000\004\134\315\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\122\327" +
    "\001\001\000\002\001\001\000\046\003\176\004\051\005" +
    "\041\006\047\007\037\011\040\012\331\013\201\017\171" +
    "\021\205\022\206\025\167\026\162\027\166\030\164\031" +
    "\200\032\177\045\203\001\001\000\002\001\001\000\046" +
    "\003\176\004\051\005\041\006\047\007\037\011\040\012" +
    "\336\013\201\017\171\021\205\022\206\025\167\026\162" +
    "\027\166\030\164\031\200\032\177\045\203\001\001\000" +
    "\004\123\334\001\001\000\046\003\176\004\051\005\041" +
    "\006\047\007\037\011\040\012\335\013\201\017\171\021" +
    "\205\022\206\025\167\026\162\027\166\030\164\031\200" +
    "\032\177\045\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\127\351" +
    "\001\001\000\002\001\001\000\004\130\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\145\364\001\001\000\016\003" +
    "\361\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\365\004\051\005\041\006\047\007\037\011\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\146\u0100\001\001\000\002\001\001\000\004" +
    "\147\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\114" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\115\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\116\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\u0117\004\051\005\041\006\047\007\037\011\040\014\u0116" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\u0119\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\002\001\001\000\046\003\176\004\051\005\041\006" +
    "\047\007\037\011\040\012\u011b\013\201\017\171\021\205" +
    "\022\206\025\167\026\162\027\166\030\164\031\200\032" +
    "\177\045\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\140\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\141\u0123" +
    "\001\001\000\020\003\u0117\004\051\005\041\006\047\007" +
    "\037\011\040\014\u0124\001\001\000\002\001\001\000\046" +
    "\003\176\004\051\005\041\006\047\007\037\011\040\012" +
    "\u0126\013\201\017\171\021\205\022\206\025\167\026\162" +
    "\027\166\030\164\031\200\032\177\045\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\u0117\004\051\005\041\006\047\007\037\011\040\014\u012d" +
    "\001\001\000\002\001\001\000\004\142\u012f\001\001\000" +
    "\046\003\176\004\051\005\041\006\047\007\037\011\040" +
    "\012\u0130\013\201\017\171\021\205\022\206\025\167\026" +
    "\162\027\166\030\164\031\200\032\177\045\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\u0117\004\051\005\041\006\047\007\037\011\040\014" +
    "\u0137\001\001\000\002\001\001\000\046\003\176\004\051" +
    "\005\041\006\047\007\037\011\040\012\u0139\013\201\017" +
    "\171\021\205\022\206\025\167\026\162\027\166\030\164" +
    "\031\200\032\177\045\203\001\001\000\002\001\001\000" +
    "\004\143\u013b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\u0117\004\051\005\041\006\047\007\037\011\040" +
    "\014\u0141\001\001\000\002\001\001\000\046\003\176\004" +
    "\051\005\041\006\047\007\037\011\040\012\u0143\013\201" +
    "\017\171\021\205\022\206\025\167\026\162\027\166\030" +
    "\164\031\200\032\177\045\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\144\u0146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\u0117\004\051\005\041\006\047\007\037\011" +
    "\040\014\u014b\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\u014d\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\150\u0178\001\001\000\006\033" +
    "\u0156\034\u0155\001\001\000\024\003\u0164\004\051\005\041" +
    "\006\047\007\037\011\040\014\u0165\035\u0168\036\u0166\001" +
    "\001\000\002\001\001\000\006\033\u0156\034\u0157\001\001" +
    "\000\002\001\001\000\004\151\u0160\001\001\000\002\001" +
    "\001\000\004\152\u015e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\154\u016e\001\001\000\002\001\001" +
    "\000\004\153\u016c\001\001\000\046\003\176\004\051\005" +
    "\041\006\047\007\037\011\040\012\u016b\013\201\017\171" +
    "\021\205\022\206\025\167\026\162\027\166\030\164\031" +
    "\200\032\177\045\203\001\001\000\002\001\001\000\046" +
    "\003\176\004\051\005\041\006\047\007\037\011\040\012" +
    "\u016d\013\201\017\171\021\205\022\206\025\167\026\162" +
    "\027\166\030\164\031\200\032\177\045\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\176\004\051" +
    "\005\041\006\047\007\037\011\040\012\u0170\013\201\017" +
    "\171\021\205\022\206\025\167\026\162\027\166\030\164" +
    "\031\200\032\177\045\203\001\001\000\002\001\001\000" +
    "\024\003\u0164\004\051\005\041\006\047\007\037\011\040" +
    "\014\u0165\035\u0172\036\u0166\001\001\000\002\001\001\000" +
    "\004\155\u0176\001\001\000\046\003\176\004\051\005\041" +
    "\006\047\007\037\011\040\012\u0175\013\201\017\171\021" +
    "\205\022\206\025\167\026\162\027\166\030\164\031\200" +
    "\032\177\045\203\001\001\000\002\001\001\000\046\003" +
    "\176\004\051\005\041\006\047\007\037\011\040\012\u0177" +
    "\013\201\017\171\021\205\022\206\025\167\026\162\027" +
    "\166\030\164\031\200\032\177\045\203\001\001\000\002" +
    "\001\001\000\006\033\u0156\034\u0179\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\117\u018d\001\001\000\016\003\u0182\004\051\005\041" +
    "\006\047\007\037\011\040\001\001\000\002\001\001\000" +
    "\004\120\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\u018b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\u018e\004\051\005\041\006" +
    "\047\007\037\011\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u01a6\001\001\000" +
    "\006\016\u0197\044\u0195\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u019f\001\001\000\004\110\u019a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u019b\001\001\000\002\001\001\000\016\003" +
    "\u019d\004\051\005\041\006\047\007\037\011\040\001\001" +
    "\000\002\001\001\000\004\111\u01a3\001\001\000\002\001" +
    "\001\000\016\003\u01a1\004\051\005\041\006\047\007\037" +
    "\011\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\u01a5\004\051\005\041\006\047" +
    "\007\037\011\040\001\001\000\002\001\001\000\004\016" +
    "\u01a7\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\u0202\001\001\000\012\015\026\020\030\042\u01ab\043" +
    "\031\001\001\000\002\001\001\000\004\062\u01f8\001\001" +
    "\000\002\001\001\000\004\063\u01ef\001\001\000\004\016" +
    "\u01b1\001\001\000\004\070\u01e8\001\001\000\002\001\001" +
    "\000\006\064\u01dc\071\u01db\001\001\000\014\015\015\020" +
    "\020\037\u01b4\040\017\041\014\001\001\000\002\001\001" +
    "\000\004\072\u01c3\001\001\000\046\003\176\004\051\005" +
    "\041\006\047\007\037\011\040\012\u01b7\013\201\017\171" +
    "\021\205\022\206\025\167\026\162\027\166\030\164\031" +
    "\200\032\177\045\203\001\001\000\002\001\001\000\004" +
    "\073\u01c0\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\074\u01bc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\176\004\051" +
    "\005\041\006\047\007\037\011\040\012\u01c4\013\201\017" +
    "\171\021\205\022\206\025\167\026\162\027\166\030\164" +
    "\031\200\032\177\045\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\u01d6\001\001\000\046\003\176\004\051\005\041\006" +
    "\047\007\037\011\040\012\u01ca\013\201\017\171\021\205" +
    "\022\206\025\167\026\162\027\166\030\164\031\200\032" +
    "\177\045\203\001\001\000\002\001\001\000\004\066\u01d3" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\u01cf\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\176\004\051\005\041" +
    "\006\047\007\037\011\040\012\u01d7\013\201\017\171\021" +
    "\205\022\206\025\167\026\162\027\166\030\164\031\200" +
    "\032\177\045\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\015\015\020\020\037\u01dd\040\017\041\014\001" +
    "\001\000\002\001\001\000\046\003\176\004\051\005\041" +
    "\006\047\007\037\011\040\012\u01df\013\201\017\171\021" +
    "\205\022\206\025\167\026\162\027\166\030\164\031\200" +
    "\032\177\045\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\u01e4\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\176\004" +
    "\051\005\041\006\047\007\037\011\040\012\u01eb\013\201" +
    "\017\171\021\205\022\206\025\167\026\162\027\166\030" +
    "\164\031\200\032\177\045\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u01f0\001\001\000\002\001\001\000\014\015\015" +
    "\020\020\037\u01f2\040\017\041\014\001\001\000\002\001" +
    "\001\000\046\003\176\004\051\005\041\006\047\007\037" +
    "\011\040\012\u01f4\013\201\017\171\021\205\022\206\025" +
    "\167\026\162\027\166\030\164\031\200\032\177\045\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u01fa" +
    "\001\001\000\002\001\001\000\014\015\015\020\020\037" +
    "\u01fc\040\017\041\014\001\001\000\002\001\001\000\046" +
    "\003\176\004\051\005\041\006\047\007\037\011\040\012" +
    "\u01fe\013\201\017\171\021\205\022\206\025\167\026\162" +
    "\027\166\030\164\031\200\032\177\045\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\026\020\030\042\u0203\043\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u0206" +
    "\001\001\000\002\001\001\000\014\015\015\020\020\037" +
    "\u0208\040\017\041\014\001\001\000\002\001\001\000\046" +
    "\003\176\004\051\005\041\006\047\007\037\011\040\012" +
    "\u020a\013\201\017\171\021\205\022\206\025\167\026\162" +
    "\027\166\030\164\031\200\032\177\045\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\015\020\020\037" +
    "\u0210\040\017\041\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\176\004\051\005\041\006\047\007" +
    "\037\011\040\012\u0213\013\201\017\171\021\205\022\206" +
    "\025\167\026\162\027\166\030\164\031\200\032\177\045" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u0197\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\u021c\001\001\000\002\001\001\000\012\015\026\020" +
    "\030\042\u021e\043\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\015\015\020\020\037\u0221\040\017\041" +
    "\014\001\001\000\002\001\001\000\046\003\176\004\051" +
    "\005\041\006\047\007\037\011\040\012\u0223\013\201\017" +
    "\171\021\205\022\206\025\167\026\162\027\166\030\164" +
    "\031\200\032\177\045\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\076\u026a\001\001\000\012\015\026\020\030\042\u0229\043" +
    "\031\001\001\000\002\001\001\000\004\077\u0262\001\001" +
    "\000\002\001\001\000\006\100\u0256\104\u0255\001\001\000" +
    "\014\015\015\020\020\037\u022e\040\017\041\014\001\001" +
    "\000\002\001\001\000\004\105\u023d\001\001\000\046\003" +
    "\176\004\051\005\041\006\047\007\037\011\040\012\u0231" +
    "\013\201\017\171\021\205\022\206\025\167\026\162\027" +
    "\166\030\164\031\200\032\177\045\203\001\001\000\002" +
    "\001\001\000\004\106\u023a\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\u0236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\176\004\051\005\041\006\047\007\037\011\040\012" +
    "\u023e\013\201\017\171\021\205\022\206\025\167\026\162" +
    "\027\166\030\164\031\200\032\177\045\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\u0250\001\001\000\046\003\176\004" +
    "\051\005\041\006\047\007\037\011\040\012\u0244\013\201" +
    "\017\171\021\205\022\206\025\167\026\162\027\166\030" +
    "\164\031\200\032\177\045\203\001\001\000\002\001\001" +
    "\000\004\102\u024d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\103\u0249\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\u0251\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\015\020\020\037\u0257\040" +
    "\017\041\014\001\001\000\002\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\u0259\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\176\004\051\005\041\006\047\007\037\011" +
    "\040\012\u025e\013\201\017\171\021\205\022\206\025\167" +
    "\026\162\027\166\030\164\031\200\032\177\045\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\015\020" +
    "\020\037\u0264\040\017\041\014\001\001\000\002\001\001" +
    "\000\046\003\176\004\051\005\041\006\047\007\037\011" +
    "\040\012\u0266\013\201\017\171\021\205\022\206\025\167" +
    "\026\162\027\166\030\164\031\200\032\177\045\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\026\020\030\042\u026b\043" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\015\020\020\037\u026e\040\017\041\014\001\001\000" +
    "\002\001\001\000\046\003\176\004\051\005\041\006\047" +
    "\007\037\011\040\012\u0270\013\201\017\171\021\205\022" +
    "\206\025\167\026\162\027\166\030\164\031\200\032\177" +
    "\045\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0275\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\u02a7\054" +
    "\u02a8\001\001\000\014\015\015\020\020\037\u0279\040\017" +
    "\041\014\001\001\000\002\001\001\000\006\050\u0288\055" +
    "\u0289\001\001\000\046\003\176\004\051\005\041\006\047" +
    "\007\037\011\040\012\u027c\013\201\017\171\021\205\022" +
    "\206\025\167\026\162\027\166\030\164\031\200\032\177" +
    "\045\203\001\001\000\002\001\001\000\004\056\u0285\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u0281" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\176\004" +
    "\051\005\041\006\047\007\037\011\040\012\u028a\013\201" +
    "\017\171\021\205\022\206\025\167\026\162\027\166\030" +
    "\164\031\200\032\177\045\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\176\004\051\005\041\006\047\007\037\011\040" +
    "\012\u028f\013\201\017\171\021\205\022\206\025\167\026" +
    "\162\027\166\030\164\031\200\032\177\045\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\u02a2\001\001\000\046\003\176" +
    "\004\051\005\041\006\047\007\037\011\040\012\u0295\013" +
    "\201\017\171\021\205\022\206\025\167\026\162\027\166" +
    "\030\164\031\200\032\177\045\203\001\001\000\002\001" +
    "\001\000\004\052\u029f\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\u029a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\176\004\051\005\041\006\047\007\037" +
    "\011\040\012\u02a3\013\201\017\171\021\205\022\206\025" +
    "\167\026\162\027\166\030\164\031\200\032\177\045\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\015\015\020\020\037\u02ae" +
    "\040\017\041\014\001\001\000\002\001\001\000\046\003" +
    "\176\004\051\005\041\006\047\007\037\011\040\012\u02aa" +
    "\013\201\017\171\021\205\022\206\025\167\026\162\027" +
    "\166\030\164\031\200\032\177\045\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\176\004\051\005\041" +
    "\006\047\007\037\011\040\012\u02b0\013\201\017\171\021" +
    "\205\022\206\025\167\026\162\027\166\030\164\031\200" +
    "\032\177\045\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/*	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line " + (s.left + 1));   
				if (s.right >= 0){
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}
*/
	@Override
	public void report_error(String message, Object info) {
		if (info instanceof String){
			//System.err.println("  " + info + " "+ message + "\n       Parsing resumed from 2nd token before" + s.current_lexeme() + "\n");
			System.err.println("  " + info + " "+ message + "\n");
		} else {
			StringBuffer m = new StringBuffer("Error ");
			if (info instanceof java_cup.runtime.Symbol){
				m.append( "(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea " + (((Symbol)info).left + 1) + ", columna" + (((Symbol)info).right + 1) + ")" );
			}
			m.append(" : " + message);
			System.err.println(m);
		}
	}
	@Override
	public void syntax_error(Symbol s){
		System.err.println( "(Se ha encontrado el token \"" + sym.terminalNames[s.sym] + "\" en la linea " + (s.left+1) + ", columna" + (s.right+1) + ")" ); 
                seEsperaba();
	}

	public void seEsperaba(){
		List<Integer> listaTokens = this.expected_token_ids();
		if (listaTokens.size() <= 0){
			listaTokens = this.expected_token_ids();
		}
		String cadenaTokensEsperados = "";
		for (int i = 0 ; i < listaTokens.size(); i++){
			int id = listaTokens.get(i);
			if (id == 1){
				continue;
			}
			String nombreTerminal = sym.terminalNames[id];
			if (i == listaTokens.size() - 1){
				cadenaTokensEsperados += nombreTerminal;
			}else{
				cadenaTokensEsperados += nombreTerminal + " or ";
			}
		}
		System.err.print("Se esperaba " + cadenaTokensEsperados);
	};

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,dp,s,identifier2);
											try {
												ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
												xmlConverter.toXML();
												System.out.println("Se ha generado el arbol");
											} catch(Exception e){
												System.out.println(e.getMessage());
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
parser.report_error("Programa principal: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= PROCEDURE error NT$0 IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= PROCEDURE ID error NT$1 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaban declaraciones","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // program ::= PROCEDURE ID IS error NT$2 BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program ::= PROCEDURE ID IS declaration_part error NT$3 statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // program ::= PROCEDURE ID IS declaration_part BEGIN statements error NT$4 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END error NT$5 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal: Se esperaba ;","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("Programa principal: Simbolo no esperado","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // program ::= PROCEDURE ID IS BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,s,identifier2);
											try {
												ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
												xmlConverter.toXML();
												System.out.println("Se ha generado el arbol");
											} catch(Exception e){
												System.out.println(e.getMessage());
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$6 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // program ::= PROCEDURE ID error NT$6 BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$7 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // program ::= PROCEDURE ID IS error NT$7 statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba END","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // program ::= PROCEDURE ID IS BEGIN statements error NT$8 ID PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Programa principal sin declaraciones: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // program ::= PROCEDURE ID IS BEGIN statements END error NT$9 PUNTOCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // program ::= PROCEDURE ID IS BEGIN statements END ID error 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Programa principal sin declaraciones: Se esperaba \";\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // program ::= error 
            {
              Object RESULT =null;
		parser.report_error("Programa principal: Se esperaba Procedure","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_part ::= variable_declaration PUNTOCOMA declaration_part 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											dp.add(vd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_part ::= function_declaration declaration_part 
            {
              DeclarationPart RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											dp.add(fd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaration_part ::= procedure_declaration declaration_part 
            {
              DeclarationPart RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcedureDeclaration pd = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
											dp.add(pd);
											RESULT = dp;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaration_part ::= function_declaration 
            {
              DeclarationPart RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDeclaration fd = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(fd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaration_part ::= procedure_declaration 
            {
              DeclarationPart RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcedureDeclaration pd = (ProcedureDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(pd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaration_part ::= variable_declaration PUNTOCOMA 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											RESULT = new DeclarationPart();
											RESULT.add(vd);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaration_part ::= variable_declaration error 
            {
              DeclarationPart RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,dp,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$10 ::= 
            {
              FunctionDeclaration RESULT =null;
parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_declaration ::= FUNCTION error NT$10 PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$11 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba \"(\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_declaration ::= FUNCTION ID error NT$11 parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$12 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba\")\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations error NT$12 RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$13 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion: Se esperaba Return","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER error NT$13 variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$14 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba IS","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type error NT$14 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$15 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part error NT$15 statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$16 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion: Se esperaba End","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements error NT$16 ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$17 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END error NT$17 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$18 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba un tipo ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN error NT$18 IS BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$19 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba IS","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type error NT$19 BEGIN statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$20 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS error NT$20 statements END ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$21 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba END","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements error NT$21 ID PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$22 ::= 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END error NT$22 PUNTOCOMA 
            {
              FunctionDeclaration RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (FunctionDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // function_declaration ::= FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS BEGIN statements END ID error 
            {
              FunctionDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de funcion: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,dp,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$23 ::= 
            {
              ProcedureDeclaration RESULT =null;
parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // procedure_declaration ::= PROCEDURE error NT$23 PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$24 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba  \"(\"","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // procedure_declaration ::= PROCEDURE ID error NT$24 parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$25 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba\")\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations error NT$25 IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$26 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Is","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$26",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER error NT$26 declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$27 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba Begin","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$27",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part error NT$27 statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$28 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba End","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$28",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements error NT$28 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$29 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$29",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END error NT$29 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		DeclarationPart dp = (DeclarationPart)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento: Se esperaba\";\"","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,s,identifier2); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$30 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba IS","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$30",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER error NT$30 BEGIN statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$31 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba Begin","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$31",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS error NT$31 statements END ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$32 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba End","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$32",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements error NT$32 ID PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$33 ::= 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba ID","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$33",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END error NT$33 PUNTOCOMA 
            {
              ProcedureDeclaration RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (ProcedureDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // procedure_declaration ::= PROCEDURE ID PARIZQ parameter_declarations PARDER IS BEGIN statements END ID error 
            {
              ProcedureDeclaration RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba \";\" ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameter_declarations ::= parameter 
            {
              ParameterDeclarations RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParameterDeclarations(); RESULT.add(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter_declarations ::= parameter_declarations PUNTOCOMA parameter 
            {
              ParameterDeclarations RESULT =null;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParameterDeclarations pds = (ParameterDeclarations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											pds.add(p);
											RESULT = pds;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter_declarations ::= 
            {
              ParameterDeclarations RESULT =null;
		 RESULT = new ParameterDeclarations(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parameter ::= variable_ids DOSPUNTOS mode variable_type OPERASIG expression 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vids,m,vtype,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$34 ::= 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
parser.report_error("parameter: Se esperaba un modo: IN,OUT,IN OUT ","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$34",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parameter ::= variable_ids DOSPUNTOS error NT$34 variable_type OPERASIG expression 
            {
              Parameter RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Parameter) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$35 ::= 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
parser.report_error("parameter: Se esperaba un tipo","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$35",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parameter ::= variable_ids DOSPUNTOS mode error NT$35 OPERASIG expression 
            {
              Parameter RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Parameter) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parameter ::= variable_ids DOSPUNTOS mode variable_type OPERASIG error 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("parameter: Se esperaba una expresion","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parameter ::= variable_ids DOSPUNTOS mode variable_type 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableType vtype = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vids,m,vtype); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parameter ::= variable_ids DOSPUNTOS mode error 
            {
              Parameter RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Mode m = (Mode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("parameter: Se esperaba un tipo","\t"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameter ::= variable_declaration 
            {
              Parameter RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vd.getVariables(),vd.getType()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameter ::= variable_declaration OPERASIG expression 
            {
              Parameter RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableDeclaration vd = (VariableDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parameter(vd.getVariables(),vd.getType(),e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mode ::= IN 
            {
              Mode RESULT =null;
		 RESULT = new ModeIn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mode ::= INOUT 
            {
              Mode RESULT =null;
		 RESULT = new ModeInOut(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // mode ::= OUT 
            {
              Mode RESULT =null;
		 RESULT = new ModeOut(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mode",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= literal_expression 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralExpression le = (LiteralExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression ::= arithmetic_expression 
            {
              Expression RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithmeticExpression ae = (ArithmeticExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression ::= PARIZQ expression PARDER 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= PARIZQ expression error 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("expression: se esperaba\")\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= boolean_expression 
            {
              Expression RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BooleanExpression be = (BooleanExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = be; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= logical_expression 
            {
              Expression RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LogicalExpression le = (LogicalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = le; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= function_call 
            {
              Expression RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // literal_expression ::= NUMEROENTERO 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerNumber(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // literal_expression ::= NUMEROFLOAT 
            {
              LiteralExpression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatNumber(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // literal_expression ::= TRUE 
            {
              LiteralExpression RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literal_expression ::= FALSE 
            {
              LiteralExpression RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // literal_expression ::= CADENA 
            {
              LiteralExpression RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringLiteral(cad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arithmetic_expression ::= expression OPERSUMA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Add(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arithmetic_expression ::= expression OPERSUMA error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arithmetic_expression ::= expression OPERRESTA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  Minus(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // arithmetic_expression ::= expression OPERRESTA error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // arithmetic_expression ::= expression OPERDIVISION expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // arithmetic_expression ::= expression OPERDIVISION error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // arithmetic_expression ::= expression OPERMULTIPLICACION expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplication(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // arithmetic_expression ::= expression OPERMULTIPLICACION error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // arithmetic_expression ::= expression OPERPOTENCIA expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pow(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // arithmetic_expression ::= expression OPERPOTENCIA error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // arithmetic_expression ::= OPERRESTA expression 
            {
              ArithmeticExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Negative(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // arithmetic_expression ::= OPERRESTA error 
            {
              ArithmeticExpression RESULT =null;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arithmetic_expression ::= expression MOD expression 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Module(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arithmetic_expression ::= expression MOD error 
            {
              ArithmeticExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("arithmetic_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // boolean_expression ::= expression OPERIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equal(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // boolean_expression ::= expression OPERIGUAL error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // boolean_expression ::= expression OPERDISTINTO expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // boolean_expression ::= expression OPERDISTINTO error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // boolean_expression ::= expression OPERMAYOR expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Greater(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // boolean_expression ::= expression OPERMAYOR error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // boolean_expression ::= expression OPERMENOR expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Less(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // boolean_expression ::= expression OPERMENOR error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // boolean_expression ::= expression OPERMAYORIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterOrEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // boolean_expression ::= expression OPERMAYORIGUAL error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // boolean_expression ::= expression OPERMENORIGUAL expression 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessOrEqual(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // boolean_expression ::= expression OPERMENORIGUAL error 
            {
              BooleanExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("boolean_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // logical_expression ::= expression AND expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // logical_expression ::= expression AND error 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("logical_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // logical_expression ::= expression OR expression 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // logical_expression ::= expression OR error 
            {
              LogicalExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("logical_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // logical_expression ::= NOT expression 
            {
              LogicalExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // logical_expression ::= NOT error 
            {
              LogicalExpression RESULT =null;
		parser.report_error("logical_expression: se esperaba expresion ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // function_parameters ::= expression 
            {
              FunctionParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new FunctionParameters();
											RESULT.add(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // function_parameters ::= expression COMA function_parameters 
            {
              FunctionParameters RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											fp.add(e); 
											RESULT = fp; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // function_call ::= ID PARIZQ function_parameters PARDER 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier = new Identifier(id); 
											RESULT = new FunctionCall(identifier,fp); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // function_call ::= ID PARIZQ function_parameters error 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionParameters fp = (FunctionParameters)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("function_call: se esperaba \")\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // function_call ::= ID PARIZQ PARDER 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
											Identifier identifier = new Identifier(id);  
											RESULT = new FunctionCall(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // function_call ::= ID PARIZQ error 
            {
              FunctionCall RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		parser.report_error("function_call: se esperaba \")\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // statements ::= statement statements 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // statements ::= 
            {
              Statements RESULT =null;
		 RESULT = new Statements(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // statement ::= assign_variable 
            {
              Statement RESULT =null;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignVariable av = (AssignVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = av; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // statement ::= expression PUNTOCOMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // statement ::= expression error 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.report_error("function_call: se esperaba \";\" ","\t");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // statement ::= get_value 
            {
              Statement RESULT =null;
		int gvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GetValue gv = (GetValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = gv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // statement ::= put_value 
            {
              Statement RESULT =null;
		int pvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PutValue pv = (PutValue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // statement ::= if_statement 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If is = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // statement ::= while_statemet 
            {
              Statement RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While ws = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // statement ::= for_statement 
            {
              Statement RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For fs = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // statement ::= exit_statement 
            {
              Statement RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exit es = (Exit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // statement ::= loop_statement 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Loop ls = (Loop)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // statement ::= case_statement 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Case cs = (Case)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // statement ::= return_statement 
            {
              Statement RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Return rs = (Return)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // range ::= expression DOBLEPUNTO expression 
            {
              Range RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Range(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // variable_ids ::= ID 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // variable_ids ::= ID COMA variable_ids 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											Identifier identifier = new Identifier(id);
											vids.add(identifier);
											RESULT = vids;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // variable_ids ::= ID COMA error 
            {
              VariableIDs RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba una variable después de la coma.", "Error en variables: ");
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // variable_type ::= INTEGER 
            {
              VariableType RESULT =null;
		 RESULT = new TypeInteger(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // variable_type ::= BOOLEAN 
            {
              VariableType RESULT =null;
		 RESULT = new TypeBoolean(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // variable_type ::= FLOAT 
            {
              VariableType RESULT =null;
		 RESULT = new TypeFloat(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // variable_type ::= STRING 
            {
              VariableType RESULT =null;
		 RESULT = new TypeString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // assign_variable ::= ID OPERASIG expression PUNTOCOMA 
            {
              AssignVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
											Identifier identifier = new Identifier(id); 
											RESULT = new AssignVariableSimple(identifier, e); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$36 ::= 
            {
              AssignVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("Se esperaba el valor a asignar.","Error en asignación: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$36",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // assign_variable ::= ID OPERASIG error NT$36 PUNTOCOMA 
            {
              AssignVariable RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (AssignVariable) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // assign_variable ::= ID OPERASIG expression error 
            {
              AssignVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											parser.report_error("Se esperaba \";\"","Error en asignación: ");
											Identifier identifier = new Identifier(id); 
											RESULT = new AssignVariableSimple(identifier, e); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // variable_declaration ::= variable_ids DOSPUNTOS variable_type PUNTOCOMA 
            {
              VariableDeclaration RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType types = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VariableDeclaration(vids,types); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // NT$37 ::= 
            {
              VariableDeclaration RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \":\" ","Error en declaración de variables: ");
											RESULT = new VariableDeclaration(vids, types);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$37",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // variable_declaration ::= variable_ids error NT$37 variable_type PUNTOCOMA 
            {
              VariableDeclaration RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (VariableDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VariableType types = (VariableType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // variable_declaration ::= variable_ids DOSPUNTOS error 
            {
              VariableDeclaration RESULT =null;
		int vidsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vidsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VariableIDs vids = (VariableIDs)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba el tipo de variables.","Error en declaración de variables: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // get_value ::= GET PARIZQ ID PARDER PUNTOCOMA 
            {
              GetValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$38 ::= 
            {
              GetValue RESULT =null;

											parser.report_error("Se esperaba \"(\" ","Error en Get: ");
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$38",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // get_value ::= GET error NT$38 ID PARDER PUNTOCOMA 
            {
              GetValue RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (GetValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$39 ::= 
            {
              GetValue RESULT =null;

											parser.report_error("Se esperaba una variable","Error en Get: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$39",75, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // get_value ::= GET PARIZQ error NT$39 PARDER PUNTOCOMA 
            {
              GetValue RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (GetValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // NT$40 ::= 
            {
              GetValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \")\" ","Error en Get: ");
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$40",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // get_value ::= GET PARIZQ ID error NT$40 PUNTOCOMA 
            {
              GetValue RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (GetValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // get_value ::= GET PARIZQ ID PARDER error 
            {
              GetValue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en Get: ");
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // put_value ::= PUT PARIZQ expression PARDER PUNTOCOMA 
            {
              PutValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PutValue(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$41 ::= 
            {
              PutValue RESULT =null;

											parser.report_error("Se esperaba \"(\" ","Error en Put: ");
											RESULT = new PutValue(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$41",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // put_value ::= PUT error NT$41 expression PARDER PUNTOCOMA 
            {
              PutValue RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (PutValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$42 ::= 
            {
              PutValue RESULT =null;

											parser.report_error("Se esperaba valor a imprimir.","Error en Put: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$42",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // put_value ::= PUT PARIZQ error NT$42 PARDER PUNTOCOMA 
            {
              PutValue RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (PutValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$43 ::= 
            {
              PutValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \")\" ","Error en Put: ");
											RESULT = new PutValue(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$43",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // put_value ::= PUT PARIZQ expression error NT$43 PUNTOCOMA 
            {
              PutValue RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (PutValue) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // put_value ::= PUT PARIZQ expression PARDER error 
            {
              PutValue RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en Put: ");
											RESULT = new PutValue(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // elsif_statements ::= elsif_statement elsif_statements 
            {
              ElsIfList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElsIf es = (ElsIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int essleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int essright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElsIfList ess = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											ess.add(es); 
											RESULT = ess; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // elsif_statements ::= elsif_statement 
            {
              ElsIfList RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElsIf es = (ElsIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new ElsIfList();
											RESULT.add(es); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // elsif_statement ::= ELSIF expression THEN statements 
            {
              ElsIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElsIf(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$44 ::= 
            {
              ElsIf RESULT =null;

											parser.report_error("Se esperaba un valor a evaluar.","Error en ElsIf: ");
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$44",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // elsif_statement ::= ELSIF error NT$44 THEN statements 
            {
              ElsIf RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (ElsIf) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$45 ::= 
            {
              ElsIf RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"then\" ","Error en ElsIf: ");
											RESULT = new ElsIf(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$45",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // elsif_statement ::= ELSIF expression error NT$45 statements 
            {
              ElsIf RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (ElsIf) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // if_statement ::= IF expression THEN statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfSimple(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // NT$46 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"then\" ","Error en If: ");
											RESULT = new IfSimple(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$46",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // if_statement ::= IF expression error NT$46 statements END IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // NT$47 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfSimple(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$47",83, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // if_statement ::= IF expression THEN statements error NT$47 IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // NT$48 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfSimple(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$48",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // if_statement ::= IF expression THEN statements END error NT$48 PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // if_statement ::= IF expression THEN statements END IF error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en If: ");
											RESULT = new IfSimple(e, s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // if_statement ::= IF expression THEN statements ELSE statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new  IfWithElse(e,s1,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // NT$49 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new  IfWithElse(e,s1,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$49",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // if_statement ::= IF expression THEN statements ELSE statements error NT$49 IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$50 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new  IfWithElse(e,s1,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$50",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // if_statement ::= IF expression THEN statements ELSE statements END error NT$50 PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // if_statement ::= IF expression THEN statements ELSE statements END IF error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en If: ");
											RESULT = new  IfWithElse(e,s1,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // if_statement ::= IF expression THEN statements elsif_statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfWithElsIF(e,s,es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // NT$51 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfWithElsIF(e,s,es);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$51",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // if_statement ::= IF expression THEN statements elsif_statements error NT$51 IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$52 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfWithElsIF(e,s,es);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$52",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // if_statement ::= IF expression THEN statements elsif_statements END error NT$52 PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // if_statement ::= IF expression THEN statements elsif_statements END IF error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en If: ");
											RESULT = new IfWithElsIF(e,s,es);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END IF PUNTOCOMA 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new IfWithElsIfAndElse(e,s1,es,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NT$53 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfWithElsIfAndElse(e,s1,es,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$53",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements error NT$53 IF PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NT$54 ::= 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end if\" ","Error en If: ");
											RESULT = new IfWithElsIfAndElse(e,s1,es,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$54",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END error NT$54 PUNTOCOMA 
            {
              If RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (If) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END IF error 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Statements s1 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ElsIfList es = (ElsIfList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s2 = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en If: ");
											RESULT = new IfWithElsIfAndElse(e,s1,es,s2);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // while_statemet ::= WHILE expression LOOP statements END LOOP PUNTOCOMA 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new While(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // NT$55 ::= 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"loop\" ","Error en while: ");
											RESULT = new While(e,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$55",91, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // while_statemet ::= WHILE expression error NT$55 statements END LOOP PUNTOCOMA 
            {
              While RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (While) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$56 ::= 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en while: ");
											RESULT = new While(e,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$56",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // while_statemet ::= WHILE expression LOOP statements error NT$56 LOOP PUNTOCOMA 
            {
              While RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (While) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // NT$57 ::= 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en while: ");
											RESULT = new While(e,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$57",93, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // while_statemet ::= WHILE expression LOOP statements END error NT$57 PUNTOCOMA 
            {
              While RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (While) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // while_statemet ::= WHILE expression LOOP statements END LOOP error 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en while: ");
											RESULT = new While(e,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // NT$58 ::= 
            {
              For RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$58",94, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NT$59 ::= 
            {
              For RESULT =(For) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"in\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$59",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NT$60 ::= 
            {
              For RESULT =(For) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"loop\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$60",96, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // NT$61 ::= 
            {
              For RESULT =(For) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-35)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-35)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-35)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-33)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-31)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-31)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-31)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-22)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-20)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$61",97, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // NT$62 ::= 
            {
              For RESULT =(For) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-46)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-46)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-46)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-44)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-44)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-44)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-42)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-42)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-42)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-36)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-36)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-36)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-33)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-31)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-31)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-31)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-26)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-24)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$62",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // for_statement ::= FOR ID IN range LOOP statements END LOOP PUNTOCOMA NT$58 FOR ID error NT$59 range LOOP statements END LOOP PUNTOCOMA FOR ID IN range error NT$60 statements END LOOP PUNTOCOMA FOR ID IN range LOOP statements error NT$61 LOOP PUNTOCOMA FOR ID IN range LOOP statements END error NT$62 PUNTOCOMA FOR ID IN range LOOP statements END LOOP error 
            {
              For RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (For) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-57)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-57)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-57)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-55)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-55)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-55)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-53)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-53)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-53)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-47)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-47)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-47)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-44)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-44)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-44)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-42)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-42)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-42)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-37)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-37)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-37)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-35)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-35)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-35)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-32)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-32)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-32)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-27)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en for: ");
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-58)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // exit_statement ::= EXIT WHEN expression PUNTOCOMA 
            {
              Exit RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Exit(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NT$63 ::= 
            {
              Exit RESULT =null;

											parser.report_error("Se esperaba \"when\" ","Error: ");
											RESULT = new Exit(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$63",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // exit_statement ::= EXIT error NT$63 expression PUNTOCOMA 
            {
              Exit RESULT =null;
              // propagate RESULT from NT$63
                RESULT = (Exit) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // exit_statement ::= EXIT WHEN expression error 
            {
              Exit RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											parser.report_error("Se esperaba \";\" ","Error: ");
											RESULT = new Exit(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // loop_statement ::= LOOP statements END LOOP PUNTOCOMA 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Loop(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // NT$64 ::= 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en loop: ");
											RESULT = new Loop(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$64",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // loop_statement ::= LOOP statements error NT$64 LOOP PUNTOCOMA 
            {
              Loop RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Loop) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // NT$65 ::= 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end loop\" ","Error en loop: ");
											RESULT = new Loop(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$65",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // loop_statement ::= LOOP statements END error NT$65 PUNTOCOMA 
            {
              Loop RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Loop) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // loop_statement ::= LOOP statements END LOOP error 
            {
              Loop RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en loop: ");
											RESULT = new Loop(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // case_statement ::= CASE expression IS when_list END CASE PUNTOCOMA 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
											//recorrer wl para ver si tiene algun elemento Others
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // NT$66 ::= 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"is\" ","Error en case: ");
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$66",102, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // case_statement ::= CASE expression error NT$66 when_list END CASE PUNTOCOMA 
            {
              Case RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Case) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NT$67 ::= 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"end case\" ","Error en case: ");
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$67",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // case_statement ::= CASE expression IS when_list error NT$67 CASE PUNTOCOMA 
            {
              Case RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Case) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // NT$68 ::= 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

											parser.report_error("Se esperaba \"end case\" ","Error en case: ");
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$68",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // case_statement ::= CASE expression IS when_list END error NT$68 PUNTOCOMA 
            {
              Case RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Case) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // case_statement ::= CASE expression IS when_list END CASE error 
            {
              Case RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
											parser.report_error("Se esperaba \";\" ","Error en case: ");
											boolean hasOthers = false;
											Statements othersStatements = null;
											int othersCount = 0;
											for(int i = 0; i < wl.size(); i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size() - 1){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount > 1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
												RESULT = new CaseOthers(e,wl,othersStatements);													
											} else {
												RESULT = new CaseNotOthers(e,wl);												
											}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("case_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // when_list ::= when_element 
            {
              WhenList RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int weright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenElement we = (WhenElement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenList(); RESULT.add(we); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // when_list ::= when_element when_list 
            {
              WhenList RESULT =null;
		int weleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int weright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhenElement we = (WhenElement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenList wl = (WhenList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											wl.add(we); 
											RESULT = wl; 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // when_element ::= WHEN when_options OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenOptions w = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenElement(w,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // NT$69 ::= 
            {
              WhenElement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhenOptions w = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

											parser.report_error("Se esperaba \"=>\" ","Error: ");
											RESULT = new WhenElement(w,s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$69",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // when_element ::= WHEN when_options error NT$69 statements 
            {
              WhenElement RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (WhenElement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WhenOptions w = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // when_element ::= WHEN OTHERS OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenElement(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // NT$70 ::= 
            {
              WhenElement RESULT =null;

											parser.report_error("Se esperaba \"others\" ","Error: ");
											RESULT = new WhenElement(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$70",106, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // when_element ::= WHEN error NT$70 OPERPUNTERO statements 
            {
              WhenElement RESULT =null;
              // propagate RESULT from NT$70
                RESULT = (WhenElement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // NT$71 ::= 
            {
              WhenElement RESULT =null;

											parser.report_error("Se esperaba \"=>\" ","Error: ");
											RESULT = new WhenElement(s);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$71",107, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // when_element ::= WHEN OTHERS error NT$71 statements 
            {
              WhenElement RESULT =null;
              // propagate RESULT from NT$71
                RESULT = (WhenElement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements s = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_element",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // when_options ::= option_when 
            {
              WhenOptions RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenOption opt = (WhenOption)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											RESULT = new WhenOptions();
											RESULT.add(opt); 
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // when_options ::= option_when PIPE when_options 
            {
              WhenOptions RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		WhenOption opt = (WhenOption)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int optsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhenOptions opts = (WhenOptions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
											opts.add(opt);
											RESULT = opts;
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("when_options",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // option_when ::= expression 
            {
              WhenOption RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenOption(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // option_when ::= range 
            {
              WhenOption RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Range r = (Range)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhenOption(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option_when",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // return_statement ::= RETURN expression PUNTOCOMA 
            {
              Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // return_statement ::= RETURN expression error 
            {
              Return RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											parser.report_error("Se esperaba \";\" ","Error: ");
											RESULT = new Return(e);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_statement",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
