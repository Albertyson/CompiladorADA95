
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 17 22:19:17 CST 2016
//----------------------------------------------------

package mainPackage;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 17 22:19:17 CST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\013\000\002\002\004\000\002\032" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\010\003\000\002\010\005\000\002\011\006" +
    "\000\002\011\005\000\002\012\004\000\002\012\002\000" +
    "\002\013\003\000\002\013\004\000\002\013\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\014\005\000\002\015\003\000\002\015\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\006\000\002\017\006\000\002\020\005\000\002\021" +
    "\007\000\002\022\007\000\002\023\004\000\002\023\003" +
    "\000\002\024\006\000\002\025\011\000\002\025\013\000" +
    "\002\025\012\000\002\025\014\000\002\026\011\000\002" +
    "\027\013\000\002\030\006\000\002\031\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\024\004\001\002\000\004\077\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\036\010\001\002\000\004\077\011\001\002\000" +
    "\006\063\154\064\uffd3\001\002\000\004\064\234\001\002" +
    "\000\004\037\015\001\002\000\004\037\uffff\001\002\000" +
    "\042\011\034\014\051\016\uffdf\017\017\022\052\031\025" +
    "\032\026\034\037\035\055\050\036\056\027\057\031\077" +
    "\035\100\023\101\054\102\033\001\002\000\050\026\ufff9" +
    "\032\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001\002\000" +
    "\004\027\231\001\002\000\046\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\016\uffd8\017\uffd8\022\uffd8\031\uffd8\032\uffd8\034" +
    "\uffd8\035\uffd8\050\uffd8\056\uffd8\057\uffd8\077\uffd8\100\uffd8" +
    "\101\uffd8\102\uffd8\001\002\000\050\026\ufffe\032\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\060" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\001\002\000\046\011\034" +
    "\012\uffdf\013\uffdf\014\051\016\uffdf\017\017\022\052\031" +
    "\025\032\026\034\037\035\055\050\036\056\027\057\031" +
    "\077\035\100\023\101\054\102\033\001\002\000\050\026" +
    "\ufff5\032\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054" +
    "\ufff5\055\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\001\002" +
    "\000\046\011\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\017" +
    "\uffd9\022\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\050\uffd9" +
    "\056\uffd9\057\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\001" +
    "\002\000\022\022\052\050\036\056\027\057\031\077\065" +
    "\100\023\101\054\102\033\001\002\000\042\011\034\014" +
    "\051\016\uffdf\017\017\022\052\031\025\032\026\034\037" +
    "\035\055\050\036\056\027\057\031\077\035\100\023\101" +
    "\054\102\033\001\002\000\022\022\052\050\036\056\027" +
    "\057\031\077\065\100\023\101\054\102\033\001\002\000" +
    "\046\011\uffdb\012\uffdb\013\uffdb\014\uffdb\016\uffdb\017\uffdb" +
    "\022\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\050\uffdb\056" +
    "\uffdb\057\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\001\002" +
    "\000\022\022\052\050\036\056\027\057\031\077\065\100" +
    "\023\101\054\102\033\001\002\000\050\026\ufff8\032\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8" +
    "\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001\002\000\050\026" +
    "\ufff6\032\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054" +
    "\ufff6\055\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\001\002" +
    "\000\022\022\052\050\036\056\027\057\031\077\065\100" +
    "\023\101\054\102\033\001\002\000\046\040\155\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057\123" +
    "\061\ufffd\063\154\064\uffd3\001\002\000\022\022\052\050" +
    "\036\056\027\057\031\077\065\100\023\101\054\102\033" +
    "\001\002\000\004\057\147\001\002\000\046\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\016\uffd5\017\uffd5\022\uffd5\031\uffd5" +
    "\032\uffd5\034\uffd5\035\uffd5\050\uffd5\056\uffd5\057\uffd5\077" +
    "\uffd5\100\uffd5\101\uffd5\102\uffd5\001\002\000\046\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7\022\uffd7\031" +
    "\uffd7\032\uffd7\034\uffd7\035\uffd7\050\uffd7\056\uffd7\057\uffd7" +
    "\077\uffd7\100\uffd7\101\uffd7\102\uffd7\001\002\000\036\041" +
    "\101\042\072\043\073\044\076\045\100\046\070\047\077" +
    "\050\075\051\074\052\102\053\071\054\067\055\104\061" +
    "\146\001\002\000\006\040\142\061\143\001\002\000\046" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\016\uffde\017\uffde\022" +
    "\uffde\031\uffde\032\uffde\034\uffde\035\uffde\050\uffde\056\uffde" +
    "\057\uffde\077\uffde\100\uffde\101\uffde\102\uffde\001\002\000" +
    "\046\011\uffda\012\uffda\013\uffda\014\uffda\016\uffda\017\uffda" +
    "\022\uffda\031\uffda\032\uffda\034\uffda\035\uffda\050\uffda\056" +
    "\uffda\057\uffda\077\uffda\100\uffda\101\uffda\102\uffda\001\002" +
    "\000\050\026\ufffc\032\ufffc\041\ufffc\042\ufffc\043\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\054\ufffc\055\ufffc\060\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\001\002\000\046\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\016\uffd6\017\uffd6\022\uffd6\031\uffd6\032\uffd6\034\uffd6\035" +
    "\uffd6\050\uffd6\056\uffd6\057\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\001\002\000\004\016\137\001\002\000\004\077" +
    "\062\001\002\000\050\026\ufff4\032\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\060\ufff4\061\ufff4" +
    "\062\ufff4\063\ufff4\001\002\000\050\026\ufffa\032\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\001\002\000\050\026\ufff7" +
    "\032\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7" +
    "\055\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002\000" +
    "\004\057\056\001\002\000\004\077\057\001\002\000\004" +
    "\060\060\001\002\000\004\061\061\001\002\000\046\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\017\uffcb\022\uffcb" +
    "\031\uffcb\032\uffcb\034\uffcb\035\uffcb\050\uffcb\056\uffcb\057" +
    "\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\001\002\000\004" +
    "\030\063\001\002\000\022\022\052\050\036\056\027\057" +
    "\031\077\065\100\023\101\054\102\033\001\002\000\004" +
    "\032\132\001\002\000\052\026\ufffd\032\ufffd\041\ufffd\042" +
    "\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\057\123\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\001\002\000\036\041\101" +
    "\042\072\043\073\044\076\045\100\046\070\047\077\050" +
    "\075\051\074\052\102\053\071\054\067\055\104\062\103" +
    "\001\002\000\022\022\052\050\036\056\027\057\031\077" +
    "\065\100\023\101\054\102\033\001\002\000\022\022\052" +
    "\050\036\056\027\057\031\077\065\100\023\101\054\102" +
    "\033\001\002\000\022\022\052\050\036\056\027\057\031" +
    "\077\065\100\023\101\054\102\033\001\002\000\022\022" +
    "\052\050\036\056\027\057\031\077\065\100\023\101\054" +
    "\102\033\001\002\000\022\022\052\050\036\056\027\057" +
    "\031\077\065\100\023\101\054\102\033\001\002\000\022" +
    "\022\052\050\036\056\027\057\031\077\065\100\023\101" +
    "\054\102\033\001\002\000\022\022\052\050\036\056\027" +
    "\057\031\077\065\100\023\101\054\102\033\001\002\000" +
    "\022\022\052\050\036\056\027\057\031\077\065\100\023" +
    "\101\054\102\033\001\002\000\022\022\052\050\036\056" +
    "\027\057\031\077\065\100\023\101\054\102\033\001\002" +
    "\000\022\022\052\050\036\056\027\057\031\077\065\100" +
    "\023\101\054\102\033\001\002\000\022\022\052\050\036" +
    "\056\027\057\031\077\065\100\023\101\054\102\033\001" +
    "\002\000\022\022\052\050\036\056\027\057\031\077\065" +
    "\100\023\101\054\102\033\001\002\000\022\022\052\050" +
    "\036\056\027\057\031\077\065\100\023\101\054\102\033" +
    "\001\002\000\022\022\052\050\036\056\027\057\031\077" +
    "\065\100\023\101\054\102\033\001\002\000\050\026\uffe6" +
    "\032\uffe6\041\101\042\072\043\073\044\076\045\100\046" +
    "\070\047\077\050\075\051\074\052\102\053\071\054\067" +
    "\055\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000" +
    "\036\032\uffd4\041\101\042\072\043\073\044\076\045\100" +
    "\046\070\047\077\050\075\051\074\052\102\053\071\054" +
    "\067\055\104\001\002\000\050\026\ufff1\032\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\071\054\ufff1\055\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\001\002\000\050\026\uffea\032" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea" +
    "\047\077\050\075\051\074\052\102\053\071\054\uffea\055" +
    "\uffea\060\uffea\061\uffea\062\uffea\063\uffea\001\002\000\050" +
    "\026\uffe9\032\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\077\050\075\051\074\052\102\053\071" +
    "\054\uffe9\055\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\001" +
    "\002\000\050\026\ufff3\032\ufff3\041\ufff3\042\ufff3\043\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\074\052" +
    "\102\053\071\054\ufff3\055\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\001\002\000\050\026\uffec\032\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\077\050\075" +
    "\051\074\052\102\053\071\054\uffec\055\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\001\002\000\050\026\ufff2\032\ufff2" +
    "\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047" +
    "\ufff2\050\ufff2\051\074\052\102\053\071\054\ufff2\055\ufff2" +
    "\060\ufff2\061\ufff2\062\ufff2\063\ufff2\001\002\000\050\026" +
    "\ufff0\032\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\071\054" +
    "\ufff0\055\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\001\002" +
    "\000\050\026\uffed\032\uffed\041\uffed\042\uffed\043\uffed\044" +
    "\uffed\045\uffed\046\uffed\047\077\050\075\051\074\052\102" +
    "\053\071\054\uffed\055\uffed\060\uffed\061\uffed\062\uffed\063" +
    "\uffed\001\002\000\050\026\uffeb\032\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\077\050\075\051" +
    "\074\052\102\053\071\054\uffeb\055\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\001\002\000\050\026\uffef\032\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\071\054\uffef\055\uffef\060" +
    "\uffef\061\uffef\062\uffef\063\uffef\001\002\000\050\026\uffe8" +
    "\032\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\047\077\050\075\051\074\052\102\053\071\054\uffe8" +
    "\055\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\001\002\000" +
    "\050\026\uffe7\032\uffe7\041\101\042\072\043\073\044\076" +
    "\045\100\046\070\047\077\050\075\051\074\052\102\053" +
    "\071\054\uffe7\055\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\001\002\000\024\022\052\050\036\056\027\057\031\060" +
    "\125\077\065\100\023\101\054\102\033\001\002\000\040" +
    "\041\101\042\072\043\073\044\076\045\100\046\070\047" +
    "\077\050\075\051\074\052\102\053\071\054\067\055\104" +
    "\060\uffe4\063\130\001\002\000\050\026\uffe1\032\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\001\002\000\004\060\127" +
    "\001\002\000\050\026\uffe2\032\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\053\uffe2\054\uffe2\055\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\001\002\000\022\022\052\050\036\056\027" +
    "\057\031\077\065\100\023\101\054\102\033\001\002\000" +
    "\004\060\uffe3\001\002\000\042\011\034\014\051\016\uffdf" +
    "\017\017\022\052\031\025\032\026\034\037\035\055\050" +
    "\036\056\027\057\031\077\035\100\023\101\054\102\033" +
    "\001\002\000\004\016\134\001\002\000\004\032\135\001" +
    "\002\000\004\061\136\001\002\000\046\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\016\uffc1\017\uffc1\022\uffc1\031\uffc1\032" +
    "\uffc1\034\uffc1\035\uffc1\050\uffc1\056\uffc1\057\uffc1\077\uffc1" +
    "\100\uffc1\101\uffc1\102\uffc1\001\002\000\004\077\140\001" +
    "\002\000\004\061\141\001\002\000\004\002\001\001\002" +
    "\000\022\022\052\050\036\056\027\057\031\077\065\100" +
    "\023\101\054\102\033\001\002\000\046\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\016\uffdd\017\uffdd\022\uffdd\031\uffdd\032" +
    "\uffdd\034\uffdd\035\uffdd\050\uffdd\056\uffdd\057\uffdd\077\uffdd" +
    "\100\uffdd\101\uffdd\102\uffdd\001\002\000\036\041\101\042" +
    "\072\043\073\044\076\045\100\046\070\047\077\050\075" +
    "\051\074\052\102\053\071\054\067\055\104\061\145\001" +
    "\002\000\046\011\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd" +
    "\017\uffcd\022\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd\050" +
    "\uffcd\056\uffcd\057\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd" +
    "\001\002\000\046\011\uffdc\012\uffdc\013\uffdc\014\uffdc\016" +
    "\uffdc\017\uffdc\022\uffdc\031\uffdc\032\uffdc\034\uffdc\035\uffdc" +
    "\050\uffdc\056\uffdc\057\uffdc\077\uffdc\100\uffdc\101\uffdc\102" +
    "\uffdc\001\002\000\022\022\052\050\036\056\027\057\031" +
    "\077\065\100\023\101\054\102\033\001\002\000\036\041" +
    "\101\042\072\043\073\044\076\045\100\046\070\047\077" +
    "\050\075\051\074\052\102\053\071\054\067\055\104\060" +
    "\151\001\002\000\004\061\152\001\002\000\046\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\016\uffca\017\uffca\022\uffca\031" +
    "\uffca\032\uffca\034\uffca\035\uffca\050\uffca\056\uffca\057\uffca" +
    "\077\uffca\100\uffca\101\uffca\102\uffca\001\002\000\050\026" +
    "\uffee\032\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee" +
    "\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\071\054" +
    "\uffee\055\uffee\060\uffee\061\uffee\062\uffee\063\uffee\001\002" +
    "\000\004\077\011\001\002\000\022\022\052\050\036\056" +
    "\027\057\031\077\065\100\023\101\054\102\033\001\002" +
    "\000\036\041\101\042\072\043\073\044\076\045\100\046" +
    "\070\047\077\050\075\051\074\052\102\053\071\054\067" +
    "\055\104\061\157\001\002\000\046\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\016\uffce\017\uffce\022\uffce\031\uffce\032\uffce" +
    "\034\uffce\035\uffce\050\uffce\056\uffce\057\uffce\077\uffce\100" +
    "\uffce\101\uffce\102\uffce\001\002\000\004\064\uffd2\001\002" +
    "\000\036\026\162\041\101\042\072\043\073\044\076\045" +
    "\100\046\070\047\077\050\075\051\074\052\102\053\071" +
    "\054\067\055\104\001\002\000\046\011\034\012\uffdf\013" +
    "\uffdf\014\051\016\uffdf\017\017\022\052\031\025\032\026" +
    "\034\037\035\055\050\036\056\027\057\031\077\035\100" +
    "\023\101\054\102\033\001\002\000\010\012\164\013\166" +
    "\016\170\001\002\000\042\011\034\014\051\016\uffdf\017" +
    "\017\022\052\031\025\032\026\034\037\035\055\050\036" +
    "\056\027\057\031\077\035\100\023\101\054\102\033\001" +
    "\002\000\010\012\uffc8\013\166\016\uffc8\001\002\000\022" +
    "\022\052\050\036\056\027\057\031\077\065\100\023\101" +
    "\054\102\033\001\002\000\006\012\173\016\174\001\002" +
    "\000\004\011\171\001\002\000\004\061\172\001\002\000" +
    "\046\011\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6\017\uffc6" +
    "\022\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\050\uffc6\056" +
    "\uffc6\057\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002" +
    "\000\042\011\034\014\051\016\uffdf\017\017\022\052\031" +
    "\025\032\026\034\037\035\055\050\036\056\027\057\031" +
    "\077\035\100\023\101\054\102\033\001\002\000\004\011" +
    "\175\001\002\000\004\061\176\001\002\000\046\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\022\uffc4\031" +
    "\uffc4\032\uffc4\034\uffc4\035\uffc4\050\uffc4\056\uffc4\057\uffc4" +
    "\077\uffc4\100\uffc4\101\uffc4\102\uffc4\001\002\000\004\016" +
    "\200\001\002\000\004\011\201\001\002\000\004\061\202" +
    "\001\002\000\046\011\uffc3\012\uffc3\013\uffc3\014\uffc3\016" +
    "\uffc3\017\uffc3\022\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3" +
    "\050\uffc3\056\uffc3\057\uffc3\077\uffc3\100\uffc3\101\uffc3\102" +
    "\uffc3\001\002\000\036\026\204\041\101\042\072\043\073" +
    "\044\076\045\100\046\070\047\077\050\075\051\074\052" +
    "\102\053\071\054\067\055\104\001\002\000\046\011\034" +
    "\012\uffdf\013\uffdf\014\051\016\uffdf\017\017\022\052\031" +
    "\025\032\026\034\037\035\055\050\036\056\027\057\031" +
    "\077\035\100\023\101\054\102\033\001\002\000\010\012" +
    "\uffc7\013\uffc7\016\uffc7\001\002\000\006\012\uffc9\016\uffc9" +
    "\001\002\000\004\016\210\001\002\000\004\011\211\001" +
    "\002\000\004\061\212\001\002\000\046\011\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\016\uffc5\017\uffc5\022\uffc5\031\uffc5\032" +
    "\uffc5\034\uffc5\035\uffc5\050\uffc5\056\uffc5\057\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\102\uffc5\001\002\000\036\041\101\042" +
    "\072\043\073\044\076\045\100\046\070\047\077\050\075" +
    "\051\074\052\102\053\071\054\067\055\104\060\214\001" +
    "\002\000\050\026\ufffb\032\ufffb\041\ufffb\042\ufffb\043\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\053\ufffb\054\ufffb\055\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\063\ufffb\001\002\000\050\026\uffe5\032\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\071\054\uffe5\055\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\001\002\000\004\016\217\001\002" +
    "\000\004\032\220\001\002\000\004\061\221\001\002\000" +
    "\046\011\uffbf\012\uffbf\013\uffbf\014\uffbf\016\uffbf\017\uffbf" +
    "\022\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\050\uffbf\056" +
    "\uffbf\057\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\001\002" +
    "\000\036\032\223\041\101\042\072\043\073\044\076\045" +
    "\100\046\070\047\077\050\075\051\074\052\102\053\071" +
    "\054\067\055\104\001\002\000\042\011\034\014\051\016" +
    "\uffdf\017\017\022\052\031\025\032\026\034\037\035\055" +
    "\050\036\056\027\057\031\077\035\100\023\101\054\102" +
    "\033\001\002\000\004\016\225\001\002\000\004\032\226" +
    "\001\002\000\004\061\227\001\002\000\046\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2\022\uffc2\031\uffc2" +
    "\032\uffc2\034\uffc2\035\uffc2\050\uffc2\056\uffc2\057\uffc2\077" +
    "\uffc2\100\uffc2\101\uffc2\102\uffc2\001\002\000\010\012\uffe0" +
    "\013\uffe0\016\uffe0\001\002\000\022\022\052\050\036\056" +
    "\027\057\031\077\065\100\023\101\054\102\033\001\002" +
    "\000\036\041\101\042\072\043\073\044\076\045\100\046" +
    "\070\047\077\050\075\051\074\052\102\053\071\054\067" +
    "\055\104\061\233\001\002\000\046\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\016\uffc0\017\uffc0\022\uffc0\031\uffc0\032\uffc0" +
    "\034\uffc0\035\uffc0\050\uffc0\056\uffc0\057\uffc0\077\uffc0\100" +
    "\uffc0\101\uffc0\102\uffc0\001\002\000\010\004\235\005\240" +
    "\006\237\001\002\000\010\037\uffd1\040\uffd1\061\uffd1\001" +
    "\002\000\010\037\uffcc\040\uffcc\061\uffcc\001\002\000\010" +
    "\037\uffcf\040\uffcf\061\uffcf\001\002\000\010\037\uffd0\040" +
    "\uffd0\061\uffd0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\011\020\013\032\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\041\004\020\005\045\006\052\007\015\011\031\012" +
    "\047\013\021\015\011\017\043\020\042\021\027\022\044" +
    "\025\023\026\017\027\040\030\046\031\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\041\004\020\005\045\006\052\007" +
    "\015\011\031\012\227\013\021\015\011\017\043\020\042" +
    "\021\027\022\044\025\023\026\017\027\040\030\046\031" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\221\004\020\005\045\006\052\007\015\011\031\001" +
    "\001\000\046\003\041\004\020\005\045\006\052\007\015" +
    "\011\031\012\215\013\021\015\011\017\043\020\042\021" +
    "\027\022\044\025\023\026\017\027\040\030\046\031\037" +
    "\001\001\000\016\003\214\004\020\005\045\006\052\007" +
    "\015\011\031\001\001\000\002\001\001\000\016\003\212" +
    "\004\020\005\045\006\052\007\015\011\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\160\004\020" +
    "\005\045\006\052\007\015\011\031\001\001\000\002\001" +
    "\001\000\016\003\152\004\020\005\045\006\052\007\015" +
    "\011\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\065\004\020\005" +
    "\045\006\052\007\015\011\031\014\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\121\004\020\005\045\006\052\007\015\011\031\001\001" +
    "\000\016\003\120\004\020\005\045\006\052\007\015\011" +
    "\031\001\001\000\016\003\117\004\020\005\045\006\052" +
    "\007\015\011\031\001\001\000\016\003\116\004\020\005" +
    "\045\006\052\007\015\011\031\001\001\000\016\003\115" +
    "\004\020\005\045\006\052\007\015\011\031\001\001\000" +
    "\016\003\114\004\020\005\045\006\052\007\015\011\031" +
    "\001\001\000\016\003\113\004\020\005\045\006\052\007" +
    "\015\011\031\001\001\000\016\003\112\004\020\005\045" +
    "\006\052\007\015\011\031\001\001\000\016\003\111\004" +
    "\020\005\045\006\052\007\015\011\031\001\001\000\016" +
    "\003\110\004\020\005\045\006\052\007\015\011\031\001" +
    "\001\000\016\003\107\004\020\005\045\006\052\007\015" +
    "\011\031\001\001\000\016\003\106\004\020\005\045\006" +
    "\052\007\015\011\031\001\001\000\016\003\105\004\020" +
    "\005\045\006\052\007\015\011\031\001\001\000\016\003" +
    "\104\004\020\005\045\006\052\007\015\011\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\123\004\020\005\045\006" +
    "\052\007\015\010\125\011\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\123\004\020\005\045\006\052\007\015\010\130" +
    "\011\031\001\001\000\002\001\001\000\046\003\041\004" +
    "\020\005\045\006\052\007\015\011\031\012\132\013\021" +
    "\015\011\017\043\020\042\021\027\022\044\025\023\026" +
    "\017\027\040\030\046\031\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\143\004\020\005\045\006\052\007\015\011\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\147\004\020\005\045\006" +
    "\052\007\015\011\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\157\001\001\000\016\003\155\004\020\005\045\006\052" +
    "\007\015\011\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\041" +
    "\004\020\005\045\006\052\007\015\011\031\012\162\013" +
    "\021\015\011\017\043\020\042\021\027\022\044\025\023" +
    "\026\017\027\040\030\046\031\037\001\001\000\006\023" +
    "\166\024\164\001\001\000\046\003\041\004\020\005\045" +
    "\006\052\007\015\011\031\012\206\013\021\015\011\017" +
    "\043\020\042\021\027\022\044\025\023\026\017\027\040" +
    "\030\046\031\037\001\001\000\006\023\205\024\164\001" +
    "\001\000\016\003\202\004\020\005\045\006\052\007\015" +
    "\011\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\041\004\020" +
    "\005\045\006\052\007\015\011\031\012\176\013\021\015" +
    "\011\017\043\020\042\021\027\022\044\025\023\026\017" +
    "\027\040\030\046\031\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\041\004\020\005\045\006\052\007\015" +
    "\011\031\012\204\013\021\015\011\017\043\020\042\021" +
    "\027\022\044\025\023\026\017\027\040\030\046\031\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\041\004\020\005" +
    "\045\006\052\007\015\011\031\012\223\013\021\015\011" +
    "\017\043\020\042\021\027\022\044\025\023\026\017\027" +
    "\040\030\046\031\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\231\004\020\005\045\006\052\007\015" +
    "\011\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line " + (s.left + 1));   
				if (s.right >= 0){
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		//System.exit(1);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loop_statement ::= LOOP statements END LOOP PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_statement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exit_statement ::= EXIT WHEN expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("exit when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exit_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for_statement ::= FOR ID IN range LOOP statements END LOOP PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while_statemet ::= WHILE expression LOOP statements END LOOP PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statemet",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if_statement ::= IF expression THEN statements elsif_statements ELSE statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If con elsif con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_statement ::= IF expression THEN statements elsif_statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If con elsif sin else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_statement ::= IF expression THEN statements ELSE statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If Sencillo con else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // if_statement ::= IF expression THEN statements END IF PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("If Sencillo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elsif_statement ::= ELSIF expression THEN statements 
            {
              Object RESULT =null;
		 System.out.println("elsif"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elsif_statements ::= elsif_statement 
            {
              Object RESULT =null;
		 System.out.println("elsif statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elsif_statements ::= elsif_statement elsif_statements 
            {
              Object RESULT =null;
		 System.out.println("elsif statements"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statements",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // put_value ::= PUT PARIZQ expression PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Put"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("put_value",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // get_value ::= GET PARIZQ ID PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Get"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("get_value",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_declaration ::= variable_ids DOSPUNTOS variable_type 
            {
              Object RESULT =null;
		 System.out.println("Declaracion de variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assign_variable ::= variable_declaration OPERASIG expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("declaracion y Asignacion de variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assign_variable ::= ID OPERASIG expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Asignacion a Variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable_type ::= FLOAT 
            {
              Object RESULT =null;
		 System.out.println("Tipo Float"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_type ::= BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println("Tipo Boolean"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_type ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("Tipo Integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_ids ::= ID COMA variable_ids 
            {
              Object RESULT =null;
		 System.out.println("Ids"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable_ids ::= ID 
            {
              Object RESULT =null;
		 System.out.println("Id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_ids",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // range ::= expression DOBLEPUNTO expression 
            {
              Object RESULT =null;
		 System.out.println("rango"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("range",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= loop_statement 
            {
              Object RESULT =null;
		 System.out.println("statement loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= exit_statement 
            {
              Object RESULT =null;
		 System.out.println("statement exit when"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= for_statement 
            {
              Object RESULT =null;
		 System.out.println("statement for"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= while_statemet 
            {
              Object RESULT =null;
		 System.out.println("statement while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= if_statement 
            {
              Object RESULT =null;
		 System.out.println("statement if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= put_value 
            {
              Object RESULT =null;
		 System.out.println("statement put value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= get_value 
            {
              Object RESULT =null;
		 System.out.println("statement get value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= expression PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("statement expression"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= variable_declaration PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("statement Declaracion Variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= assign_variable 
            {
              Object RESULT =null;
		 System.out.println("statement asignacion de variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= statement statements 
            {
              Object RESULT =null;
		 System.out.println("statements"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_call ::= ID PARIZQ PARDER 
            {
              Object RESULT =null;
		 System.out.println("llamado a funcion o procedimiento sin parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_call ::= ID PARIZQ function_parameters PARDER 
            {
              Object RESULT =null;
		 System.out.println("llamado a funcion o procedimiento"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_parameters ::= expression COMA function_parameters 
            {
              Object RESULT =null;
		 System.out.println("parametros"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_parameters ::= expression 
            {
              Object RESULT =null;
		 System.out.println("parametro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logical_expression ::= NOT expression 
            {
              Object RESULT =null;
		 System.out.println("not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logical_expression ::= expression OR expression 
            {
              Object RESULT =null;
		 System.out.println("or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logical_expression ::= expression AND expression 
            {
              Object RESULT =null;
		 System.out.println("and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_expression",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolean_expression ::= expression OPERMENORIGUAL expression 
            {
              Object RESULT =null;
		 System.out.println("Menor o Igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolean_expression ::= expression OPERMAYORIGUAL expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor o Igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolean_expression ::= expression OPERMENOR expression 
            {
              Object RESULT =null;
		 System.out.println("Menor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolean_expression ::= expression OPERMAYOR expression 
            {
              Object RESULT =null;
		 System.out.println("Mayor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolean_expression ::= expression OPERDISTINTO expression 
            {
              Object RESULT =null;
		 System.out.println("Distinto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolean_expression ::= expression OPERIGUAL expression 
            {
              Object RESULT =null;
		 System.out.println("Igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arithmetic_expression ::= OPERRESTA expression 
            {
              Object RESULT =null;
		 System.out.println("Negativo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arithmetic_expression ::= expression OPERPOTENCIA expression 
            {
              Object RESULT =null;
		 System.out.println("Potencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arithmetic_expression ::= expression OPERMULTIPLICACION expression 
            {
              Object RESULT =null;
		 System.out.println("Multiplicacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arithmetic_expression ::= expression OPERDIVISION expression 
            {
              Object RESULT =null;
		 System.out.println("Division"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arithmetic_expression ::= expression OPERRESTA expression 
            {
              Object RESULT =null;
		 System.out.println("Resta"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arithmetic_expression ::= expression OPERSUMA expression 
            {
              Object RESULT =null;
		 System.out.println("Suma"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literal_expression ::= NULL 
            {
              Object RESULT =null;
		 System.out.println("null"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // literal_expression ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(cad); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // literal_expression ::= NUMEROFLOAT 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literal_expression ::= NUMEROENTERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= function_call 
            {
              Object RESULT =null;
		 System.out.println("Expresion Llamado a Funcion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= logical_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion Logica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= boolean_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion Booleana"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= PARIZQ expression PARDER 
            {
              Object RESULT =null;
		 System.out.println("Expresion con parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression ::= arithmetic_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion aritmetica"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= literal_expression 
            {
              Object RESULT =null;
		 System.out.println("Expresion literal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_part ::= variable_declaration 
            {
              Object RESULT =null;
		System.out.println("variable_declaration");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_part",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA 
            {
              Object RESULT =null;
		 System.out.println("Programa principal");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

