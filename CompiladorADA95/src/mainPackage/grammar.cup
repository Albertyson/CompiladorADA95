/*
	Para regenerar el Parser.java y sym.java, ejecutar el comando:
		java -jar ../../lib/java-cup-11a.jar grammar.cup
*/
package mainPackage;

import java_cup.runtime.*;


parser code {:
	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line " + (s.left + 1));   
				if (s.right >= 0){
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}

	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		//System.exit(1);
	}
:};

/* ----------Sección de declaraciones de terminales y no terminales--------- */
/* Tipos */
terminal INTEGER, BOOLEAN, FLOAT, CHARACTER, STRING;

/* Valores */
terminal TRUE, FALSE;

/* Estructuras de Control*/
terminal IF, ELSE, ELSIF, FOR;

terminal			DECLARE, END, EXIT, FUNCTION, NULL, OUT, PROCEDURE;
terminal			RETURN, THEN, WHEN, IN, WHILE, LOOP, INOUT, PUT, GET, IS, BEGIN;
terminal			OPERASIG, OPERMENOR, OPERMAYOR, OPERIGUAL, OPERDISTINTO, OPERMAYORIGUAL, OPERMENORIGUAL;
terminal			OPERSUMA, OPERRESTA, OPERMULTIPLICACION, OPERDIVISION, OPERPOTENCIA, AND, OR, NOT, PARIZQ, PARDER;
terminal			PUNTOCOMA, DOBLEPUNTO, COMA, DOSPUNTOS, NEGATIVO,PIPE, PUNTO, NUMERAL, AMPERSAND, DO, OPERPUNTERO, MOD, GOTO, OTHERS;
terminal 			CASE;
terminal String		ID;
terminal String		CADENA,CARACTER;
terminal Integer	NUMEROENTERO;
terminal Double		NUMEROFLOAT;
	 
/* Los no terminales usados en la gramática */
non terminal		program;
non terminal		expression;
non terminal		literal_expression;
non terminal		arithmetic_expression;
non terminal		boolean_expression;
non terminal		logical_expression;
non terminal		function_parameters;
non terminal		function_call;
non terminal		statements;
non terminal		statement;
non terminal		range;
non terminal		variable_ids;
non terminal		variable_type;
non terminal		assign_variable;
non terminal		variable_declaration;
non terminal		get_value;
non terminal		put_value;
non terminal		elsif_statements;
non terminal		elsif_statement;
non terminal		if_statement;
non terminal		while_statemet;
non terminal		for_statement;
non terminal		exit_statement;
non terminal		loop_statement;
non terminal		case_statement;
non terminal		when_options;
non terminal		option_when;
non terminal 		declaration_part;
non terminal 		function_declaration;
non terminal 		procedure_declaration;
non terminal 		parameter_declarations;
non terminal 		parameter;
non terminal 		mode;
non terminal 		return_statement;



/*      Precedencias        */
precedence right	OPERASIG;
precedence left		OR;
precedence left		AND;
precedence left		OPERMENOR, OPERMENORIGUAL, OPERMAYOR, OPERMAYORIGUAL, OPERIGUAL, OPERDISTINTO;
precedence left		OPERSUMA, OPERRESTA;
precedence left		OPERMULTIPLICACION, OPERDIVISION;
precedence left 	MOD;
precedence right	NEGATIVO, NOT, OPERPOTENCIA;
precedence nonassoc	ELSE;



/* ------------------------			Sección de gramática		----------------------------- */

										/* Programa Principal */
program						::=		PROCEDURE ID IS declaration_part BEGIN statements END ID PUNTOCOMA 
										{: System.out.println("Programa principal");:}
									;


declaration_part 			::=		variable_declaration PUNTOCOMA declaration_part
										{:System.out.println("variable_declaration");:}
									| function_declaration declaration_part
										{:System.out.println("function_declaration");:}
									| procedure_declaration declaration_part
										{:System.out.println("procedure_declaration");:}
									|
									;


function_declaration		::=		FUNCTION ID PARIZQ parameter_declarations PARDER RETURN variable_type IS declaration_part BEGIN statements END ID PUNTOCOMA
										{:System.out.println("inside function_declaration");:}
									;


procedure_declaration 		::=		PROCEDURE ID PARIZQ parameter_declarations PARDER IS declaration_part BEGIN statements END ID PUNTOCOMA
										{:System.out.println("inside procedure_declaration");:}
 									;


parameter_declarations 		::=		parameter
										{:System.out.println("parameter");:}
 									| parameter_declarations PUNTOCOMA parameter
										{:System.out.println("parameter_declarations");:}
									|
 									;


parameter 					::=	 	variable_ids DOSPUNTOS mode variable_type OPERASIG expression
										{:System.out.println("parameter with type and mode and assign");:}
									| variable_ids DOSPUNTOS mode variable_type
										{:System.out.println("parameter with type and mode");:}
									| variable_ids DOSPUNTOS variable_type 
										{:System.out.println("parameter with type");:}
									| variable_ids DOSPUNTOS variable_type OPERASIG expression
										{:System.out.println("parameter with type and assignation");:}
 									;


mode              			::= 	IN
										{:System.out.println("IN");:}
		 							| INOUT 
										{:System.out.println("INOUT");:}
		 							| OUT
										{:System.out.println("OUT");:}
		 							;


							/*      >> Expresiones <<    */
/*expression					::=		literal_expression
										{: System.out.println("Expresion literal"); :}
									| ID:id
										{: System.out.println(id); :}
									| arithmetic_expression
										{: System.out.println("Expresion aritmetica"); :}
									| PARIZQ expression PARDER
										{: System.out.println("Expresion con parentesis"); :}
									| boolean_expression
										{: System.out.println("Expresion Booleana"); :}
									| logical_expression
										{: System.out.println("Expresion Logica"); :}
									| function_call
										{: System.out.println("Expresion Llamado a Funcion"); :}
									;*/

/*
literal_expression			::=		NUMEROENTERO:num
										{: System.out.println(num); :}
									| NUMEROFLOAT:num
										{: System.out.println(num); :}
									| TRUE
										{: System.out.println("true"); :}
									| FALSE
										{: System.out.println("false"); :}
									| CADENA:cad
										{: System.out.println("Cadena"); :}
									;*/


/*arithmetic_expression		::=		expression OPERSUMA expression
										{: System.out.println("Suma"); :}
									| expression OPERRESTA expression
										{: System.out.println("Resta"); :}
									| expression OPERDIVISION expression
										{: System.out.println("Division"); :}
									| expression OPERMULTIPLICACION expression
										{: System.out.println("Multiplicacion"); :}
									| expression OPERPOTENCIA expression
										{: System.out.println("Potencia"); :}
									| OPERRESTA expression
										{: System.out.println("Negativo"); :}
										%prec NEGATIVO
									| expression MOD expression
										{: System.out.println("Residuo"); :}										
									;*/


/*boolean_expression			::=		expression OPERIGUAL expression
										{: System.out.println("Igual"); :}
									| expression OPERDISTINTO expression
										{: System.out.println("Distinto"); :}
									| expression OPERMAYOR expression
										{: System.out.println("Mayor"); :}
									| expression OPERMENOR expression
										{: System.out.println("Menor"); :}
									| expression OPERMAYORIGUAL expression
										{: System.out.println("Mayor o Igual"); :}
									| expression OPERMENORIGUAL expression
										{: System.out.println("Menor o Igual"); :}
									;*/


/*logical_expression			::=		expression AND expression
										{: System.out.println("and"); :}
									| expression OR expression
										{: System.out.println("or"); :}
									| NOT expression
										{: System.out.println("not"); :}
									;*/


/*function_parameters			::=		expression:e
										{: RESULT = new FunctionParameters(); RESULT.add(e); :}
									| expression:e COMA function_parameters:fp
										{: fp.add(e); RESULT = fp; :}
									;*/


/*function_call				::=		ID PARIZQ function_parameters PARDER
										{: System.out.println("llamado a funcion o procedimiento"); :}
									| ID PARIZQ PARDER
										{: System.out.println("llamado a funcion o procedimiento sin parametros"); :}
									;*/



							/*      >> Statements <<    */

/*statements					::=		statement statements
										{: System.out.println("statements"); :}
									|	// Vacio 
									;*/


/*statement					::=		assign_variable
										{: System.out.println("statement asignacion de variables"); :}
									| variable_declaration PUNTOCOMA
										{: System.out.println("statement Declaracion Variable"); :}
									| expression PUNTOCOMA
										{: System.out.println("statement expression"); :}
									| get_value
										{: System.out.println("statement get value"); :}
									| put_value
										{: System.out.println("statement put value"); :}
									| if_statement
										{: System.out.println("statement if"); :}
									| while_statemet
										{: System.out.println("statement while"); :}
									| for_statement
										{: System.out.println("statement for"); :}
									| exit_statement
										{: System.out.println("statement exit when"); :}
									| loop_statement
										{: System.out.println("statement loop"); :}
									| case_statement
										{: System.out.println("case statement");:}
									| return_statement
										{: System.out.println("return de función");:}
									;*/


/*range						::=		expression DOBLEPUNTO expression
										{: System.out.println("rango"); :}
									;*/


/*variable_ids				::=		ID
										{: System.out.println("Id"); :}
									| ID COMA variable_ids
										{: System.out.println("Ids"); :}
									;*/


/*variable_type				::=		INTEGER
										{: System.out.println("Tipo Integer"); :}
									| BOOLEAN
										{: System.out.println("Tipo Boolean"); :}
									| FLOAT
										{: System.out.println("Tipo Float"); :}
									| CHARACTER
										{: System.out.println("Tipo Character"); :}
									| STRING
										{: System.out.println("Tipo String"); :}
									;*/


assign_variable				::=		ID OPERASIG expression PUNTOCOMA
										{: System.out.println("Asignacion a Variable"); :}
									| variable_declaration OPERASIG expression PUNTOCOMA
										{: System.out.println("declaracion y Asignacion de variable"); :}
									;


variable_declaration		::=		variable_ids DOSPUNTOS variable_type
										{: System.out.println("Declaracion de variables"); :}
									;


/*get_value					::=		GET PARIZQ ID PARDER PUNTOCOMA
										{: System.out.println("Get"); :}
									;*/


/*put_value					::=		PUT PARIZQ expression PARDER PUNTOCOMA
										{: System.out.println("Put"); :}
									;*/


elsif_statements			::=		elsif_statement elsif_statements
										{: System.out.println("elsif statements"); :}
									| elsif_statement
										{: System.out.println("elsif statement"); :}
									;


elsif_statement				::=		ELSIF expression THEN statements
										{: System.out.println("elsif"); :}
									;


if_statement				::=		IF expression THEN statements END IF PUNTOCOMA
										{: System.out.println("If Sencillo"); :}
									| IF expression THEN statements ELSE statements END IF PUNTOCOMA
										{: System.out.println("If Sencillo con else"); :}
									| IF expression THEN statements elsif_statements END IF PUNTOCOMA
										{: System.out.println("If con elsif sin else"); :}
									| IF expression THEN statements elsif_statements ELSE statements END IF PUNTOCOMA
										{: System.out.println("If con elsif con else"); :}
									;


/*while_statemet				::=		WHILE expression LOOP statements END LOOP PUNTOCOMA
										{: System.out.println("while"); :}
									;*/


/*for_statement				::=		FOR ID IN range LOOP statements END LOOP PUNTOCOMA
										{: System.out.println("for"); :}
									;*/


/*exit_statement				::=		EXIT WHEN expression PUNTOCOMA
										{: System.out.println("exit when"); :}
									;*/


/*loop_statement				::=		LOOP statements END LOOP PUNTOCOMA
										{: System.out.println("loop"); :}
									;*/


/*case_statement				::=		  CASE expression IS WHEN when_options OPERPUNTERO statements END CASE PUNTOCOMA
										{: System.out.println("case_statement"); :}
									| CASE expression IS WHEN when_options OTHERS OPERPUNTERO statements END CASE PUNTOCOMA
										{: System.out.println("case_statement and Others"); :}
									;*/


/*when_options  				::= 	option_when
										{: System.out.println("option_when"); :}
									| option_when PIPE when_options
										{: System.out.println("when_options"); :}
									;*/


/*option_when					::=		expression 
										{: System.out.println("expression"); :}
									| range
										{: System.out.println("range"); :}
									;*/


/*return_statement			::=		RETURN expression PUNTOCOMA
										{: System.out.println("return_statement"); :}
									;
*/