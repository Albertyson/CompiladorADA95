/*
	Para regenerar el Parser.java y sym.java, ejecutar el comando:
		java -jar ../../lib/java-cup-11a.jar grammar.cup
*/
package mainPackage;

import java_cup.runtime.*;
import abstractSyntaxTree.*;
import java.io.File;

parser code {:

/*	public void report_error(String message, Object info) {
		StringBuilder m = new StringBuilder("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
			if (s.left >= 0) {
				m.append(" in line " + (s.left + 1));   
				if (s.right >= 0){
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}
*/
	@Override
	public void report_error(String message, Object info) {
		if (info instanceof String){
			//System.err.println("  " + info + " "+ message + "\n       Parsing resumed from 2nd token before" + s.current_lexeme() + "\n");
			System.err.println("  " + info + " "+ message + "\n");
		} else {
			StringBuffer m = new StringBuffer("Error");
			if (info instanceof java_cup.runtime.Symbol){
				m.append( "(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea " + (((Symbol)info).left+1) + ", columna" + (((Symbol)info).right+1) + ")" );     
			}
			m.append(" : " + message);
			System.err.println(m);
		}
	}


	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Fatal Syntax Error");
	}

:};

/* ----------Sección de declaraciones de terminales y no terminales--------- */
/* Tipos */
terminal INTEGER, BOOLEAN, FLOAT, CHARACTER, STRING;

/* Estructuras de Control*/
terminal IF, ELSE, ELSIF, FOR;

terminal			DECLARE, END, EXIT, FUNCTION, NULL, OUT, PROCEDURE;
terminal			RETURN, THEN, WHEN, IN, WHILE, LOOP, INOUT, PUT, GET, IS, BEGIN;
terminal			OPERASIG, OPERMENOR, OPERMAYOR, OPERIGUAL, OPERDISTINTO, OPERMAYORIGUAL, OPERMENORIGUAL;
terminal			OPERSUMA, OPERRESTA, OPERMULTIPLICACION, OPERDIVISION, OPERPOTENCIA, AND, OR, NOT, PARIZQ, PARDER;
terminal			PUNTOCOMA, DOBLEPUNTO, COMA, DOSPUNTOS, NEGATIVO,PIPE, PUNTO, NUMERAL, AMPERSAND, DO, OPERPUNTERO, MOD, GOTO, OTHERS;
terminal 			CASE;

/* Valores */
terminal String 	ID;
terminal String		CADENA,CARACTER;
terminal Integer	NUMEROENTERO;
terminal Double		NUMEROFLOAT;
terminal True 		TRUE;
terminal False 		FALSE;
	 
/* Los no terminales usados en la gramática */
non terminal		program;
non terminal Expression					expression;
non terminal LiteralExpression			literal_expression;
non terminal ArithmeticExpression		arithmetic_expression;
non terminal BooleanExpression 			boolean_expression;
non terminal LogicalExpression			logical_expression;
non terminal FunctionParameters 		function_parameters;
non terminal FunctionCall 				function_call;
non terminal Statements 				statements;
non terminal Statement					statement;
non terminal Range 						range;
non terminal VariableIDs 				variable_ids;
non terminal VariableType 				variable_type;
non terminal AssignVariable 			assign_variable;
non terminal VariableDeclaration 		variable_declaration;
non terminal GetValue 					get_value;
non terminal PutValue					put_value;
non terminal ElsIfList					elsif_statements;
non terminal ElsIf 						elsif_statement;
non terminal If							if_statement;
non terminal While						while_statemet;
non terminal For						for_statement;
non terminal Exit						exit_statement;
non terminal Loop						loop_statement;
non terminal Case 						case_statement;
non terminal WhenElement 				when_element;
non terminal WhenList 					when_list;
non terminal WhenOptions 				when_options;
non terminal WhenOption 				option_when;
non terminal DeclarationPart  			declaration_part;
non terminal FunctionDeclaration		function_declaration;
non terminal ProcedureDeclaration 		procedure_declaration;
non terminal ParameterDeclarations 		parameter_declarations;
non terminal Parameter 					parameter;
non terminal Mode 						mode;
non terminal Return						return_statement;


/*      Precedencias        */
precedence right	OPERASIG;
precedence left		OR;
precedence left		AND;
precedence left		OPERMENOR, OPERMENORIGUAL, OPERMAYOR, OPERMAYORIGUAL, OPERIGUAL, OPERDISTINTO;
precedence left		OPERSUMA, OPERRESTA;
precedence left		OPERMULTIPLICACION, OPERDIVISION;
precedence left 	MOD;
precedence right	NEGATIVO, NOT, OPERPOTENCIA;
precedence nonassoc	ELSE;



/* ------------------------			Sección de gramática		----------------------------- */

										/* Programa Principal */

program						::=		PROCEDURE ID:id1 IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA 
										{: 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,dp,s,identifier2);
											try {
												ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
												xmlConverter.toXML();
												System.out.println("Se ha generado el arbol");
											} catch(Exception e){
												System.out.println(e.getMessage());
											}
										:}
										//errores para la producción
									|PROCEDURE error{:parser.report_error("Programa principal: Se esperaba ID","\t");:}  IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA 
									|PROCEDURE ID:id1 error{:parser.report_error("Programa principal: Se esperaba IS","\t");:} declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA 
									|PROCEDURE ID:id1 IS error{:parser.report_error("Programa principal: Se esperaban declaraciones","\t");:} BEGIN statements:s END ID:id2 PUNTOCOMA 
									|PROCEDURE ID:id1 IS declaration_part:dp error{:parser.report_error("Programa principal: Se esperaba Begin","\t");:} statements:s END ID:id2 PUNTOCOMA 
									//|PROCEDURE ID:id1 IS declaration_part:dp BEGIN error{:parser.report_error("Programa principal: Se esperaban statements","\t");:} END ID:id2 PUNTOCOMA 
									|PROCEDURE ID:id1 IS declaration_part:dp BEGIN statements:s error{:parser.report_error("Programa principal: Se esperaba End","\t");:} ID:id2 PUNTOCOMA 
									|PROCEDURE ID:id1 IS declaration_part:dp BEGIN statements:s END error{:parser.report_error("Programa principal: Se esperaba ID","\t");:} PUNTOCOMA 
									|PROCEDURE ID:id1 IS declaration_part:dp BEGIN statements:s END ID:id2 error{:parser.report_error("Programa principal: Se esperaba ;","\t");:} 
									|PROCEDURE ID:id1 IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA error{:parser.report_error("Programa principal: Simbolo no esperado","\t");:}
									


									|PROCEDURE ID:id1 IS BEGIN statements:s END ID:id2 PUNTOCOMA 
										{: 
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new Program(identifier1,s,identifier2);
											try {
												ObjectToXMLConverter xmlConverter = new ObjectToXMLConverter(new File("./src/mainPackage/ast.xml"), RESULT);
												xmlConverter.toXML();
												System.out.println("Se ha generado el arbol");
											} catch(Exception e){
												System.out.println(e.getMessage());
											}
										:}
										//errores para la producción
									|PROCEDURE ID:id1 error{:parser.report_error("Programa principal sin declaraciones: Se esperaba IS","\t");:} BEGIN statements:s END ID:id2 PUNTOCOMA 
									|PROCEDURE ID:id1 IS error{:parser.report_error("Programa principal sin declaraciones: Se esperaba Begin","\t");:} statements:s END ID:id2 PUNTOCOMA 
									|PROCEDURE ID:id1 IS BEGIN statements:s error{:parser.report_error("Programa principal sin declaraciones: Se esperaba END","\t");:} ID:id2 PUNTOCOMA 
									|PROCEDURE ID:id1 IS BEGIN statements:s END error{:parser.report_error("Programa principal sin declaraciones: Se esperaba ID","\t");:} PUNTOCOMA 
									|PROCEDURE ID:id1 IS BEGIN statements:s END ID:id2 error{:parser.report_error("Programa principal sin declaraciones: Se esperaba \";\" ","\t");:}
									|error{:parser.report_error("Programa principal: Se esperaba Procedure","\t");:}
									;


declaration_part 			::=		variable_declaration:vd PUNTOCOMA declaration_part:dp
										{:
											dp.add(vd);
											RESULT = dp;
										:}
									| function_declaration:fd declaration_part:dp
										{:
											dp.add(fd);
											RESULT = dp;
										:}
									| procedure_declaration:pd declaration_part:dp
										{:	
											dp.add(pd);
											RESULT = dp;
										:}
									| function_declaration:fd
										{:
											RESULT = new DeclarationPart();
											RESULT.add(fd);
										:}
									| procedure_declaration:pd
										{:
											RESULT = new DeclarationPart();
											RESULT.add(pd);
										:}
									| variable_declaration:vd PUNTOCOMA
										{:
											RESULT = new DeclarationPart();
											RESULT.add(vd);
										:}
									| variable_declaration:vd error{:parser.report_error("Se esperaba \";\" ","\t");:}
									;


function_declaration		::=		FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
										{:
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,dp,s,identifier2); 
										:}
										//errores para la producción
									| FUNCTION error{:parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); :} PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 error{:parser.report_error("Declaracion de funcion: Se esperaba \"(\"","\t");:} parameter_declarations:pds PARDER RETURN variable_type:vtype IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds error{:parser.report_error("Declaracion de funcion: Se esperaba\")\"","\t");:} RETURN variable_type:vtype IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER error{:parser.report_error("Declaracion de funcion: Se esperaba Return","\t");:} variable_type:vtype IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype error{:parser.report_error("Declaracion de funcion: Se esperaba IS","\t");:} declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS declaration_part:dp error{:parser.report_error("Declaracion de funcion: Se esperaba Begin","\t"); :}statements:s END ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS declaration_part:dp BEGIN statements:s error{:parser.report_error("Declaracion de funcion: Se esperaba End","\t"); :}ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS declaration_part:dp BEGIN statements:s END error{:parser.report_error("Declaracion de funcion: Se esperaba ID","\t"); :} PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS declaration_part:dp BEGIN statements:s END ID:id2 error{:parser.report_error("Declaracion de funcion: Se esperaba\";\"","\t");:}



									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS BEGIN statements:s END ID:id2 PUNTOCOMA
										{:
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new FunctionDeclaration(identifier1,pds,vtype,s,identifier2); 
										:}
										//errores para la producción
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN error{:parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba un tipo ","\t"); :} IS BEGIN statements:s END ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype error{:parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba IS","\t"); :}  BEGIN statements:s END ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS error{:parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba Begin","\t"); :} statements:s END ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS BEGIN statements:s error{:parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba END","\t"); :} ID:id2 PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS BEGIN statements:s END error{:parser.report_error("Declaracion de funcion sin declaraciones: Se esperaba ID","\t"); :} PUNTOCOMA
									| FUNCTION ID:id1 PARIZQ parameter_declarations:pds PARDER RETURN variable_type:vtype IS BEGIN statements:s END ID:id2 error{:parser.report_error("Declaracion de funcion: Se esperaba \";\" ","\t"); :}
									;


procedure_declaration 		::=		PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
										{:
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,dp,s,identifier2); 
										:}
									|PROCEDURE error{:parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t"); :} PARIZQ parameter_declarations:pds PARDER IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
									|PROCEDURE ID:id1 error{:parser.report_error("Declaracion de Procedimiento: Se esperaba  \"(\"","\t"); :} parameter_declarations:pds PARDER IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds error{:parser.report_error("Declaracion de Procedimiento: Se esperaba\")\"","\t");:} IS declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER error{:parser.report_error("Declaracion de Procedimiento: Se esperaba Is","\t");:} declaration_part:dp BEGIN statements:s END ID:id2 PUNTOCOMA
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS declaration_part:dp error{:parser.report_error("Declaracion de Procedimiento: Se esperaba Begin","\t");:}  statements:s END ID:id2 PUNTOCOMA
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS declaration_part:dp BEGIN statements:s error{:parser.report_error("Declaracion de Procedimiento: Se esperaba End","\t");:}  ID:id2 PUNTOCOMA
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS declaration_part:dp BEGIN statements:s END error{:parser.report_error("Declaracion de Procedimiento: Se esperaba ID","\t");:}  PUNTOCOMA
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS declaration_part:dp BEGIN statements:s END ID:id2 error{:parser.report_error("Declaracion de Procedimiento: Se esperaba\";\"","\t");:}



									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS BEGIN statements:s END ID:id2 PUNTOCOMA
										{:
											Identifier identifier1 = new Identifier(id1);
											Identifier identifier2 = new Identifier(id2);
											RESULT = new ProcedureDeclaration(identifier1,pds,s,identifier2); 
										:}
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER error{:parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba IS","\t"); :} BEGIN statements:s END ID:id2 PUNTOCOMA
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS error{:parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba Begin","\t"); :} statements:s END ID:id2 PUNTOCOMA
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS BEGIN statements:s error{:parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba End","\t"); :} ID:id2 PUNTOCOMA
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS BEGIN statements:s END error{:parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba ID","\t"); :} PUNTOCOMA									
									|PROCEDURE ID:id1 PARIZQ parameter_declarations:pds PARDER IS BEGIN statements:s END ID:id2 error{:parser.report_error("Declaracion de Procedimiento sin declaraciones: Se esperaba \";\" ","\t"); :}
 									;


parameter_declarations 		::=		parameter:p
										{: RESULT = new ParameterDeclarations(); RESULT.add(p); :}
 									| parameter_declarations:pds PUNTOCOMA parameter:p
										{:
											pds.add(p);
											RESULT = pds;
										:}
									|	{: RESULT = new ParameterDeclarations(); :}
 									;


parameter 					::=	 	variable_ids:vids DOSPUNTOS mode:m variable_type:vtype OPERASIG expression:e
										{: RESULT = new Parameter(vids,m,vtype,e); :}
										//errores para esta producción:
									//| variable_ids:vids error{:parser.report_error("Se esperaba \":\" ","\t"); :} mode:m variable_type:vtype OPERASIG expression:e
									| variable_ids:vids DOSPUNTOS error{:parser.report_error("parameter: Se esperaba un modo: IN,OUT,IN OUT ","\t"); :} variable_type:vtype OPERASIG expression:e
									| variable_ids:vids DOSPUNTOS mode:m error{:parser.report_error("parameter: Se esperaba un tipo","\t"); :} OPERASIG expression:e
									| variable_ids:vids DOSPUNTOS mode:m variable_type:vtype OPERASIG error{:parser.report_error("parameter: Se esperaba una expresion","\t"); :}


									| variable_ids:vids DOSPUNTOS mode:m variable_type:vtype
										{: RESULT = new Parameter(vids,m,vtype); :}
										//errores para esta producción:
									| variable_ids:vids DOSPUNTOS mode:m error{:parser.report_error("parameter: Se esperaba un tipo","\t"); :}


									| variable_declaration:vd
										{: RESULT = new Parameter(vd.getVariables(),vd.getType()); :}
										//errores para esta producción

									| variable_declaration:vd OPERASIG expression:e
										{: RESULT = new Parameter(vd.getVariables(),vd.getType(),e); :}
										//errores para esta producción:
 									;


mode              			::= 	  IN
										{: RESULT = new ModeIn(); :}
		 							| INOUT 
										{: RESULT = new ModeInOut(); :}
		 							| OUT
										{: RESULT = new ModeOut(); :}
		 							;



							/*      >> Expresiones <<    */

expression					::=		literal_expression:le
										{: RESULT = le; :}
									| ID:id
										{: RESULT = new Identifier(id); :}
									| arithmetic_expression:ae
										{: RESULT = ae; :}
									| PARIZQ expression:e PARDER
										{: RESULT = e; :}
									| boolean_expression:be
										{: RESULT = be; :}
									| logical_expression:le
										{: RESULT = le; :}
									| function_call:fc
										{: RESULT = fc; :}
									;


literal_expression			::=		NUMEROENTERO:num
										{: RESULT = new IntegerNumber(num); :}
									| NUMEROFLOAT:num
										{: RESULT = new FloatNumber(num); :}
									| TRUE
										{: RESULT = new True(); :}
									| FALSE
										{: RESULT = new False(); :}
									| CADENA:cad
										{: RESULT = new StringLiteral(cad); :}
									;


arithmetic_expression		::=		expression:e1 OPERSUMA expression:e2
										{: RESULT = new Add(e1,e2); :}
									| expression:e1 OPERRESTA expression:e2
										{: RESULT = new  Minus(e1,e2); :}
									| expression:e1 OPERDIVISION expression : e2
										{: RESULT = new Division(e1,e2); :}
									| expression:e1 OPERMULTIPLICACION expression:e2
										{: RESULT = new Multiplication(e1,e2); :}
									| expression:e1 OPERPOTENCIA expression:e2
										{: RESULT = new Pow(e1,e2); :}
									| OPERRESTA expression:e
										{: RESULT = new Negative(e); :}
										%prec NEGATIVO
									| expression:e1 MOD expression:e2
										{: RESULT = new Module(e1,e2); :}										
									;


boolean_expression			::=		expression:e1 OPERIGUAL expression:e2
										{: RESULT = new Equal(e1,e2); :}
									| expression:e1 OPERDISTINTO expression:e2
										{: RESULT = new NotEqual(e1,e2); :}
									| expression:e1 OPERMAYOR expression:e2
										{: RESULT = new Greater(e1,e2); :}
									| expression:e1 OPERMENOR expression:e2
										{: RESULT = new Less(e1,e2); :}
									| expression:e1 OPERMAYORIGUAL expression:e2
										{: RESULT = new GreaterOrEqual(e1,e2); :}
									| expression:e1 OPERMENORIGUAL expression:e2
										{: RESULT = new LessOrEqual(e1,e2); :}
									;


logical_expression			::=		expression:e1 AND expression:e2
										{: RESULT = new And(e1,e2); :}
									| expression:e1 OR expression:e2
										{: RESULT = new Or(e1,e2); :}
									| NOT expression:e
										{: RESULT = new Not(e); :}
									;


function_parameters			::=		expression:e
										{: 
											RESULT = new FunctionParameters();
											RESULT.add(e);
										:}
									| expression:e COMA function_parameters:fp
										{: 
											fp.add(e); 
											RESULT = fp; 
										:}
									;

function_call				::=		ID:id PARIZQ function_parameters:fp PARDER
										{: 
											Identifier identifier = new Identifier(id); 
											RESULT = new FunctionCall(identifier,fp); 
										:}
									| ID:id PARIZQ PARDER
										{: 
											Identifier identifier = new Identifier(id);  
											RESULT = new FunctionCall(identifier);
										:}
									;



							/*      >> Statements <<    */

statements					::=		statement:s statements:ss
										{: ss.add(s); RESULT = ss; :}
									|	{: RESULT = new Statements(); :}
									;


statement					::=		assign_variable:av
										{: RESULT = av; :}
									/*| variable_declaration PUNTOCOMA
										{: System.out.println("statement Declaracion Variable"); :}*/
									| expression:e PUNTOCOMA
										{: RESULT = e; :}
									| get_value:gv
										{: RESULT = gv; :}
									| put_value:pv
										{: RESULT = pv; :}
									| if_statement:is
										{: RESULT = is; :}
									| while_statemet:ws
										{: RESULT = ws; :}
									| for_statement:fs
										{: RESULT = fs; :}
									| exit_statement:es
										{: RESULT = es; :}
									| loop_statement:ls
										{: RESULT = ls; :}
									| case_statement:cs
										{: RESULT = cs; :}
									| return_statement:rs
										{: RESULT = rs; :}
									;


range						::=		expression:e1 DOBLEPUNTO expression:e2
										{: RESULT = new Range(e1,e2); :}
									;


variable_ids				::=		ID:id
										{:
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
										:}
									| ID:id COMA variable_ids:vids
										{: 
											Identifier identifier = new Identifier(id);
											vids.add(identifier);
											RESULT = vids;
										:}
										//errores para esta producción
									| ID:id error{:
											parser.report_error("variable_ids: Se esperaba \",\" ","\t");
											Identifier identifier = new Identifier(id);
											RESULT = new VariableIDs();
											RESULT.add(identifier);
									:}	variable_ids:vids
									//| ID:id COMA error{:parser.report_error("variable_ids: Se esperaba ID ","\t");:}
									;


variable_type				::=		INTEGER
										{: RESULT = new TypeInteger(); :}
									| BOOLEAN
										{: RESULT = new TypeBoolean(); :}
									| FLOAT
										{: RESULT = new TypeFloat(); :}
									| STRING
										{: RESULT = new TypeString(); :}
									;


assign_variable				::=		ID:id OPERASIG expression:e PUNTOCOMA
										{: 
											Identifier identifier = new Identifier(id); 
											RESULT = new AssignVariableSimple(identifier,e); 
										:}
									/*| variable_declaration OPERASIG expression PUNTOCOMA
										{: System.out.println("declaracion y Asignacion de variable"); :}*/
									;


variable_declaration		::=		variable_ids:vids DOSPUNTOS variable_type:types
										{: RESULT = new VariableDeclaration(vids,types); :}
										//errores para esta producción:
									//|variable_ids:vids error{:parser.report_error("Se esperaba \":\" ","\t");:} variable_type:types
									|variable_ids:vids DOSPUNTOS error{:
										parser.report_error("variable_declaration:Se esperaba un tipo ","\t");
										RESULT = new VariableDeclaration(vids,null); 
									:}
									;


get_value					::=		GET PARIZQ ID:id PARDER PUNTOCOMA
										{: 
											Identifier identifier = new Identifier(id);
											RESULT = new GetValue(identifier);
										:}
									;


put_value					::=		PUT PARIZQ expression:e PARDER PUNTOCOMA
										{: RESULT = new PutValue(e); :}
									;


elsif_statements			::=		elsif_statement:es elsif_statements:ess
										{: 
											ess.add(es); 
											RESULT = ess; 
										:}
									| elsif_statement:es
										{: 
											RESULT = new ElsIfList();
											RESULT.add(es); 
										:}
									;


elsif_statement				::=		ELSIF expression:e THEN statements:s
										{: RESULT = new ElsIf(e,s); :}
									;


if_statement				::=		  IF expression:e THEN statements:s END IF PUNTOCOMA
										{: RESULT = new IfSimple(e,s); :}
									| IF expression:e THEN statements:s1 ELSE statements:s2 END IF PUNTOCOMA
										{: RESULT = new  IfWithElse(e,s1,s2); :}
									| IF expression:e THEN statements:s elsif_statements:es END IF PUNTOCOMA
										{: RESULT = new IfWithElsIF(e,s,es); :}
									| IF expression:e THEN statements:s1 elsif_statements:es ELSE statements:s2 END IF PUNTOCOMA
										{: RESULT = new IfWithElsIfAndElse(e,s1,es,s2); :}
									;


while_statemet				::=		WHILE expression:e LOOP statements:s END LOOP PUNTOCOMA
										{: RESULT = new While(e,s); :}
									;


for_statement				::=		FOR ID:id IN range:r LOOP statements:s END LOOP PUNTOCOMA
										{: 
											Identifier identifier = new Identifier(id);
											RESULT = new For(identifier,r,s); 
										:}
									;


exit_statement				::=		EXIT WHEN expression:e PUNTOCOMA
										{: RESULT = new Exit(e); :}
									;


loop_statement				::=		LOOP statements:s END LOOP PUNTOCOMA
										{: RESULT = new Loop(s); :}
									;


case_statement				::=		  CASE expression:e IS when_list:wl END CASE PUNTOCOMA
										{: 
											//recorrer wl para ver si tiene algun elemento Others
											boolean hasOthers=false;
											Statements othersStatements=null;
											int othersCount = 0;
											for(int i=0;i<wl.size();i++){
												if(wl.getAt(i).getWhenOptions() == null){
													hasOthers = true;
													othersStatements = wl.getAt(i).getStatements();
													othersCount++;
													if(i < wl.size()-1 ){
														parser.report_error("Others debe estar al final","ERROR");
													}
												}
											}
											if(hasOthers){
												if(othersCount>1){
													parser.report_error("Case no puede traer mas de 1 opcion others","ERROR");
												}
													RESULT = new CaseOthers(e,wl,othersStatements);													
											}else{
												RESULT = new CaseNotOthers(e,wl);												
											}
										:}
									// | CASE expression:e IS when_list:wl WHEN OTHERS OPERPUNTERO statements:s END CASE PUNTOCOMA
									// 	{: RESULT = new CaseOthers(e,wl,s); :}
									//| CASE error {: parser.report_error("Expresion inválida para el Case", "WRONG"); :} IS WHEN when_options:w OPERPUNTERO statements:s END CASE PUNTOCOMA
									;

when_list 					::=		when_element:we
										{: RESULT = new WhenList(); RESULT.add(we); :}
									| when_element:we when_list:wl
										{: 
											wl.add(we); 
											RESULT = wl; 
										:}
									;

when_element 				::=		WHEN when_options:w OPERPUNTERO statements:s
										{: RESULT = new WhenElement(w,s); :}
									| WHEN OTHERS OPERPUNTERO statements:s
										{: RESULT = new WhenElement(s); :}
									;

when_options  				::= 	option_when:opt
										{: 
											RESULT = new WhenOptions();
											RESULT.add(opt); 
										:}
									| option_when:opt PIPE when_options:opts
										{: 
											opts.add(opt);
											RESULT = opts;
										:}
									;


option_when					::=		expression:e 
										{: RESULT = new WhenOption(e); :}
									| range:r
										{: RESULT = new WhenOption(r); :}
									;


return_statement			::=		RETURN expression:e PUNTOCOMA
										{: RESULT = new Return(e); :}
									| RETURN error
										{: parser.report_error("Se esperaba un valor de retorno", "ERROR: "); :}
									;
